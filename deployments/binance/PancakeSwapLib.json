{
  "address": "0xFF32E5Db9Eb8b4b546EC8Dc968795654f414f87c",
  "abi": [
    {
      "inputs": [],
      "name": "COIN",
      "outputs": [
        {
          "internalType": "address",
          "name": "wavax",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PANCAKE_ROUTER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "coinQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coinReserve",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "fac",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPathForCoinToToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "hasPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x9442455fc8501173fc3f8f68985e3207001e07948c46d893cb3cc4db5e31f356",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0xFF32E5Db9Eb8b4b546EC8Dc968795654f414f87c",
    "transactionIndex": 28,
    "gasUsed": "915483",
    "logsBloom": "0x
    "blockHash": "0x57510958be41f0818277562501b3daa8cc269193a3c25b72508e6fc51ece4cfc",
    "transactionHash": "0x9442455fc8501173fc3f8f68985e3207001e07948c46d893cb3cc4db5e31f356",
    "logs": [],
    "blockNumber": 6682945,
    "cumulativeGasUsed": "5780827",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a05912a80c1617f9b32b2135f455b951",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"COIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wavax\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANCAKE_ROUTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"coinQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fac\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPathForCoinToToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"hasPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"pancake helpers\",\"kind\":\"dev\",\"methods\":{\"COIN()\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"coinQuote(address,uint256)\":{\"details\":\"Get a quote in Ethereum for the given ERC20 token / token amount\"},\"factory()\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"getPair(address,address,address)\":{\"details\":\"looks for a pool vs wavax\"},\"getPathForCoinToToken(address)\":{\"details\":\"Get a path for coin to the given token\"},\"getReserves(address)\":{\"details\":\"Get the pair reserves given two erc20 tokens\"},\"hasPool(address)\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"pairFor(address,address,address)\":{\"details\":\"calculate pair address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/swap/pancakeswap/PancakeSwapLib.sol\":\"PancakeSwapLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakeFactory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x5aa3cb565f2793e4ae2b90e716aa5f5d38bf68f6f09caa62fe2395db27171faf\"},\"@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakePair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xc432aeec5c038f15c3670ee6128ce41dbfa1f7a9979dc37b967213436ae77b33\"},\"pancakeswap-peripheral/contracts/interfaces/IPancakeRouter01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0xbe0107ac7350e1360883dc9627fd19cb5bc79dc9e982fcd1900833af38a32000\"},\"pancakeswap-peripheral/contracts/interfaces/IPancakeRouter02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\r\\n\\r\\nimport './IPancakeRouter01.sol';\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc8c33596699aa8663bf00da05557bbe54a4809ce7db437ac08e4de58b2f6d6b5\"},\"src/swap/pancakeswap/PancakeSwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"pancakeswap-peripheral/contracts/interfaces/IPancakeRouter02.sol\\\";\\nimport \\\"@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakeFactory.sol\\\";\\nimport \\\"@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakePair.sol\\\";\\n\\n/**\\n * @dev pancake helpers\\n */\\nlibrary PancakeSwapLib {\\n\\n    address public constant PANCAKE_ROUTER_ADDRESS = 0xBCfCcbde45cE874adCB698cC183deBcF17952812;\\n\\n    /**\\n     * @dev Get a quote in Ethereum for the given ERC20 token / token amount\\n     */\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256 coin,\\n            uint256 tokenReserve,\\n            uint256 coinReserve\\n        )\\n    {\\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(PANCAKE_ROUTER_ADDRESS );\\n        address _factory = pancakeRouter.factory();\\n        address _COIN = pancakeRouter.WETH();\\n        address _pair = IPancakeFactory(_factory).getPair(token, _COIN);\\n        (tokenReserve, coinReserve, ) = IPancakePair(_pair).getReserves();\\n        coin = quote(tokenAmount, tokenReserve, coinReserve);\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function factory() external pure returns (address fac) {\\n        fac = IPancakeRouter02(PANCAKE_ROUTER_ADDRESS ).factory();\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function COIN() external pure returns (address wavax) {\\n        wavax = IPancakeRouter02(PANCAKE_ROUTER_ADDRESS ).WETH();\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function hasPool(address token) external view returns (bool) {\\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(PANCAKE_ROUTER_ADDRESS );\\n        address _factory = pancakeRouter.factory();\\n        address _WAVAX = pancakeRouter.WETH();\\n        address _pair = IPancakeFactory(_factory).getPair(token, _WAVAX);\\n        return _pair != address(0);\\n    }\\n\\n    /**\\n     * @dev looks for a pool vs wavax\\n     */\\n    function getPair(address _factory, address tokenA, address tokenB) external view returns (address pair) {\\n        require(_factory != address(0), \\\"INVALID_TOKENS\\\");\\n        require(tokenA != address(0) && tokenB != address(0), \\\"INVALID_TOKENS\\\");\\n        pair =\\n            IPancakeFactory(_factory).getPair(\\n                tokenA,\\n                tokenB\\n            );\\n    }\\n\\n    /**\\n     * @dev Get the pair reserves given two erc20 tokens\\n     */\\n    function getReserves(\\n        address pair\\n    ) external view returns (uint256 reserveA, uint256 reserveB) {\\n        (reserveA, reserveB, ) = IPancakePair(pair).getReserves();\\n    }\\n\\n    /**\\n     * @dev calculate pair address\\n     */\\n    function pairFor(\\n        address _factory,\\n        address tokenA,\\n        address tokenB\\n    ) external pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        _factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"d0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Get a path for coin to the given token\\n     */\\n    function getPathForCoinToToken(address token) external pure returns (address[] memory) {\\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(PANCAKE_ROUTER_ADDRESS );\\n        address[] memory path = new address[](2);\\n        path[0] = token;\\n        path[1] = pancakeRouter.WETH();\\n        return path;\\n    }\\n\\n    /**\\n     * @dev given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n     */\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"Price: Price\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"Price: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = (amountA * (reserveB)) / reserveA;\\n    }\\n\\n    /**\\n     * @dev returns sorted token addresses, used to handle return values from pairs sorted in this order\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"Price: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Price: ZERO_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x57f4889d12f513f28cd552a7f4a883d169598b562644f000eabd477a6d1f07fd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610fb0610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c806361e0b77f11610080578063868d2d1e11610065578063868d2d1e14610283578063a54a72b7146102da578063c45a0155146102e2576100ad565b806361e0b77f146101f95780636d91c0e21461023e576100ad565b806309666696146100b25780631246dbf51461013557806328ac7c511461017c5780633e99c1e4146101ad575b600080fd5b6100e5600480360360208110156100c857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166102ea565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610121578181015183820152602001610109565b505050509050019250505060405180910390f35b6101686004803603602081101561014b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661041b565b604080519115158252519081900360200190f35b61018461060d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101e0600480360360208110156101c357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610625565b6040805192835260208301919091528051918290030190f35b6101846004803603606081101561020f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166106bd565b6101846004803603606081101561025457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040909101351661089f565b6102bc6004803603604081101561029957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561098a565b60408051938452602084019290925282820152519081900360600190f35b610184610c29565b610184610cb6565b604080516002808252606082810190935273bcfccbde45ce874adcb698cc183debcf17952812918391816020016020820280368337019050509050838160008151811061033357fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b357600080fd5b505afa1580156103c7573d6000803e3d6000fd5b505050506040513d60208110156103dd57600080fd5b50518151829060019081106103ee57fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152915050919050565b60008073bcfccbde45ce874adcb698cc183debcf17952812905060008173ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561047d57600080fd5b505afa158015610491573d6000803e3d6000fd5b505050506040513d60208110156104a757600080fd5b5051604080517fad5c4648000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff85169163ad5c4648916004808301926020929190829003018186803b15801561051557600080fd5b505afa158015610529573d6000803e3d6000fd5b505050506040513d602081101561053f57600080fd5b5051604080517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152808416602483015291519293506000929185169163e6a4390591604480820192602092909190829003018186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d60208110156105e957600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1615159695505050505050565b73bcfccbde45ce874adcb698cc183debcf1795281281565b6000808273ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561066e57600080fd5b505afa158015610682573d6000803e3d6000fd5b505050506040513d606081101561069857600080fd5b5080516020909101516dffffffffffffffffffffffffffff9182169591169350915050565b600073ffffffffffffffffffffffffffffffffffffffff841661074157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f544f4b454e53000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff83161580159061077b575073ffffffffffffffffffffffffffffffffffffffff821615155b6107e657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f544f4b454e53000000000000000000000000000000000000604482015290519081900360640190fd5b8373ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561086b57600080fd5b505afa15801561087f573d6000803e3d6000fd5b505050506040513d602081101561089557600080fd5b5051949350505050565b60008060006108ae8585610d12565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527fd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b60008060008073bcfccbde45ce874adcb698cc183debcf17952812905060008173ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ef57600080fd5b505afa158015610a03573d6000803e3d6000fd5b505050506040513d6020811015610a1957600080fd5b5051604080517fad5c4648000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff85169163ad5c4648916004808301926020929190829003018186803b158015610a8757600080fd5b505afa158015610a9b573d6000803e3d6000fd5b505050506040513d6020811015610ab157600080fd5b5051604080517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152808416602483015291519293506000929185169163e6a4390591604480820192602092909190829003018186803b158015610b3157600080fd5b505afa158015610b45573d6000803e3d6000fd5b505050506040513d6020811015610b5b57600080fd5b5051604080517f0902f1ac000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff831691630902f1ac91600480820192606092909190829003018186803b158015610bc757600080fd5b505afa158015610bdb573d6000803e3d6000fd5b505050506040513d6060811015610bf157600080fd5b5080516020909101516dffffffffffffffffffffffffffff9182169750169450610c1c888787610e7b565b9650505050509250925092565b600073bcfccbde45ce874adcb698cc183debcf1795281273ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8557600080fd5b505afa158015610c99573d6000803e3d6000fd5b505050506040513d6020811015610caf57600080fd5b5051919050565b600073bcfccbde45ce874adcb698cc183debcf1795281273ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8557600080fd5b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610db057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f50726963653a204944454e544943414c5f414444524553534553000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610dea578284610ded565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216610e7457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f50726963653a205a45524f5f4144445245535300000000000000000000000000604482015290519081900360640190fd5b9250929050565b6000808411610eeb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f50726963653a2050726963650000000000000000000000000000000000000000604482015290519081900360640190fd5b600083118015610efb5750600082115b610f6657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f50726963653a20494e53554646494349454e545f4c4951554944495459000000604482015290519081900360640190fd5b8282850281610f7157fe5b0494935050505056fea26469706673582212209dff3431871f87f705427e2525149d4df22d7b66253e1d3b8cf08df3558fe46764736f6c63430007030033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c806361e0b77f11610080578063868d2d1e11610065578063868d2d1e14610283578063a54a72b7146102da578063c45a0155146102e2576100ad565b806361e0b77f146101f95780636d91c0e21461023e576100ad565b806309666696146100b25780631246dbf51461013557806328ac7c511461017c5780633e99c1e4146101ad575b600080fd5b6100e5600480360360208110156100c857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166102ea565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610121578181015183820152602001610109565b505050509050019250505060405180910390f35b6101686004803603602081101561014b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661041b565b604080519115158252519081900360200190f35b61018461060d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101e0600480360360208110156101c357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610625565b6040805192835260208301919091528051918290030190f35b6101846004803603606081101561020f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166106bd565b6101846004803603606081101561025457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040909101351661089f565b6102bc6004803603604081101561029957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561098a565b60408051938452602084019290925282820152519081900360600190f35b610184610c29565b610184610cb6565b604080516002808252606082810190935273bcfccbde45ce874adcb698cc183debcf17952812918391816020016020820280368337019050509050838160008151811061033357fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b357600080fd5b505afa1580156103c7573d6000803e3d6000fd5b505050506040513d60208110156103dd57600080fd5b50518151829060019081106103ee57fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152915050919050565b60008073bcfccbde45ce874adcb698cc183debcf17952812905060008173ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561047d57600080fd5b505afa158015610491573d6000803e3d6000fd5b505050506040513d60208110156104a757600080fd5b5051604080517fad5c4648000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff85169163ad5c4648916004808301926020929190829003018186803b15801561051557600080fd5b505afa158015610529573d6000803e3d6000fd5b505050506040513d602081101561053f57600080fd5b5051604080517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152808416602483015291519293506000929185169163e6a4390591604480820192602092909190829003018186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d60208110156105e957600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1615159695505050505050565b73bcfccbde45ce874adcb698cc183debcf1795281281565b6000808273ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561066e57600080fd5b505afa158015610682573d6000803e3d6000fd5b505050506040513d606081101561069857600080fd5b5080516020909101516dffffffffffffffffffffffffffff9182169591169350915050565b600073ffffffffffffffffffffffffffffffffffffffff841661074157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f544f4b454e53000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff83161580159061077b575073ffffffffffffffffffffffffffffffffffffffff821615155b6107e657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f544f4b454e53000000000000000000000000000000000000604482015290519081900360640190fd5b8373ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561086b57600080fd5b505afa15801561087f573d6000803e3d6000fd5b505050506040513d602081101561089557600080fd5b5051949350505050565b60008060006108ae8585610d12565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527fd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b60008060008073bcfccbde45ce874adcb698cc183debcf17952812905060008173ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ef57600080fd5b505afa158015610a03573d6000803e3d6000fd5b505050506040513d6020811015610a1957600080fd5b5051604080517fad5c4648000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff85169163ad5c4648916004808301926020929190829003018186803b158015610a8757600080fd5b505afa158015610a9b573d6000803e3d6000fd5b505050506040513d6020811015610ab157600080fd5b5051604080517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152808416602483015291519293506000929185169163e6a4390591604480820192602092909190829003018186803b158015610b3157600080fd5b505afa158015610b45573d6000803e3d6000fd5b505050506040513d6020811015610b5b57600080fd5b5051604080517f0902f1ac000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff831691630902f1ac91600480820192606092909190829003018186803b158015610bc757600080fd5b505afa158015610bdb573d6000803e3d6000fd5b505050506040513d6060811015610bf157600080fd5b5080516020909101516dffffffffffffffffffffffffffff9182169750169450610c1c888787610e7b565b9650505050509250925092565b600073bcfccbde45ce874adcb698cc183debcf1795281273ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8557600080fd5b505afa158015610c99573d6000803e3d6000fd5b505050506040513d6020811015610caf57600080fd5b5051919050565b600073bcfccbde45ce874adcb698cc183debcf1795281273ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8557600080fd5b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610db057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f50726963653a204944454e544943414c5f414444524553534553000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610dea578284610ded565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216610e7457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f50726963653a205a45524f5f4144445245535300000000000000000000000000604482015290519081900360640190fd5b9250929050565b6000808411610eeb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f50726963653a2050726963650000000000000000000000000000000000000000604482015290519081900360640190fd5b600083118015610efb5750600082115b610f6657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f50726963653a20494e53554646494349454e545f4c4951554944495459000000604482015290519081900360640190fd5b8282850281610f7157fe5b0494935050505056fea26469706673582212209dff3431871f87f705427e2525149d4df22d7b66253e1d3b8cf08df3558fe46764736f6c63430007030033",
  "devdoc": {
    "details": "pancake helpers",
    "kind": "dev",
    "methods": {
      "COIN()": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "coinQuote(address,uint256)": {
        "details": "Get a quote in Ethereum for the given ERC20 token / token amount"
      },
      "factory()": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "getPair(address,address,address)": {
        "details": "looks for a pool vs wavax"
      },
      "getPathForCoinToToken(address)": {
        "details": "Get a path for coin to the given token"
      },
      "getReserves(address)": {
        "details": "Get the pair reserves given two erc20 tokens"
      },
      "hasPool(address)": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "pairFor(address,address,address)": {
        "details": "calculate pair address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}