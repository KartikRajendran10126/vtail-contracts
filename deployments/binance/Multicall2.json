{
  "address": "0x59148d50d78597a575DB84E226a07AB054DBfcc9",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "blockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryAggregate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryBlockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x45b61c588d967ba3a46582fba08127d5f2271afe060b7f4394dd372a1c73b4cf",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x59148d50d78597a575DB84E226a07AB054DBfcc9",
    "transactionIndex": 100,
    "gasUsed": "571638",
    "logsBloom": "0x
    "blockHash": "0xe6a26c5ea5e7ce116abe65fad0ab67232c947297aada8e273b7fe4d1be64d8e7",
    "transactionHash": "0x45b61c588d967ba3a46582fba08127d5f2271afe060b7f4394dd372a1c73b4cf",
    "logs": [],
    "blockNumber": 7881113,
    "cumulativeGasUsed": "15960157",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c610f25efa28c5986bc761fb7852215f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Multicall2 - Aggregate results from multiple read-only function calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/multicall/Multicall2.sol\":\"Multicall2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"src/multicall/Multicall2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @title Multicall2 - Aggregate results from multiple read-only function calls\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n\\ncontract Multicall2 {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n    struct Result {\\n        bool success;\\n        bytes returnData;\\n    }\\n\\n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\\n        blockNumber = block.number;\\n        returnData = new bytes[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n            require(success, \\\"Multicall aggregate: call failed\\\");\\n            returnData[i] = ret;\\n        }\\n    }\\n    function blockAndAggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(true, calls);\\n    }\\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(blockNumber);\\n    }\\n    function getBlockNumber() public view returns (uint256 blockNumber) {\\n        blockNumber = block.number;\\n    }\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n        coinbase = block.coinbase;\\n    }\\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\n        difficulty = block.difficulty;\\n    }\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n        gaslimit = block.gaslimit;\\n    }\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\n        balance = addr.balance;\\n    }\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(block.number - 1);\\n    }\\n    function tryAggregate(bool requireSuccess, Call[] memory calls) public returns (Result[] memory returnData) {\\n        returnData = new Result[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n\\n            if (requireSuccess) {\\n                require(success, \\\"Multicall2 aggregate: call failed\\\");\\n            }\\n\\n            returnData[i] = Result(success, ret);\\n        }\\n    }\\n    function tryBlockAndAggregate(bool requireSuccess, Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\n        blockNumber = block.number;\\n        blockHash = blockhash(block.number);\\n        returnData = tryAggregate(requireSuccess, calls);\\n    }\\n}\",\"keccak256\":\"0xc36ef648514c0283f807ce24b00ae9f255383ad14b7d04e897de6d0e8f8eaef7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610962806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806372425d9d11610081578063bce38bd71161005b578063bce38bd714610182578063c3077fa9146101a2578063ee82ac5e146101b5576100d4565b806372425d9d1461015d57806386d516e814610165578063a8b0574e1461016d576100d4565b8063399542e9116100b2578063399542e91461012057806342cbb15c146101425780634d2301cc1461014a576100d4565b80630f28c97d146100d9578063252dba42146100f757806327e86d6e14610118575b600080fd5b6100e16101c8565b6040516100ee91906107ad565b60405180910390f35b61010a61010536600461062d565b6101cc565b6040516100ee929190610848565b6100e161030b565b61013361012e366004610668565b610314565b6040516100ee939291906108b0565b6100e161032c565b6100e161015836600461060c565b610330565b6100e161033d565b6100e1610341565b610175610345565b6040516100ee9190610786565b610195610190366004610668565b610349565b6040516100ee919061079a565b6101336101b036600461062d565b61049f565b6100e16101c33660046106ba565b6104bc565b4290565b8051439060609067ffffffffffffffff811180156101e957600080fd5b5060405190808252806020026020018201604052801561021d57816020015b60608152602001906001900390816102085790505b50905060005b8351811015610305576000606085838151811061023c57fe5b6020026020010151600001516001600160a01b031686848151811061025d57fe5b602002602001015160200151604051610276919061076a565b6000604051808303816000865af19150503d80600081146102b3576040519150601f19603f3d011682016040523d82523d6000602084013e6102b8565b606091505b5091509150816102e35760405162461bcd60e51b81526004016102da90610813565b60405180910390fd5b808484815181106102f057fe5b60209081029190910101525050600101610223565b50915091565b60001943014090565b43804060606103238585610349565b90509250925092565b4390565b6001600160a01b03163190565b4490565b4590565b4190565b6060815167ffffffffffffffff8111801561036357600080fd5b5060405190808252806020026020018201604052801561039d57816020015b61038a6104c0565b8152602001906001900390816103825790505b50905060005b825181101561049857600060608483815181106103bc57fe5b6020026020010151600001516001600160a01b03168584815181106103dd57fe5b6020026020010151602001516040516103f6919061076a565b6000604051808303816000865af19150503d8060008114610433576040519150601f19603f3d011682016040523d82523d6000602084013e610438565b606091505b5091509150851561046057816104605760405162461bcd60e51b81526004016102da906107b6565b604051806040016040528083151581526020018281525084848151811061048357fe5b602090810291909101015250506001016103a3565b5092915050565b60008060606104af600185610314565b9196909550909350915050565b4090565b60408051808201909152600081526060602082015290565b80356001600160a01b03811681146104ef57600080fd5b919050565b6000601f8381840112610505578182fd5b823567ffffffffffffffff8082111561051a57fe5b602061052981828502016108d8565b838152945080850186820160005b858110156105ff57813589016040601f198181848f0301121561055957600080fd5b81518281018181108a8211171561056c57fe5b83526105798489016104d8565b8152828401358981111561058c57600080fd5b8085019450508d603f8501126105a157600080fd5b87840135898111156105af57fe5b6105be89848e840116016108d8565b92508083528e848287010111156105d457600080fd5b808486018a850137600090830189015280880191909152855250509183019190830190600101610537565b5050505050505092915050565b60006020828403121561061d578081fd5b610626826104d8565b9392505050565b60006020828403121561063e578081fd5b813567ffffffffffffffff811115610654578182fd5b610660848285016104f4565b949350505050565b6000806040838503121561067a578081fd5b82358015158114610689578182fd5b9150602083013567ffffffffffffffff8111156106a4578182fd5b6106b0858286016104f4565b9150509250929050565b6000602082840312156106cb578081fd5b5035919050565b60008282518085526020808601955080818302840101818601855b8481101561073157858303601f190189528151805115158452840151604085850181905261071d8186018361073e565b9a86019a94505050908301906001016106ed565b5090979650505050505050565b600081518084526107568160208601602086016108fc565b601f01601f19169290920160200192915050565b6000825161077c8184602087016108fc565b9190910192915050565b6001600160a01b0391909116815260200190565b60006020825261062660208301846106d2565b90815260200190565b60208082526021908201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560408201527f6400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c6564604082015260600190565b600060408201848352602060408185015281855180845260608601915060608382028701019350828701855b828110156108a257605f1988870301845261089086835161073e565b95509284019290840190600101610874565b509398975050505050505050565b6000848252836020830152606060408301526108cf60608301846106d2565b95945050505050565b60405181810167ffffffffffffffff811182821017156108f457fe5b604052919050565b60005b838110156109175781810151838201526020016108ff565b83811115610926576000848401525b5050505056fea2646970667358221220d77647a075fb9076d8134b8745ad1e8c57850b13d9e3778670b424a04cfbe63c64736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c806372425d9d11610081578063bce38bd71161005b578063bce38bd714610182578063c3077fa9146101a2578063ee82ac5e146101b5576100d4565b806372425d9d1461015d57806386d516e814610165578063a8b0574e1461016d576100d4565b8063399542e9116100b2578063399542e91461012057806342cbb15c146101425780634d2301cc1461014a576100d4565b80630f28c97d146100d9578063252dba42146100f757806327e86d6e14610118575b600080fd5b6100e16101c8565b6040516100ee91906107ad565b60405180910390f35b61010a61010536600461062d565b6101cc565b6040516100ee929190610848565b6100e161030b565b61013361012e366004610668565b610314565b6040516100ee939291906108b0565b6100e161032c565b6100e161015836600461060c565b610330565b6100e161033d565b6100e1610341565b610175610345565b6040516100ee9190610786565b610195610190366004610668565b610349565b6040516100ee919061079a565b6101336101b036600461062d565b61049f565b6100e16101c33660046106ba565b6104bc565b4290565b8051439060609067ffffffffffffffff811180156101e957600080fd5b5060405190808252806020026020018201604052801561021d57816020015b60608152602001906001900390816102085790505b50905060005b8351811015610305576000606085838151811061023c57fe5b6020026020010151600001516001600160a01b031686848151811061025d57fe5b602002602001015160200151604051610276919061076a565b6000604051808303816000865af19150503d80600081146102b3576040519150601f19603f3d011682016040523d82523d6000602084013e6102b8565b606091505b5091509150816102e35760405162461bcd60e51b81526004016102da90610813565b60405180910390fd5b808484815181106102f057fe5b60209081029190910101525050600101610223565b50915091565b60001943014090565b43804060606103238585610349565b90509250925092565b4390565b6001600160a01b03163190565b4490565b4590565b4190565b6060815167ffffffffffffffff8111801561036357600080fd5b5060405190808252806020026020018201604052801561039d57816020015b61038a6104c0565b8152602001906001900390816103825790505b50905060005b825181101561049857600060608483815181106103bc57fe5b6020026020010151600001516001600160a01b03168584815181106103dd57fe5b6020026020010151602001516040516103f6919061076a565b6000604051808303816000865af19150503d8060008114610433576040519150601f19603f3d011682016040523d82523d6000602084013e610438565b606091505b5091509150851561046057816104605760405162461bcd60e51b81526004016102da906107b6565b604051806040016040528083151581526020018281525084848151811061048357fe5b602090810291909101015250506001016103a3565b5092915050565b60008060606104af600185610314565b9196909550909350915050565b4090565b60408051808201909152600081526060602082015290565b80356001600160a01b03811681146104ef57600080fd5b919050565b6000601f8381840112610505578182fd5b823567ffffffffffffffff8082111561051a57fe5b602061052981828502016108d8565b838152945080850186820160005b858110156105ff57813589016040601f198181848f0301121561055957600080fd5b81518281018181108a8211171561056c57fe5b83526105798489016104d8565b8152828401358981111561058c57600080fd5b8085019450508d603f8501126105a157600080fd5b87840135898111156105af57fe5b6105be89848e840116016108d8565b92508083528e848287010111156105d457600080fd5b808486018a850137600090830189015280880191909152855250509183019190830190600101610537565b5050505050505092915050565b60006020828403121561061d578081fd5b610626826104d8565b9392505050565b60006020828403121561063e578081fd5b813567ffffffffffffffff811115610654578182fd5b610660848285016104f4565b949350505050565b6000806040838503121561067a578081fd5b82358015158114610689578182fd5b9150602083013567ffffffffffffffff8111156106a4578182fd5b6106b0858286016104f4565b9150509250929050565b6000602082840312156106cb578081fd5b5035919050565b60008282518085526020808601955080818302840101818601855b8481101561073157858303601f190189528151805115158452840151604085850181905261071d8186018361073e565b9a86019a94505050908301906001016106ed565b5090979650505050505050565b600081518084526107568160208601602086016108fc565b601f01601f19169290920160200192915050565b6000825161077c8184602087016108fc565b9190910192915050565b6001600160a01b0391909116815260200190565b60006020825261062660208301846106d2565b90815260200190565b60208082526021908201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560408201527f6400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c6564604082015260600190565b600060408201848352602060408185015281855180845260608601915060608382028701019350828701855b828110156108a257605f1988870301845261089086835161073e565b95509284019290840190600101610874565b509398975050505050505050565b6000848252836020830152606060408301526108cf60608301846106d2565b95945050505050565b60405181810167ffffffffffffffff811182821017156108f457fe5b604052919050565b60005b838110156109175781810151838201526020016108ff565b83811115610926576000848401525b5050505056fea2646970667358221220d77647a075fb9076d8134b8745ad1e8c57850b13d9e3778670b424a04cfbe63c64736f6c63430007030033",
  "libraries": {
    "GovernanceLib": "0xb91C2202c752dA64D22Cf41C0127Eb3A7355E0BB",
    "Strings": "0x2ad5A3334C3aa057A6BCD21bdcb57bC5903afe06",
    "SafeMath": "0x9Dde7f92Dc83363ceb0ECE7CFa2734F3345ea56F",
    "AddressSet": "0x666df3C9710Eb253c79B3974Dd8612Ac67D73910",
    "UInt256Set": "0xd01Fea6FDB1490aae498355A1b2e87aafAB969c0",
    "Create2": "0x9C5781f99977c29DE10B42234fD4b5E8073cB774",
    "ProposalsLib": "0xc39b39672d9f51f95aB47e831dfc1Df55Bf2C32a",
    "ComplexPoolLib": "0xA7316b7b1dc94EdebC9C40253DD9Ea7f518E8064",
    "WrappedTokenLib": "0x85F320003095a8eA58538C811cB3c0E65566c1fe",
    "Unigem20Library": "0xC7F21B7977897CE95cD9B7E193e8750ee7D9943a"
  },
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",
    "kind": "dev",
    "methods": {},
    "title": "Multicall2 - Aggregate results from multiple read-only function calls",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}