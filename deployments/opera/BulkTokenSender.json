{
  "address": "0x9d03b8C4eA8cB2d3f5C271e027344a5e107277f6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "gquantities",
          "type": "uint256[]"
        }
      ],
      "name": "bulkSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f9914b7ae9957ee9fcb04947d3af02bf6aeaa2e22afce1e7bb9605925426255",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x9d03b8C4eA8cB2d3f5C271e027344a5e107277f6",
    "transactionIndex": 1,
    "gasUsed": "406786",
    "logsBloom": "0x
    "blockHash": "0x00005252000000874d48d7fd053a642f6d78f2284b80e37342043487b30eb034",
    "transactionHash": "0x9f9914b7ae9957ee9fcb04947d3af02bf6aeaa2e22afce1e7bb9605925426255",
    "logs": [],
    "blockNumber": 11961050,
    "cumulativeGasUsed": "877027",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1c25a8abf6ef90385cc04e5ab5ac21c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gquantities\",\"type\":\"uint256[]\"}],\"name\":\"bulkSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Collection of utility functions that mint tokens\",\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/utils/BulkTokenSender.sol\":\"BulkTokenSender\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller)\\n        external\\n        override\\n        onlyController\\n    {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address)\\n        external\\n        view\\n        override\\n        returns (bool allowed)\\n    {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Remove the sender address from the list of controllers\\n     */\\n    function relinquishControl() external override onlyController {\\n        delete _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0xa31f752b3b092c788ea06a6dced266db79c4407d69733d78bc15e519f39e1d3f\",\"license\":\"MIT\"},\"src/interfaces/IBulkTokenSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IBulkTokenSender {\\n    function bulkSend(\\n        address tokenAddress,\\n        address[] memory recipients,\\n        uint256[] memory gquantities\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa71ed96e58ee2f308e79002baeda29e7e88a1e296765e15d6a62eca2e7c278d4\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n    event ControllerRemoved(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2a44548d9ba1bcd73d5734b2265db6c1556c013ccc61df621a6cbd5cca42cfaf\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    enum TokenType {\\n        GOVERNANCE,\\n        CLAIM,\\n        GEM\\n    }\\n\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to mint a claim or a gem\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        TokenType tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        returns (TokenType, address);\\n}\\n\",\"keccak256\":\"0xb871feba8e614aab0f81f26db323a68649f8d1cf6641848984e821a7bc02e7a1\",\"license\":\"MIT\"},\"src/utils/BulkTokenSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../access/Controllable.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/IBulkTokenSender.sol\\\";\\n\\n/**\\n * @dev Collection of utility functions that mint tokens\\n */\\ncontract BulkTokenSender is IBulkTokenSender, Controllable {\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    function bulkSend(\\n        address tokenAddress,\\n        address[] memory recipients,\\n        uint256[] memory gquantities\\n    ) external override onlyController {\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            IERC20(tokenAddress).transferFrom(\\n                address(this),\\n                recipients[i],\\n                gquantities[i]\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xebb3d3347e205fbee9d6ce1c5836a882fa30320d544e4e03767d99fbe67761e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b610043565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b610602806100526000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063259c276e14610051578063a7fc7a0714610066578063b429afeb14610079578063e1c28bef146100a2575b600080fd5b61006461005f36600461039a565b6100aa565b005b610064610074366004610379565b6101f3565b61008c610087366004610379565b610262565b60405161009991906104bb565b60405180910390f35b61006461028d565b3360009081526020819052604090205460ff161515600114806100cc57503033145b6100f15760405162461bcd60e51b81526004016100e8906104c6565b60405180910390fd5b60005b82518110156101ed578373ffffffffffffffffffffffffffffffffffffffff166323b872dd3085848151811061013a57634e487b7160e01b600052603260045260246000fd5b602002602001015185858151811061016257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b81526004016101889392919061048a565b602060405180830381600087803b1580156101a257600080fd5b505af11580156101b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101da919061046a565b50806101e581610571565b9150506100f4565b50505050565b3360009081526020819052604090205460ff1615156001148061021557503033145b6102315760405162461bcd60e51b81526004016100e8906104c6565b73ffffffffffffffffffffffffffffffffffffffff166000908152602081905260409020805460ff19166001179055565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b3360009081526020819052604090205460ff161515600114806102af57503033145b6102cb5760405162461bcd60e51b81526004016100e8906104c6565b336000908152602081905260409020805460ff19169055565b803573ffffffffffffffffffffffffffffffffffffffff8116811461030857600080fd5b919050565b600082601f83011261031d578081fd5b8135602061033261032d8361054d565b610523565b828152818101908583018385028701840188101561034e578586fd5b855b8581101561036c57813584529284019290840190600101610350565b5090979650505050505050565b60006020828403121561038a578081fd5b610393826102e4565b9392505050565b6000806000606084860312156103ae578182fd5b6103b7846102e4565b925060208085013567ffffffffffffffff808211156103d4578485fd5b818701915087601f8301126103e7578485fd5b81356103f561032d8261054d565b81815284810190848601868402860187018c1015610411578889fd5b8895505b8386101561043a57610426816102e4565b835260019590950194918601918601610415565b50965050506040870135925080831115610452578384fd5b50506104608682870161030d565b9150509250925092565b60006020828403121561047b578081fd5b81518015158114610393578182fd5b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b901515815260200190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b60405181810167ffffffffffffffff81118282101715610545576105456105b6565b604052919050565b600067ffffffffffffffff821115610567576105676105b6565b5060209081020190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156105af57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212204ce32080b0d2055545ec3a152f171b1443113b1bf59802caf44c7631d52d5f4c64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063259c276e14610051578063a7fc7a0714610066578063b429afeb14610079578063e1c28bef146100a2575b600080fd5b61006461005f36600461039a565b6100aa565b005b610064610074366004610379565b6101f3565b61008c610087366004610379565b610262565b60405161009991906104bb565b60405180910390f35b61006461028d565b3360009081526020819052604090205460ff161515600114806100cc57503033145b6100f15760405162461bcd60e51b81526004016100e8906104c6565b60405180910390fd5b60005b82518110156101ed578373ffffffffffffffffffffffffffffffffffffffff166323b872dd3085848151811061013a57634e487b7160e01b600052603260045260246000fd5b602002602001015185858151811061016257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b81526004016101889392919061048a565b602060405180830381600087803b1580156101a257600080fd5b505af11580156101b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101da919061046a565b50806101e581610571565b9150506100f4565b50505050565b3360009081526020819052604090205460ff1615156001148061021557503033145b6102315760405162461bcd60e51b81526004016100e8906104c6565b73ffffffffffffffffffffffffffffffffffffffff166000908152602081905260409020805460ff19166001179055565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b3360009081526020819052604090205460ff161515600114806102af57503033145b6102cb5760405162461bcd60e51b81526004016100e8906104c6565b336000908152602081905260409020805460ff19169055565b803573ffffffffffffffffffffffffffffffffffffffff8116811461030857600080fd5b919050565b600082601f83011261031d578081fd5b8135602061033261032d8361054d565b610523565b828152818101908583018385028701840188101561034e578586fd5b855b8581101561036c57813584529284019290840190600101610350565b5090979650505050505050565b60006020828403121561038a578081fd5b610393826102e4565b9392505050565b6000806000606084860312156103ae578182fd5b6103b7846102e4565b925060208085013567ffffffffffffffff808211156103d4578485fd5b818701915087601f8301126103e7578485fd5b81356103f561032d8261054d565b81815284810190848601868402860187018c1015610411578889fd5b8895505b8386101561043a57610426816102e4565b835260019590950194918601918601610415565b50965050506040870135925080831115610452578384fd5b50506104608682870161030d565b9150509250925092565b60006020828403121561047b578081fd5b81518015158114610393578182fd5b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b901515815260200190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b60405181810167ffffffffffffffff81118282101715610545576105456105b6565b604052919050565b600067ffffffffffffffff821115610567576105676105b6565b5060209081020190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156105af57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212204ce32080b0d2055545ec3a152f171b1443113b1bf59802caf44c7631d52d5f4c64736f6c63430008000033",
  "libraries": {
    "Strings": "0xd45eC25dF301d3E0FCfb2579cC5d983808fe0819",
    "AddressSet": "0x16898Ec08bab43BCF1Ae0A2fa90E25D61F5AaB4f",
    "UInt256Set": "0x5A1295EA06d05ace6B3E2a3f0Bc0769E0D914eBA",
    "Create2": "0xF0c0e1CfC1b73a20Dde07BEA2B640096e581E58A",
    "WrappedTokenLib": "0x233D640e29a53D63cF6434a074a4aA61390Ed3FF",
    "ComplexPoolLib": "0xb15022dDd819228866CF446DeEd271b623D4fcBD"
  },
  "devdoc": {
    "details": "Collection of utility functions that mint tokens",
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "relinquishControl()": {
        "details": "Remove the sender address from the list of controllers"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4752,
        "contract": "src/utils/BulkTokenSender.sol:BulkTokenSender",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}