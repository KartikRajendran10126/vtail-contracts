{
  "address": "0xd45eC25dF301d3E0FCfb2579cC5d983808fe0819",
  "abi": [],
  "transactionHash": "0x39f8c309dd07432d7d81bf78f8d07a87d06489170f2f8e0e9beeba325e728ea3",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0xd45eC25dF301d3E0FCfb2579cC5d983808fe0819",
    "transactionIndex": 28,
    "gasUsed": "72205",
    "logsBloom": "0x
    "blockHash": "0x0000524c000001c70007e740cb1faa18c0bae70a62a07eef513c9e6954c7aaed",
    "transactionHash": "0x39f8c309dd07432d7d81bf78f8d07a87d06489170f2f8e0e9beeba325e728ea3",
    "logs": [],
    "blockNumber": 11960457,
    "cumulativeGasUsed": "2815826",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1c25a8abf6ef90385cc04e5ab5ac21c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libs/Strings.sol\":\"Strings\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2200},\"remappings\":[]},\"sources\":{\"src/libs/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nlibrary Strings {\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c,\\n        string memory _d,\\n        string memory _e\\n    ) internal pure returns (string memory) {\\n        bytes memory _ba = bytes(_a);\\n        bytes memory _bb = bytes(_b);\\n        bytes memory _bc = bytes(_c);\\n        bytes memory _bd = bytes(_d);\\n        bytes memory _be = bytes(_e);\\n        string memory abcde = new string(\\n            _ba.length + _bb.length + _bc.length + _bd.length + _be.length\\n        );\\n        bytes memory babcde = bytes(abcde);\\n        uint256 k = 0;\\n        for (uint256 i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\\n        for (uint256 i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\\n        for (uint256 i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\\n        for (uint256 i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\\n        for (uint256 i = 0; i < _be.length; i++) babcde[k++] = _be[i];\\n        return string(babcde);\\n    }\\n\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c,\\n        string memory _d\\n    ) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, _d, \\\"\\\");\\n    }\\n\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c\\n    ) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, \\\"\\\", \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return strConcat(_a, _b, \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0xde8b9ddc237ca4530f16fccbf61a3df6989984bbf9d1c0da49ea289f8ab0a892\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3fc154b579f56ee1be3134149ad96652a917be0e610f6b458e03fbb38624d2e64736f6c63430008000033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3fc154b579f56ee1be3134149ad96652a917be0e610f6b458e03fbb38624d2e64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}