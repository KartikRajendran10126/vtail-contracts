{
  "address": "0xB88dEf2593674898906dDAc91237f9a25903fEa0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gemPoolAdress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gemSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gemName",
          "type": "string"
        }
      ],
      "name": "CustomNFTGemPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gemPoolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gemSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gemName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "diffstep",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxMint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "allowedToken",
          "type": "address"
        }
      ],
      "name": "NFTGemPoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "allNFTGemPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "gemPool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allNFTGemPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "gemSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "gemName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diffstep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "allowedToken",
          "type": "address"
        }
      ],
      "name": "createNFTGemPool",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "gemPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_symbolHash",
          "type": "uint256"
        }
      ],
      "name": "getNFTGemPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "gemPool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftGemPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2923a914970653d647d69939660c0fee563c9266700688a561983b716b77438",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0xB88dEf2593674898906dDAc91237f9a25903fEa0",
    "transactionIndex": 0,
    "gasUsed": "4786159",
    "logsBloom": "0x
    "blockHash": "0x0000528400000e9f7fa4cc18a6fd403652e1020755f8885ccd3417efa186f54a",
    "transactionHash": "0xc2923a914970653d647d69939660c0fee563c9266700688a561983b716b77438",
    "logs": [],
    "blockNumber": 11985512,
    "cumulativeGasUsed": "4786159",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "baf74e8f3f8b4044f9fe5636bda94596",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gemPoolAdress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gemSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gemName\",\"type\":\"string\"}],\"name\":\"CustomNFTGemPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gemPoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gemSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gemName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"diffstep\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"allowedToken\",\"type\":\"address\"}],\"name\":\"NFTGemPoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"allNFTGemPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gemPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allNFTGemPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gemSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gemName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffstep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowedToken\",\"type\":\"address\"}],\"name\":\"createNFTGemPool\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"gemPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_symbolHash\",\"type\":\"uint256\"}],\"name\":\"getNFTGemPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gemPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftGemPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allNFTGemPools(uint256)\":{\"details\":\"get the quantized token for this\"},\"allNFTGemPoolsLength()\":{\"details\":\"number of quantized addresses\"},\"createNFTGemPool(address,string,string,uint256,uint256,uint256,uint256,uint256,address)\":{\"details\":\"deploy a new erc20 token using create2\"},\"getNFTGemPool(uint256)\":{\"details\":\"get the quantized token for this\"},\"nftGemPools()\":{\"details\":\"get the quantized token for this\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/factories/NFTGemPoolFactory.sol\":\"NFTGemPoolFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8c578d9e30c8f2bb7ac01d108766df87d42b73d4d3638f01d494a894fe7c1f4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x27f9465d84949f059ed37b23c82f4a9fc16c1b8d6fbd69837a0f920875e2af83\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/factories/NFTGemPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../pool/NFTComplexGemPool.sol\\\";\\nimport \\\"../pool/ComplexPoolLib.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemPoolFactory.sol\\\";\\n\\ncontract NFTGemPoolFactory is INFTGemPoolFactory {\\n    mapping(uint256 => address) private _getNFTGemPool;\\n    address[] private _allNFTGemPools;\\n\\n    /**\\n     * @dev get the quantized token for this\\n     */\\n    function getNFTGemPool(uint256 _symbolHash)\\n        external\\n        view\\n        override\\n        returns (address gemPool)\\n    {\\n        gemPool = _getNFTGemPool[_symbolHash];\\n    }\\n\\n    /**\\n     * @dev get the quantized token for this\\n     */\\n    function nftGemPools() external view override returns (address[] memory) {\\n        return _allNFTGemPools;\\n    }\\n\\n    /**\\n     * @dev get the quantized token for this\\n     */\\n    function allNFTGemPools(uint256 idx)\\n        external\\n        view\\n        override\\n        returns (address gemPool)\\n    {\\n        gemPool = _allNFTGemPools[idx];\\n    }\\n\\n    /**\\n     * @dev number of quantized addresses\\n     */\\n    function allNFTGemPoolsLength() external view override returns (uint256) {\\n        return _allNFTGemPools.length;\\n    }\\n\\n    /**\\n     * @dev deploy a new erc20 token using create2\\n     */\\n    function createNFTGemPool(\\n        address owner,\\n        string memory gemSymbol,\\n        string memory gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    ) external override returns (address payable gemPool) {\\n        // create the lookup hash for the given symbol\\n        // and check if it already exists\\n        bytes32 salt = keccak256(abi.encodePacked(gemSymbol));\\n        require(_getNFTGemPool[uint256(salt)] == address(0), \\\"GEMPOOL_EXISTS\\\"); // single check is sufficient\\n\\n        // validation checks to make sure values are sane\\n        require(ethPrice != 0, \\\"INVALID_PRICE\\\");\\n        require(minTime != 0, \\\"INVALID_MIN_TIME\\\");\\n        require(diffstep != 0, \\\"INVALID_DIFFICULTY_STEP\\\");\\n\\n        // create the gem pool using create2, which lets us determine the\\n        // address of a gem pool without interacting with the contract itself\\n        bytes memory bytecode = type(NFTComplexGemPool).creationCode;\\n\\n        // use create2 to deploy the gem pool contract\\n        gemPool = payable(Create2.deploy(0, salt, bytecode));\\n\\n        // set the controller of the gem pool\\n        IControllable(gemPool).addController(owner);\\n\\n        // initialize the erc20 contract with the relevant addresses which it proxies\\n        NFTComplexGemPool(gemPool).initialize(\\n            gemSymbol,\\n            gemName,\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxMint,\\n            allowedToken\\n        );\\n\\n        // insert the erc20 contract address into lists\\n        _getNFTGemPool[uint256(salt)] = gemPool;\\n        _allNFTGemPools.push(gemPool);\\n\\n        // emit an event about the new pool being created\\n        emit NFTGemPoolCreated(\\n            gemPool,\\n            gemSymbol,\\n            gemName,\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxMint,\\n            allowedToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa092c1fa3ca60502757aa3694072da27abbb13ea418173837d95013b505f39d4\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n    event ControllerRemoved(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2a44548d9ba1bcd73d5734b2265db6c1556c013ccc61df621a6cbd5cca42cfaf\",\"license\":\"MIT\"},\"src/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6535a81e15447571adb77a05d1bfede8ae5b0bb9b21c446c61722064f0c74c2e\",\"license\":\"MIT\"},\"src/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b4dd9a485be3b9ce6c963360f6f8254ba09e31c90c0b44c2184ddf8b7efaa2f\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTComplexGemPool {\\n    enum RequirementType {\\n        ERC20,\\n        ERC1155,\\n        POOL\\n    }\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 amountPaid,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 gemHash,\\n        uint256 quantity\\n    );\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external;\\n\\n    function collectClaim(uint256 claimHash, bool requireMature) external;\\n\\n    function purchaseGems(uint256 count) external payable;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0x82c44e3e50944c227762a26043a1307be6c51ce8621153fe0a69b0633abe0a73\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./INFTGemMultiToken.sol\\\";\\nimport \\\"./INFTComplexGemPool.sol\\\";\\n\\ninterface INFTComplexGemPoolData {\\n    enum PriceIncrementType {\\n        COMPOUND,\\n        INVERSELOG,\\n        NONE\\n    }\\n\\n    /**\\n     * @dev a requirement of erc20, erc1155, or nft gem\\n     */\\n    struct InputRequirement {\\n        address token;\\n        address pool;\\n        INFTComplexGemPool.RequirementType inputType; // 1 = erc20, 2 = erc1155, 3 = pool\\n        uint256 tokenId; // if erc20 slot 0 contains required amount\\n        uint256 minVal;\\n        bool takeCustody;\\n        bool burn;\\n        bool exactAmount;\\n    }\\n\\n    /**\\n     * @dev Event generated when an NFT claim is imported from a legacy contract\\n     */\\n    event NFTGemImported(\\n        address indexed converter,\\n        address indexed pool,\\n        address oldPool,\\n        address oldToken,\\n        uint256 indexed gemHash,\\n        uint256 quantity\\n    );\\n\\n    function addInputRequirement(\\n        address theToken,\\n        address pool,\\n        INFTComplexGemPool.RequirementType inputType,\\n        uint256 theTokenId,\\n        uint256 minAmount,\\n        bool takeCustody,\\n        bool burn,\\n        bool exactAmount\\n    ) external;\\n\\n    function updateInputRequirement(\\n        uint256 ndx,\\n        address theToken,\\n        address pool,\\n        INFTComplexGemPool.RequirementType inputType,\\n        uint256 tid,\\n        uint256 minAmount,\\n        bool takeCustody,\\n        bool burn,\\n        bool exactAmount\\n    ) external;\\n\\n    function allInputRequirementsLength() external returns (uint256);\\n\\n    function allInputRequirements(uint256 ndx)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            INFTComplexGemPool.RequirementType,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool,\\n            bool\\n        );\\n\\n    function settings()\\n        external\\n        view\\n        returns (\\n            string memory settingsSymbol,\\n            string memory settingsName,\\n            string memory settingsDescription,\\n            uint256 settingsCategory,\\n            uint256 settingsEthPrice,\\n            uint256 settingsMinTime,\\n            uint256 settingsMaxTime,\\n            uint256 settingsDiffStep,\\n            uint256 settingsMacClaims,\\n            uint256 settingsMaxQuantityPerClaim,\\n            uint256 settingsMaxClaimsPerAccount\\n        );\\n\\n    function stats()\\n        external\\n        view\\n        returns (\\n            bool statsVisible,\\n            uint256 statsClaimedCount,\\n            uint256 statsMintedCount,\\n            uint256 statsTotalStakedEth,\\n            uint256 statsNextClaimHash,\\n            uint256 statsNextGemHash,\\n            uint256 statsNextClaimId,\\n            uint256 statsNextGemId\\n        );\\n\\n    function claim(uint256 claimHash)\\n        external\\n        view\\n        returns (\\n            uint256 claimClaimAmount,\\n            uint256 claimClaimQuantity,\\n            uint256 claimClaimUnlockTime,\\n            uint256 claimClaimTokenAmount,\\n            address claimStakedToken,\\n            uint256 claimNextClaimId\\n        );\\n\\n    function token(uint256 tokenHash)\\n        external\\n        view\\n        returns (\\n            INFTGemMultiToken.TokenType tokenTokenType,\\n            uint256 tokenTokenId,\\n            address tokenTokenSource\\n        );\\n\\n    function addAllowedTokenSource(address allowedToken) external;\\n\\n    function removeAllowedTokenSource(address allowedToken) external;\\n\\n    function allowedTokenSources() external view returns (address[] memory);\\n\\n    function importLegacyGem(\\n        address pool,\\n        address legacyToken,\\n        uint256 tokenHash,\\n        address recipient\\n    ) external;\\n\\n    function isLegacyGemImported(uint256 tokenhash)\\n        external\\n        view\\n        returns (bool);\\n\\n    function setNextIds(uint256 _nextClaimId, uint256 _nextGemId) external;\\n\\n    function tokenHashes() external view returns (uint256[] memory);\\n\\n    function setTokenHashes(uint256[] memory inTokenHashes) external;\\n\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n\\n    function ethPrice() external view returns (uint256);\\n\\n    function setVisible(bool isVisible) external;\\n\\n    function visible() external view returns (bool);\\n\\n    function setCategory(uint256 theCategory) external;\\n\\n    function category() external view returns (uint256);\\n\\n    function setDescription(string memory desc) external;\\n\\n    function description() external view returns (string memory);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n\\n    function claimQuantity(uint256 claimId) external view returns (uint256);\\n\\n    function maxQuantityPerClaim() external view returns (uint256);\\n\\n    function maxClaimsPerAccount() external view returns (uint256);\\n\\n    function setMaxQuantityPerClaim(uint256 claimId) external;\\n\\n    function setMaxClaimsPerAccount(uint256 claimId) external;\\n\\n    function mintedCount() external view returns (uint256);\\n\\n    function totalStakedEth() external view returns (uint256);\\n\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n\\n    function tokenType(uint256 tokenHash)\\n        external\\n        view\\n        returns (INFTGemMultiToken.TokenType);\\n\\n    function allTokenHashesLength() external view returns (uint256);\\n\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n\\n    function nextClaimHash() external view returns (uint256);\\n\\n    function nextGemHash() external view returns (uint256);\\n\\n    function nextGemId() external view returns (uint256);\\n\\n    function nextClaimId() external view returns (uint256);\\n\\n    function setValidateErc20(bool) external;\\n\\n    function validateErc20() external view returns (bool);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n\\n    function gemClaimHash(uint256 gemHash) external view returns (uint256);\\n\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n\\n    function allowedTokens(uint256 idx) external view returns (address);\\n\\n    function isTokenAllowed(address tkn) external view returns (bool);\\n\\n    function addAllowedToken(address tkn) external;\\n\\n    function removeAllowedToken(address tkn) external;\\n\\n    function allowPurchase() external view returns (bool);\\n\\n    function setAllowPurchase(bool allow) external;\\n\\n    function enabled() external view returns (bool);\\n\\n    function setEnabled(bool enable) external;\\n\\n    function priceIncrementType() external view returns (PriceIncrementType);\\n\\n    function setPriceIncrementType(PriceIncrementType incrementType) external;\\n}\\n\",\"keccak256\":\"0x86f27383c4b43346b8aee909f0497a34052ec43f624afbffaea0e3d84394a3f4\",\"license\":\"MIT\"},\"src/interfaces/INFTGemFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface INFTGemFeeManager {\\n    event FeeChanged(\\n        address indexed operator,\\n        uint256 indexed feeHash,\\n        uint256 value\\n    );\\n\\n    function fee(uint256 feeTypeHash) external view returns (uint256);\\n\\n    function setFee(uint256 feeTypeHash, uint256 _fee) external;\\n\\n    function balanceOf(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x073089b45be4de1e2feecfa65d36ea9cb3ec18cec7e3c1e9de18ea8923c016c2\",\"license\":\"MIT\"},\"src/interfaces/INFTGemGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemGovernor {\\n    function createPool(\\n        address owner,\\n        address funder,\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function initialized() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5a3431567529737534236c362456d43a80e740ddfc1c8c75f77b67d5defc1afa\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    enum TokenType {\\n        GOVERNANCE,\\n        CLAIM,\\n        GEM\\n    }\\n\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to mint a claim or a gem\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        TokenType tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        returns (TokenType, address);\\n}\\n\",\"keccak256\":\"0xb871feba8e614aab0f81f26db323a68649f8d1cf6641848984e821a7bc02e7a1\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./INFTGemMultiToken.sol\\\";\\n\\ninterface INFTGemPoolData {\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function ethPrice() external view returns (uint256);\\n\\n    function minTime() external view returns (uint256);\\n\\n    function maxTime() external view returns (uint256);\\n\\n    function difficultyStep() external view returns (uint256);\\n\\n    function maxClaims() external view returns (uint256);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n\\n    function claimQuantity(uint256 claimId) external view returns (uint256);\\n\\n    function mintedCount() external view returns (uint256);\\n\\n    function totalStakedEth() external view returns (uint256);\\n\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n\\n    function tokenType(uint256 tokenHash)\\n        external\\n        view\\n        returns (INFTGemMultiToken.TokenType);\\n\\n    function allTokenHashesLength() external view returns (uint256);\\n\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n\\n    function nextClaimHash() external view returns (uint256);\\n\\n    function nextGemHash() external view returns (uint256);\\n\\n    function nextGemId() external view returns (uint256);\\n\\n    function nextClaimId() external view returns (uint256);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n\\n    function allowedTokens(uint256 idx) external view returns (address);\\n\\n    function isTokenAllowed(address token) external view returns (bool);\\n\\n    function addAllowedToken(address token) external;\\n\\n    function removeAllowedToken(address token) external;\\n}\\n\",\"keccak256\":\"0x0498ff6533cb1bf68be9e27623e24fae3375721cf3d910a26fb60a95d2c771c2\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPoolFactory {\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event NFTGemPoolCreated(\\n        address indexed gemPoolAddress,\\n        string gemSymbol,\\n        string gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    );\\n\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event CustomNFTGemPoolCreated(\\n        address indexed gemPoolAdress,\\n        string gemSymbol,\\n        string gemName\\n    );\\n\\n    function nftGemPools() external view returns (address[] memory);\\n\\n    function getNFTGemPool(uint256 _symbolHash) external view returns (address);\\n\\n    function allNFTGemPools(uint256 idx) external view returns (address);\\n\\n    function allNFTGemPoolsLength() external view returns (uint256);\\n\\n    function createNFTGemPool(\\n        address owner,\\n        string memory gemSymbol,\\n        string memory gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    ) external returns (address payable);\\n}\\n\",\"keccak256\":\"0x3a65983f822af086b6666d1b7a3ec4526f9f6bdb8ff14676297265ff68ab7b3b\",\"license\":\"MIT\"},\"src/interfaces/ISwapQueryHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ISwapQueryHelper {\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function factory() external view returns (address);\\n\\n    function COIN() external pure returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function hasPool(address token) external view returns (bool);\\n\\n    function getReserves(address pair) external view returns (uint256, uint256);\\n\\n    function getPathForCoinToToken(address token)\\n        external\\n        pure\\n        returns (address[] memory);\\n\\n    function setFactory(address f) external;\\n}\\n\",\"keccak256\":\"0x9b85b7f774e809680b6e5fd76ccdc1668139a2f9ef928a05f5ce7c79f0f6783f\",\"license\":\"MIT\"},\"src/libs/AddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @notice Key sets with enumeration and delete. Uses mappings for random\\n * and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced.\\n * @dev Sets are unordered. Delete operations reorder keys. All operations have a\\n * fixed gas cost at any scale, O(1).\\n * author: Rob Hitchens\\n */\\n\\nlibrary AddressSet {\\n    struct Set {\\n        mapping(address => uint256) keyPointers;\\n        address[] keyList;\\n    }\\n\\n    /**\\n     * @notice insert a key.\\n     * @dev duplicate keys are not permitted.\\n     * @param self storage pointer to a Set.\\n     * @param key value to insert.\\n     */\\n    function insert(Set storage self, address key) internal {\\n        require(\\n            !exists(self, key),\\n            \\\"AddressSet: key already exists in the set.\\\"\\n        );\\n        self.keyList.push(key);\\n        self.keyPointers[key] = self.keyList.length - 1;\\n    }\\n\\n    /**\\n     * @notice remove a key.\\n     * @dev key to remove must exist.\\n     * @param self storage pointer to a Set.\\n     * @param key value to remove.\\n     */\\n    function remove(Set storage self, address key) internal {\\n        // TODO: I commented this out do get a test to pass - need to figure out what is up here\\n        // require(\\n        //     exists(self, key),\\n        //     \\\"AddressSet: key does not exist in the set.\\\"\\n        // );\\n        if (!exists(self, key)) return;\\n        uint256 last = count(self) - 1;\\n        uint256 rowToReplace = self.keyPointers[key];\\n        if (rowToReplace != last) {\\n            address keyToMove = self.keyList[last];\\n            self.keyPointers[keyToMove] = rowToReplace;\\n            self.keyList[rowToReplace] = keyToMove;\\n        }\\n        delete self.keyPointers[key];\\n        delete self.keyList[self.keyList.length - 1];\\n    }\\n\\n    /**\\n     * @notice count the keys.\\n     * @param self storage pointer to a Set.\\n     */\\n    function count(Set storage self) internal view returns (uint256) {\\n        return (self.keyList.length);\\n    }\\n\\n    /**\\n     * @notice check if a key is in the Set.\\n     * @param self storage pointer to a Set.\\n     * @param key value to check.\\n     * @return bool true: Set member, false: not a Set member.\\n     */\\n    function exists(Set storage self, address key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */\\n    function keyAtIndex(Set storage self, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return self.keyList[index];\\n    }\\n}\\n\",\"keccak256\":\"0x8f73e6e90595cf298805436baedbd0123c6e34f453a76f686dc8a0b84a8809b4\",\"license\":\"MIT\"},\"src/pool/ComplexPoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/INFTComplexGemPoolData.sol\\\";\\nimport \\\"../interfaces/ISwapQueryHelper.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPool.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\n\\nimport \\\"../libs/AddressSet.sol\\\";\\n\\nlibrary ComplexPoolLib {\\n    using AddressSet for AddressSet.Set;\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using base currency\\n     */\\n    event NFTGemClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 amountPaid,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT erc20 claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 gemHash,\\n        uint256 quantity\\n    );\\n\\n    /**\\n     * @dev data describes complex pool\\n     */\\n    struct ComplexPoolData {\\n        // governor and multitoken target\\n        address pool;\\n        address multitoken;\\n        address governor;\\n        address feeTracker;\\n        address swapHelper;\\n        uint256 category;\\n        bool visible;\\n        // it all starts with a symbol and a nams\\n        string symbol;\\n        string name;\\n        string description;\\n        // magic economy numbers\\n        uint256 ethPrice;\\n        uint256 minTime;\\n        uint256 maxTime;\\n        uint256 diffstep;\\n        uint256 maxClaims;\\n        uint256 maxQuantityPerClaim;\\n        uint256 maxClaimsPerAccount;\\n        bool validateerc20;\\n        bool allowPurchase;\\n        bool enabled;\\n        INFTComplexGemPoolData.PriceIncrementType priceIncrementType;\\n        mapping(uint256 => INFTGemMultiToken.TokenType) tokenTypes;\\n        mapping(uint256 => uint256) tokenIds;\\n        mapping(uint256 => address) tokenSources;\\n        AddressSet.Set allowedTokenSources;\\n        uint256[] tokenHashes;\\n        // next ids of things\\n        uint256 nextGemIdVal;\\n        uint256 nextClaimIdVal;\\n        uint256 totalStakedEth;\\n        // records claim timestamp / ETH value / ERC token and amount sent\\n        mapping(uint256 => uint256) claimLockTimestamps;\\n        mapping(uint256 => address) claimLockToken;\\n        mapping(uint256 => uint256) claimAmountPaid;\\n        mapping(uint256 => uint256) claimQuant;\\n        mapping(uint256 => uint256) claimTokenAmountPaid;\\n        mapping(uint256 => bool) importedLegacyToken;\\n        // input NFTs storage\\n        mapping(uint256 => uint256) gemClaims;\\n        mapping(uint256 => uint256[]) claimIds;\\n        mapping(uint256 => uint256[]) claimQuantities;\\n        mapping(address => bool) controllers;\\n        mapping(address => uint256) claimsMade;\\n        INFTComplexGemPoolData.InputRequirement[] inputRequirements;\\n        AddressSet.Set allowedTokens;\\n    }\\n\\n    function checkGemRequirement(\\n        ComplexPoolData storage self,\\n        uint256 _inputIndex,\\n        address _holderAddress,\\n        uint256 _quantity\\n    ) internal view returns (address) {\\n        address gemtoken;\\n        int256 required = int256(\\n            self.inputRequirements[_inputIndex].minVal * _quantity\\n        );\\n        uint256[] memory hashes = INFTGemMultiToken(\\n            self.inputRequirements[_inputIndex].token\\n        ).heldTokens(_holderAddress);\\n        for (\\n            uint256 _hashIndex = 0;\\n            _hashIndex < hashes.length;\\n            _hashIndex += 1\\n        ) {\\n            uint256 hashAt = hashes[_hashIndex];\\n            if (\\n                INFTComplexGemPoolData(self.inputRequirements[_inputIndex].pool)\\n                .tokenType(hashAt) == INFTGemMultiToken.TokenType.GEM\\n            ) {\\n                gemtoken = self.inputRequirements[_inputIndex].token;\\n                uint256 balance = IERC1155(\\n                    self.inputRequirements[_inputIndex].token\\n                ).balanceOf(_holderAddress, hashAt);\\n                if (balance > uint256(required)) {\\n                    balance = uint256(required);\\n                }\\n                if (balance == 0) {\\n                    continue;\\n                }\\n                required = required - int256(balance);\\n            }\\n            if (\\n                required == 0 &&\\n                self.inputRequirements[_inputIndex].exactAmount == false\\n            ) {\\n                break;\\n            }\\n            if (required < 0) {\\n                require(required == 0, \\\"EXACT_AMOUNT_REQUIRED\\\");\\n            }\\n        }\\n        require(required == 0, \\\"UNMET_GEM_REQUIREMENT\\\");\\n        return gemtoken;\\n    }\\n\\n    /**\\n     * @dev checks to see that account owns all the pool requirements needed to mint at least the given quantity of NFT\\n     */\\n    function requireInputReqs(\\n        ComplexPoolData storage self,\\n        address _holderAddress,\\n        uint256 _quantity\\n    ) public view {\\n        for (\\n            uint256 _inputIndex = 0;\\n            _inputIndex < self.inputRequirements.length;\\n            _inputIndex += 1\\n        ) {\\n            if (\\n                self.inputRequirements[_inputIndex].inputType ==\\n                INFTComplexGemPool.RequirementType.ERC20\\n            ) {\\n                require(\\n                    IERC20(self.inputRequirements[_inputIndex].token).balanceOf(\\n                        _holderAddress\\n                    ) >=\\n                        self.inputRequirements[_inputIndex].minVal *\\n                            (_quantity),\\n                    \\\"UNMET_ERC20_REQUIREMENT\\\"\\n                );\\n            } else if (\\n                self.inputRequirements[_inputIndex].inputType ==\\n                INFTComplexGemPool.RequirementType.ERC1155\\n            ) {\\n                require(\\n                    IERC1155(self.inputRequirements[_inputIndex].token)\\n                    .balanceOf(\\n                        _holderAddress,\\n                        self.inputRequirements[_inputIndex].tokenId\\n                    ) >=\\n                        self.inputRequirements[_inputIndex].minVal *\\n                            (_quantity),\\n                    \\\"UNMET_ERC1155_REQUIREMENT\\\"\\n                );\\n            } else if (\\n                self.inputRequirements[_inputIndex].inputType ==\\n                INFTComplexGemPool.RequirementType.POOL\\n            ) {\\n                checkGemRequirement(\\n                    self,\\n                    _inputIndex,\\n                    _holderAddress,\\n                    _quantity\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer a quantity of input reqs from to\\n     */\\n    function takeInputReqsFrom(\\n        ComplexPoolData storage self,\\n        uint256 _claimHash,\\n        address _fromAddress,\\n        uint256 _quantity\\n    ) internal {\\n        address gemtoken;\\n        for (\\n            uint256 _inputIndex = 0;\\n            _inputIndex < self.inputRequirements.length;\\n            _inputIndex += 1\\n        ) {\\n            if (!self.inputRequirements[_inputIndex].takeCustody) {\\n                continue;\\n            }\\n            if (\\n                self.inputRequirements[_inputIndex].inputType ==\\n                INFTComplexGemPool.RequirementType.ERC20\\n            ) {\\n                IERC20 token = IERC20(\\n                    self.inputRequirements[_inputIndex].token\\n                );\\n                token.transferFrom(\\n                    _fromAddress,\\n                    self.pool,\\n                    self.inputRequirements[_inputIndex].minVal * (_quantity)\\n                );\\n            } else if (\\n                self.inputRequirements[_inputIndex].inputType ==\\n                INFTComplexGemPool.RequirementType.ERC1155\\n            ) {\\n                IERC1155 token = IERC1155(\\n                    self.inputRequirements[_inputIndex].token\\n                );\\n                token.safeTransferFrom(\\n                    _fromAddress,\\n                    self.pool,\\n                    self.inputRequirements[_inputIndex].tokenId,\\n                    self.inputRequirements[_inputIndex].minVal * (_quantity),\\n                    \\\"\\\"\\n                );\\n            } else if (\\n                self.inputRequirements[_inputIndex].inputType ==\\n                INFTComplexGemPool.RequirementType.POOL\\n            ) {\\n                gemtoken = checkGemRequirement(\\n                    self,\\n                    _inputIndex,\\n                    _fromAddress,\\n                    _quantity\\n                );\\n            }\\n        }\\n\\n        if (self.claimIds[_claimHash].length > 0 && gemtoken != address(0)) {\\n            IERC1155(gemtoken).safeBatchTransferFrom(\\n                _fromAddress,\\n                self.pool,\\n                self.claimIds[_claimHash],\\n                self.claimQuantities[_claimHash],\\n                \\\"\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the returnable input requirements for claimhash to account\\n     */\\n    function returnInputReqsTo(\\n        ComplexPoolData storage self,\\n        uint256 _claimHash,\\n        address _toAddress,\\n        uint256 _quantity\\n    ) internal {\\n        address gemtoken;\\n        for (uint256 i = 0; i < self.inputRequirements.length; i++) {\\n            if (\\n                self.inputRequirements[i].inputType ==\\n                INFTComplexGemPool.RequirementType.ERC20 &&\\n                self.inputRequirements[i].burn == false &&\\n                self.inputRequirements[i].takeCustody == true\\n            ) {\\n                IERC20 token = IERC20(self.inputRequirements[i].token);\\n                token.transferFrom(\\n                    self.pool,\\n                    _toAddress,\\n                    self.inputRequirements[i].minVal * (_quantity)\\n                );\\n            } else if (\\n                self.inputRequirements[i].inputType ==\\n                INFTComplexGemPool.RequirementType.ERC1155 &&\\n                self.inputRequirements[i].burn == false &&\\n                self.inputRequirements[i].takeCustody == true\\n            ) {\\n                IERC1155 token = IERC1155(self.inputRequirements[i].token);\\n                token.safeTransferFrom(\\n                    self.pool,\\n                    _toAddress,\\n                    self.inputRequirements[i].tokenId,\\n                    self.inputRequirements[i].minVal * (_quantity),\\n                    \\\"\\\"\\n                );\\n            } else if (\\n                self.inputRequirements[i].inputType ==\\n                INFTComplexGemPool.RequirementType.POOL &&\\n                self.inputRequirements[i].burn == false &&\\n                self.inputRequirements[i].takeCustody == true\\n            ) {\\n                gemtoken = self.inputRequirements[i].token;\\n            }\\n        }\\n        if (self.claimIds[_claimHash].length > 0 && gemtoken != address(0)) {\\n            IERC1155(gemtoken).safeBatchTransferFrom(\\n                self.pool,\\n                _toAddress,\\n                self.claimIds[_claimHash],\\n                self.claimQuantities[_claimHash],\\n                \\\"\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev add an input requirement for this token\\n     */\\n    function addInputRequirement(\\n        ComplexPoolData storage self,\\n        address token,\\n        address pool,\\n        INFTComplexGemPool.RequirementType inputType,\\n        uint256 tokenId,\\n        uint256 minAmount,\\n        bool takeCustody,\\n        bool burn,\\n        bool exactAmount\\n    ) public {\\n        require(token != address(0), \\\"INVALID_TOKEN\\\");\\n        require(\\n            inputType == INFTComplexGemPool.RequirementType.ERC20 ||\\n                inputType == INFTComplexGemPool.RequirementType.ERC1155 ||\\n                inputType == INFTComplexGemPool.RequirementType.POOL,\\n            \\\"INVALID_INPUTTYPE\\\"\\n        );\\n        require(\\n            (inputType == INFTComplexGemPool.RequirementType.POOL &&\\n                pool != address(0)) ||\\n                inputType != INFTComplexGemPool.RequirementType.POOL,\\n            \\\"INVALID_POOL\\\"\\n        );\\n        require(\\n            (inputType == INFTComplexGemPool.RequirementType.ERC20 &&\\n                tokenId == 0) ||\\n                inputType == INFTComplexGemPool.RequirementType.ERC1155 ||\\n                (inputType == INFTComplexGemPool.RequirementType.POOL &&\\n                    tokenId == 0),\\n            \\\"INVALID_TOKENID\\\"\\n        );\\n        require(minAmount != 0, \\\"ZERO_AMOUNT\\\");\\n        require(!(!takeCustody && burn), \\\"INVALID_TOKENSTATE\\\");\\n        self.inputRequirements.push(\\n            INFTComplexGemPoolData.InputRequirement(\\n                token,\\n                pool,\\n                inputType,\\n                tokenId,\\n                minAmount,\\n                takeCustody,\\n                burn,\\n                exactAmount\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev update input requirement at index\\n     */\\n    function updateInputRequirement(\\n        ComplexPoolData storage self,\\n        uint256 _index,\\n        address _tokenAddress,\\n        address _poolAddress,\\n        INFTComplexGemPool.RequirementType _inputRequirementType,\\n        uint256 _tokenId,\\n        uint256 _minAmount,\\n        bool _takeCustody,\\n        bool _burn,\\n        bool _exactAmount\\n    ) public {\\n        require(_index < self.inputRequirements.length, \\\"OUT_OF_RANGE\\\");\\n        require(_tokenAddress != address(0), \\\"INVALID_TOKEN\\\");\\n        require(\\n            _inputRequirementType == INFTComplexGemPool.RequirementType.ERC20 ||\\n                _inputRequirementType ==\\n                INFTComplexGemPool.RequirementType.ERC1155 ||\\n                _inputRequirementType ==\\n                INFTComplexGemPool.RequirementType.POOL,\\n            \\\"INVALID_INPUTTYPE\\\"\\n        );\\n        require(\\n            (_inputRequirementType == INFTComplexGemPool.RequirementType.POOL &&\\n                _poolAddress != address(0)) ||\\n                _inputRequirementType !=\\n                INFTComplexGemPool.RequirementType.POOL,\\n            \\\"INVALID_POOL\\\"\\n        );\\n        require(\\n            (_inputRequirementType ==\\n                INFTComplexGemPool.RequirementType.ERC20 &&\\n                _tokenId == 0) ||\\n                _inputRequirementType ==\\n                INFTComplexGemPool.RequirementType.ERC1155 ||\\n                (_inputRequirementType ==\\n                    INFTComplexGemPool.RequirementType.POOL &&\\n                    _tokenId == 0),\\n            \\\"INVALID_TOKENID\\\"\\n        );\\n        require(_minAmount != 0, \\\"ZERO_AMOUNT\\\");\\n        require(!(!_takeCustody && _burn), \\\"INVALID_TOKENSTATE\\\");\\n        self.inputRequirements[_index] = INFTComplexGemPoolData\\n        .InputRequirement(\\n            _tokenAddress,\\n            _poolAddress,\\n            _inputRequirementType,\\n            _tokenId,\\n            _minAmount,\\n            _takeCustody,\\n            _burn,\\n            _exactAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev count of input requirements\\n     */\\n    function allInputRequirementsLength(ComplexPoolData storage self)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return self.inputRequirements.length;\\n    }\\n\\n    /**\\n     * @dev input requirements at index\\n     */\\n    function allInputRequirements(ComplexPoolData storage self, uint256 _index)\\n        public\\n        view\\n        returns (\\n            address,\\n            address,\\n            INFTComplexGemPool.RequirementType,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        require(_index < self.inputRequirements.length, \\\"OUT_OF_RANGE\\\");\\n        INFTComplexGemPoolData.InputRequirement memory req = self\\n        .inputRequirements[_index];\\n        return (\\n            req.token,\\n            req.pool,\\n            req.inputType,\\n            req.tokenId,\\n            req.minVal,\\n            req.takeCustody,\\n            req.burn,\\n            req.exactAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev attempt to create a claim using the given timeframe with count\\n     */\\n    function createClaims(\\n        ComplexPoolData storage self,\\n        uint256 _timeframe,\\n        uint256 _count\\n    ) public {\\n        // enabled\\n        require(self.enabled == true, \\\"DISABLED\\\");\\n        // minimum timeframe\\n        require(_timeframe >= self.minTime, \\\"TIMEFRAME_TOO_SHORT\\\");\\n        // no ETH\\n        require(msg.value != 0, \\\"ZERO_BALANCE\\\");\\n        // zero qty\\n        require(_count != 0, \\\"ZERO_QUANTITY\\\");\\n        // maximum timeframe\\n        require(\\n            (self.maxTime != 0 && _timeframe <= self.maxTime) ||\\n                self.maxTime == 0,\\n            \\\"TIMEFRAME_TOO_LONG\\\"\\n        );\\n        // max quantity per claim\\n        require(\\n            (self.maxQuantityPerClaim != 0 &&\\n                _count <= self.maxQuantityPerClaim) ||\\n                self.maxQuantityPerClaim == 0,\\n            \\\"MAX_QUANTITY_EXCEEDED\\\"\\n        );\\n        require(\\n            (self.maxClaimsPerAccount != 0 &&\\n                self.claimsMade[msg.sender] < self.maxClaimsPerAccount) ||\\n                self.maxClaimsPerAccount == 0,\\n            \\\"MAX_QUANTITY_EXCEEDED\\\"\\n        );\\n\\n        uint256 adjustedBalance = msg.value / (_count);\\n        // cost given this timeframe\\n\\n        uint256 cost = (self.ethPrice * (self.minTime)) / (_timeframe);\\n        require(adjustedBalance >= cost, \\\"INSUFFICIENT_ETH\\\");\\n\\n        // get the nest claim hash, revert if no more claims\\n        uint256 claimHash = nextClaimHash(self);\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // require the user to have the input requirements\\n        requireInputReqs(self, msg.sender, _count);\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(self.multitoken).mint(msg.sender, claimHash, 1);\\n        INFTGemMultiToken(self.multitoken).setTokenData(\\n            claimHash,\\n            INFTGemMultiToken.TokenType.CLAIM,\\n            address(this)\\n        );\\n        addToken(self, claimHash, INFTGemMultiToken.TokenType.CLAIM);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 claimUnlockTimestamp = block.timestamp + (_timeframe);\\n        self.claimLockTimestamps[claimHash] = claimUnlockTimestamp;\\n        self.claimAmountPaid[claimHash] = cost * (_count);\\n        self.claimQuant[claimHash] = _count;\\n        self.claimsMade[msg.sender] = self.claimsMade[msg.sender] + (1);\\n\\n        // tranasfer NFT input requirements from user to pool\\n        takeInputReqsFrom(self, claimHash, msg.sender, _count);\\n\\n        // emit an event about it\\n        emit NFTGemClaimCreated(\\n            msg.sender,\\n            address(self.pool),\\n            claimHash,\\n            _timeframe,\\n            _count,\\n            cost\\n        );\\n\\n        // increase the staked eth balance\\n        self.totalStakedEth = self.totalStakedEth + (cost * (_count));\\n\\n        // return the extra to sender\\n        if (msg.value > cost * (_count)) {\\n            (bool success, ) = payable(msg.sender).call{\\n                value: msg.value - (cost * (_count))\\n            }(\\\"\\\");\\n            require(success, \\\"REFUND_FAILED\\\");\\n        }\\n    }\\n\\n    function getPoolFee(ComplexPoolData storage self, address tokenUsed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // get the fee for this pool if it exists\\n        uint256 poolDivFeeHash = uint256(\\n            keccak256(abi.encodePacked(\\\"pool_fee\\\", address(self.pool)))\\n        );\\n        uint256 poolFee = INFTGemFeeManager(self.feeTracker).fee(\\n            poolDivFeeHash\\n        );\\n        // get the pool fee for this token if it exists\\n        uint256 poolTokenFeeHash = uint256(\\n            keccak256(abi.encodePacked(\\\"pool_fee\\\", address(tokenUsed)))\\n        );\\n        uint256 poolTokenFee = INFTGemFeeManager(self.feeTracker).fee(\\n            poolTokenFeeHash\\n        );\\n        // get the default fee amoutn for this token\\n        uint256 defaultFeeHash = uint256(\\n            keccak256(abi.encodePacked(\\\"pool_fee\\\"))\\n        );\\n        uint256 defaultFee = INFTGemFeeManager(self.feeTracker).fee(\\n            defaultFeeHash\\n        );\\n        defaultFee = defaultFee == 0 ? 2000 : defaultFee;\\n\\n        // get the fee, preferring the token fee if available\\n        uint256 feeNum = poolFee != poolTokenFee\\n            ? (poolTokenFee != 0 ? poolTokenFee : poolFee)\\n            : poolFee;\\n\\n        // set the fee to default if it is 0\\n        return feeNum == 0 ? defaultFee : feeNum;\\n    }\\n\\n    function getMinimumLiquidity(\\n        ComplexPoolData storage self,\\n        address tokenUsed\\n    ) internal view returns (uint256) {\\n        // get the fee for this pool if it exists\\n        uint256 poolDivFeeHash = uint256(\\n            keccak256(abi.encodePacked(\\\"min_liquidity\\\", address(self.pool)))\\n        );\\n        uint256 poolFee = INFTGemFeeManager(self.feeTracker).fee(\\n            poolDivFeeHash\\n        );\\n        // get the pool fee for this token if it exists\\n        uint256 poolTokenFeeHash = uint256(\\n            keccak256(abi.encodePacked(\\\"min_liquidity\\\", address(tokenUsed)))\\n        );\\n        uint256 poolTokenFee = INFTGemFeeManager(self.feeTracker).fee(\\n            poolTokenFeeHash\\n        );\\n        // get the default fee amoutn for this token\\n        uint256 defaultFeeHash = uint256(\\n            keccak256(abi.encodePacked(\\\"min_liquidity\\\"))\\n        );\\n        uint256 defaultFee = INFTGemFeeManager(self.feeTracker).fee(\\n            defaultFeeHash\\n        );\\n        defaultFee = defaultFee == 0 ? 50 : defaultFee;\\n\\n        // get the fee, preferring the token fee if available\\n        uint256 feeNum = poolFee != poolTokenFee\\n            ? (poolTokenFee != 0 ? poolTokenFee : poolFee)\\n            : poolFee;\\n\\n        // set the fee to default if it is 0\\n        return feeNum == 0 ? defaultFee : feeNum;\\n    }\\n\\n    /**\\n     * @dev crate multiple gem claim using an erc20 token. this token must be tradeable in Uniswap or this call will fail\\n     */\\n    function createERC20Claims(\\n        ComplexPoolData storage self,\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) public {\\n        // enabled\\n        require(self.enabled == true, \\\"DISABLED\\\");\\n        // must be a valid address\\n        require(erc20token != address(0), \\\"INVALID_ERC20_TOKEN\\\");\\n\\n        // token is allowed\\n        require(\\n            (self.allowedTokens.count() > 0 &&\\n                self.allowedTokens.exists(erc20token)) ||\\n                self.allowedTokens.count() == 0,\\n            \\\"TOKEN_DISALLOWED\\\"\\n        );\\n\\n        // zero qty\\n        require(count != 0, \\\"ZERO_QUANTITY\\\");\\n\\n        // max quantity per claim\\n        require(\\n            (self.maxQuantityPerClaim != 0 &&\\n                count <= self.maxQuantityPerClaim) ||\\n                self.maxQuantityPerClaim == 0,\\n            \\\"MAX_QUANTITY_EXCEEDED\\\"\\n        );\\n        require(\\n            (self.maxClaimsPerAccount != 0 &&\\n                self.claimsMade[msg.sender] < self.maxClaimsPerAccount) ||\\n                self.maxClaimsPerAccount == 0,\\n            \\\"MAX_QUANTITY_EXCEEDED\\\"\\n        );\\n\\n        // require the user to have the input requirements\\n        requireInputReqs(self, msg.sender, count);\\n\\n        // Uniswap pool must exist\\n        require(\\n            ISwapQueryHelper(self.swapHelper).hasPool(erc20token) == true,\\n            \\\"NO_UNISWAP_POOL\\\"\\n        );\\n\\n        // must have an amount specified\\n        require(tokenAmount >= 0, \\\"NO_PAYMENT_INCLUDED\\\");\\n\\n        // get a quote in ETH for the given token.\\n        (\\n            uint256 ethereum,\\n            uint256 tokenReserve,\\n            uint256 ethReserve\\n        ) = ISwapQueryHelper(self.swapHelper).coinQuote(\\n            erc20token,\\n            tokenAmount / (count)\\n        );\\n\\n        // TODO: update liquidity multiple from fee manager\\n        if (self.validateerc20 == true) {\\n            uint256 minLiquidity = getMinimumLiquidity(self, erc20token);\\n            // make sure the convertible amount is has reserves > 100x the token\\n            require(\\n                ethReserve >= ethereum * minLiquidity * (count),\\n                \\\"INSUFFICIENT_ETH_LIQUIDITY\\\"\\n            );\\n\\n            // make sure the convertible amount is has reserves > 100x the token\\n            require(\\n                tokenReserve >= tokenAmount * minLiquidity * (count),\\n                \\\"INSUFFICIENT_TOKEN_LIQUIDITY\\\"\\n            );\\n        }\\n\\n        // make sure the convertible amount is less than max price\\n        require(ethereum <= self.ethPrice, \\\"OVERPAYMENT\\\");\\n\\n        // calculate the maturity time given the converted eth\\n        uint256 maturityTime = (self.ethPrice * (self.minTime)) / (ethereum);\\n\\n        // make sure the convertible amount is less than max price\\n        require(maturityTime >= self.minTime, \\\"INSUFFICIENT_TIME\\\");\\n\\n        // get the next claim hash, revert if no more claims\\n        uint256 claimHash = nextClaimHash(self);\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(self.multitoken).mint(msg.sender, claimHash, 1);\\n        INFTGemMultiToken(self.multitoken).setTokenData(\\n            claimHash,\\n            INFTGemMultiToken.TokenType.CLAIM,\\n            address(this)\\n        );\\n        addToken(self, claimHash, INFTGemMultiToken.TokenType.CLAIM);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 claimUnlockTimestamp = block.timestamp + (maturityTime);\\n        self.claimLockTimestamps[claimHash] = claimUnlockTimestamp;\\n        self.claimAmountPaid[claimHash] = ethereum;\\n        self.claimLockToken[claimHash] = erc20token;\\n        self.claimTokenAmountPaid[claimHash] = tokenAmount;\\n        self.claimQuant[claimHash] = count;\\n        self.claimsMade[msg.sender] = self.claimsMade[msg.sender] + (1);\\n\\n        // tranasfer NFT input requirements from user to pool\\n        takeInputReqsFrom(self, claimHash, msg.sender, count);\\n\\n        // increase staked eth amount\\n        self.totalStakedEth = self.totalStakedEth + (ethereum);\\n\\n        // emit a message indicating that an erc20 claim has been created\\n        emit NFTGemERC20ClaimCreated(\\n            msg.sender,\\n            address(self.pool),\\n            claimHash,\\n            maturityTime,\\n            erc20token,\\n            count,\\n            ethereum\\n        );\\n\\n        // transfer the caller's ERC20 tokens into the pool\\n        IERC20(erc20token).transferFrom(\\n            msg.sender,\\n            address(self.pool),\\n            tokenAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)\\n     */\\n    function collectClaim(\\n        ComplexPoolData storage self,\\n        uint256 _claimHash,\\n        bool _requireMature\\n    ) public {\\n        // enabled\\n        require(self.enabled == true, \\\"DISABLED\\\");\\n        // check the maturity of the claim - only issue gem if mature\\n        uint256 unlockTime = self.claimLockTimestamps[_claimHash];\\n        bool isMature = unlockTime < block.timestamp;\\n        require(\\n            !_requireMature || (_requireMature && isMature),\\n            \\\"IMMATURE_CLAIM\\\"\\n        );\\n        __collectClaim(self, _claimHash);\\n    }\\n\\n    /**\\n     * @dev collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)\\n     */\\n    function __collectClaim(ComplexPoolData storage self, uint256 claimHash)\\n        internal\\n    {\\n        // validation checks - disallow if not owner (holds coin with claimHash)\\n        // or if the unlockTime amd unlockPaid data is in an invalid state\\n        require(\\n            IERC1155(self.multitoken).balanceOf(msg.sender, claimHash) == 1,\\n            \\\"NOT_CLAIM_OWNER\\\"\\n        );\\n        uint256 unlockTime = self.claimLockTimestamps[claimHash];\\n        uint256 unlockPaid = self.claimAmountPaid[claimHash];\\n        require(unlockTime != 0 && unlockPaid > 0, \\\"INVALID_CLAIM\\\");\\n\\n        // grab the erc20 token info if there is any\\n        address tokenUsed = self.claimLockToken[claimHash];\\n        uint256 unlockTokenPaid = self.claimTokenAmountPaid[claimHash];\\n\\n        // check the maturity of the claim - only issue gem if mature\\n        bool isMature = unlockTime < block.timestamp;\\n\\n        //  burn claim and transfer money back to user\\n        INFTGemMultiToken(self.multitoken).burn(msg.sender, claimHash, 1);\\n\\n        // if they used erc20 tokens stake their claim, return their tokens\\n        if (tokenUsed != address(0)) {\\n            // calculate fee portion using fee tracker\\n            uint256 feePortion = 0;\\n            if (isMature == true) {\\n                feePortion = unlockTokenPaid / getPoolFee(self, tokenUsed);\\n            }\\n            // assess a fee for minting the NFT. Fee is collectec in fee tracker\\n            IERC20(tokenUsed).transferFrom(\\n                address(self.pool),\\n                self.feeTracker,\\n                feePortion\\n            );\\n            // send the principal minus fees to the caller\\n            IERC20(tokenUsed).transferFrom(\\n                address(self.pool),\\n                msg.sender,\\n                unlockTokenPaid - (feePortion)\\n            );\\n\\n            // emit an event that the claim was redeemed for ERC20\\n            emit NFTGemERC20ClaimRedeemed(\\n                msg.sender,\\n                address(self.pool),\\n                claimHash,\\n                tokenUsed,\\n                unlockPaid,\\n                unlockTokenPaid,\\n                self.claimQuant[claimHash],\\n                feePortion\\n            );\\n        } else {\\n            // calculate fee portion using fee tracker\\n            uint256 feePortion = 0;\\n            if (isMature == true) {\\n                feePortion = unlockPaid / getPoolFee(self, address(0));\\n            }\\n            // transfer the ETH fee to fee tracker\\n            payable(self.feeTracker).transfer(feePortion);\\n\\n            // transfer the ETH back to user\\n            payable(msg.sender).transfer(unlockPaid - (feePortion));\\n\\n            // emit an event that the claim was redeemed for ETH\\n            emit NFTGemClaimRedeemed(\\n                msg.sender,\\n                address(self.pool),\\n                claimHash,\\n                unlockPaid,\\n                self.claimQuant[claimHash],\\n                feePortion\\n            );\\n        }\\n\\n        // tranasfer NFT input requirements from pool to user\\n        returnInputReqsTo(\\n            self,\\n            claimHash,\\n            msg.sender,\\n            self.claimQuant[claimHash]\\n        );\\n\\n        // deduct the total staked ETH balance of the pool\\n        self.totalStakedEth = self.totalStakedEth - (unlockPaid);\\n\\n        // if all this is happening before the unlocktime then we exit\\n        // without minting a gem because the user is withdrawing early\\n        if (!isMature) {\\n            return;\\n        }\\n\\n        // get the next gem hash, increase the staking sifficulty\\n        // for the pool, and mint a gem token back to account\\n        uint256 nextHash = nextGemHash(self);\\n\\n        // associate gem and claim\\n        self.gemClaims[nextHash] = claimHash;\\n\\n        // mint the gem\\n        INFTGemMultiToken(self.multitoken).mint(\\n            msg.sender,\\n            nextHash,\\n            self.claimQuant[claimHash]\\n        );\\n        addToken(self, nextHash, INFTGemMultiToken.TokenType.GEM);\\n\\n        // emit an event about a gem getting created\\n        emit NFTGemCreated(\\n            msg.sender,\\n            address(self.pool),\\n            claimHash,\\n            nextHash,\\n            self.claimQuant[claimHash]\\n        );\\n    }\\n\\n    /**\\n     * @dev purchase gem(s) at the listed pool price\\n     */\\n    function purchaseGems(\\n        ComplexPoolData storage self,\\n        address sender,\\n        uint256 value,\\n        uint256 count\\n    ) public {\\n        // enabled\\n        require(self.enabled == true, \\\"DISABLED\\\");\\n        // non-zero balance\\n        require(value != 0, \\\"ZERO_BALANCE\\\");\\n        // non-zero quantity\\n        require(count != 0, \\\"ZERO_QUANTITY\\\");\\n        // sufficient input eth\\n        uint256 adjustedBalance = value / (count);\\n        require(adjustedBalance >= self.ethPrice, \\\"INSUFFICIENT_ETH\\\");\\n        require(self.allowPurchase == true, \\\"PURCHASE_DISALLOWED\\\");\\n\\n        // get the next gem hash, increase the staking sifficulty\\n        // for the pool, and mint a gem token back to account\\n        uint256 nextHash = nextGemHash(self);\\n\\n        // mint the gem\\n        INFTGemMultiToken(self.multitoken).mint(sender, nextHash, count);\\n        addToken(self, nextHash, INFTGemMultiToken.TokenType.GEM);\\n\\n        // transfer the funds for the gem to the fee tracker\\n        payable(self.feeTracker).transfer(value);\\n\\n        // emit an event about a gem getting created\\n        emit NFTGemCreated(sender, address(self.pool), 0, nextHash, count);\\n    }\\n\\n    /**\\n     * @dev create a token of token hash / token type\\n     */\\n    function addToken(\\n        ComplexPoolData storage self,\\n        uint256 tokenHash,\\n        INFTGemMultiToken.TokenType tokenType\\n    ) public {\\n        require(\\n            tokenType == INFTGemMultiToken.TokenType.CLAIM ||\\n                tokenType == INFTGemMultiToken.TokenType.GEM,\\n            \\\"INVALID_TOKENTYPE\\\"\\n        );\\n        self.tokenHashes.push(tokenHash);\\n        self.tokenTypes[tokenHash] = tokenType;\\n        self.tokenIds[tokenHash] = tokenType ==\\n            INFTGemMultiToken.TokenType.CLAIM\\n            ? nextClaimId(self)\\n            : nextGemId(self);\\n        INFTGemMultiToken(self.multitoken).setTokenData(\\n            tokenHash,\\n            tokenType,\\n            address(this)\\n        );\\n        if (tokenType == INFTGemMultiToken.TokenType.GEM) {\\n            increaseDifficulty(self);\\n        }\\n    }\\n\\n    /**\\n     * @dev get the next claim id\\n     */\\n    function nextClaimId(ComplexPoolData storage self)\\n        public\\n        returns (uint256)\\n    {\\n        uint256 ncId = self.nextClaimIdVal;\\n        self.nextClaimIdVal = self.nextClaimIdVal + (1);\\n        return ncId;\\n    }\\n\\n    /**\\n     * @dev get the next gem id\\n     */\\n    function nextGemId(ComplexPoolData storage self) public returns (uint256) {\\n        uint256 ncId = self.nextGemIdVal;\\n        self.nextGemIdVal = self.nextGemIdVal + (1);\\n        return ncId;\\n    }\\n\\n    /**\\n     * @dev increase the pool's difficulty by calculating the step increase portion and adding it to the eth price of the market\\n     */\\n    function increaseDifficulty(ComplexPoolData storage self) public {\\n        if (\\n            self.priceIncrementType ==\\n            INFTComplexGemPoolData.PriceIncrementType.COMPOUND\\n        ) {\\n            uint256 diffIncrease = self.ethPrice / (self.diffstep);\\n            self.ethPrice = self.ethPrice + (diffIncrease);\\n        } else if (\\n            self.priceIncrementType ==\\n            INFTComplexGemPoolData.PriceIncrementType.INVERSELOG\\n        ) {\\n            uint256 diffIncrease = self.diffstep / (self.ethPrice);\\n            self.ethPrice = self.ethPrice + (diffIncrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev the hash of the next gem to be minted\\n     */\\n    function nextGemHash(ComplexPoolData storage self)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"gem\\\",\\n                        address(self.pool),\\n                        self.nextGemIdVal\\n                    )\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev the hash of the next claim to be minted\\n     */\\n    function nextClaimHash(ComplexPoolData storage self)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (self.maxClaims != 0 && self.nextClaimIdVal <= self.maxClaims) ||\\n                self.maxClaims == 0\\n                ? uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            \\\"claim\\\",\\n                            address(self.pool),\\n                            self.nextClaimIdVal\\n                        )\\n                    )\\n                )\\n                : 0;\\n    }\\n\\n    /**\\n     * @dev get the token hash at index\\n     */\\n    function allTokenHashes(ComplexPoolData storage self, uint256 ndx)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return self.tokenHashes[ndx];\\n    }\\n\\n    /**\\n     * @dev return the claim amount paid for this claim\\n     */\\n    function claimAmount(ComplexPoolData storage self, uint256 claimHash)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return self.claimAmountPaid[claimHash];\\n    }\\n\\n    /**\\n     * @dev the claim quantity (count of gems staked) for the given claim hash\\n     */\\n    function claimQuantity(ComplexPoolData storage self, uint256 claimHash)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return self.claimQuant[claimHash];\\n    }\\n\\n    /**\\n     * @dev the lock time for this claim hash. once past lock time a gem is minted\\n     */\\n    function claimUnlockTime(ComplexPoolData storage self, uint256 claimHash)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return self.claimLockTimestamps[claimHash];\\n    }\\n\\n    /**\\n     * @dev return the claim token amount for this claim hash\\n     */\\n    function claimTokenAmount(ComplexPoolData storage self, uint256 claimHash)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return self.claimTokenAmountPaid[claimHash];\\n    }\\n\\n    /**\\n     * @dev return the claim hash of the given gemhash\\n     */\\n    function gemClaimHash(ComplexPoolData storage self, uint256 gemHash)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return self.gemClaims[gemHash];\\n    }\\n\\n    /**\\n     * @dev return the token that was staked to create the given token hash. 0 if the native token\\n     */\\n    function stakedToken(ComplexPoolData storage self, uint256 claimHash)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return self.claimLockToken[claimHash];\\n    }\\n\\n    /**\\n     * @dev add a token that is allowed to be used to create a claim\\n     */\\n    function addAllowedToken(ComplexPoolData storage self, address token)\\n        public\\n    {\\n        if (!self.allowedTokens.exists(token)) {\\n            self.allowedTokens.insert(token);\\n        }\\n    }\\n\\n    /**\\n     * @dev  remove a token that is allowed to be used to create a claim\\n     */\\n    function removeAllowedToken(ComplexPoolData storage self, address token)\\n        public\\n    {\\n        if (self.allowedTokens.exists(token)) {\\n            self.allowedTokens.remove(token);\\n        }\\n    }\\n\\n    /**\\n     * @dev deposit into pool\\n     */\\n    function deposit(\\n        ComplexPoolData storage self,\\n        address erc20token,\\n        uint256 tokenAmount\\n    ) public {\\n        if (erc20token == address(0)) {\\n            require(msg.sender.balance >= tokenAmount, \\\"INSUFFICIENT_BALANCE\\\");\\n            self.totalStakedEth = self.totalStakedEth + (msg.sender.balance);\\n        } else {\\n            require(\\n                IERC20(erc20token).balanceOf(msg.sender) >= tokenAmount,\\n                \\\"INSUFFICIENT_BALANCE\\\"\\n            );\\n            IERC20(erc20token).transferFrom(\\n                msg.sender,\\n                address(self.pool),\\n                tokenAmount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev deposit NFT into pool\\n     */\\n    function depositNFT(\\n        ComplexPoolData storage self,\\n        address erc1155token,\\n        uint256 tokenId,\\n        uint256 tokenAmount\\n    ) public {\\n        require(\\n            IERC1155(erc1155token).balanceOf(msg.sender, tokenId) >=\\n                tokenAmount,\\n            \\\"INSUFFICIENT_BALANCE\\\"\\n        );\\n        IERC1155(erc1155token).safeTransferFrom(\\n            msg.sender,\\n            address(self.pool),\\n            tokenId,\\n            tokenAmount,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev withdraw pool contents\\n     */\\n    function withdraw(\\n        ComplexPoolData storage self,\\n        address erc20token,\\n        address destination,\\n        uint256 tokenAmount\\n    ) public {\\n        require(destination != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(\\n            self.controllers[msg.sender] == true || msg.sender == self.governor,\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n        if (erc20token == address(0)) {\\n            payable(destination).transfer(tokenAmount);\\n        } else {\\n            IERC20(erc20token).transferFrom(\\n                address(self.pool),\\n                address(destination),\\n                tokenAmount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev withdraw pool NFT\\n     */\\n    function withdrawNFT(\\n        ComplexPoolData storage self,\\n        address erc1155token,\\n        address destination,\\n        uint256 tokenId,\\n        uint256 tokenAmount\\n    ) public {\\n        require(\\n            self.controllers[msg.sender] == true || msg.sender == self.governor,\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n        require(erc1155token != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(destination != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(\\n            IERC1155(erc1155token).balanceOf(address(self.pool), tokenId) >=\\n                tokenAmount,\\n            \\\"INSUFFICIENT_BALANCE\\\"\\n        );\\n        IERC1155(erc1155token).safeTransferFrom(\\n            address(self.pool),\\n            address(destination),\\n            tokenId,\\n            tokenAmount,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev mint the genesis gems earned by the pools creator and funder\\n     */\\n    function mintGenesisGems(\\n        ComplexPoolData storage self,\\n        address creator,\\n        address funder\\n    ) public {\\n        require(self.multitoken != address(0), \\\"NO_MULTITOKEN\\\");\\n        require(\\n            creator != address(0) && funder != address(0),\\n            \\\"ZERO_DESTINATION\\\"\\n        );\\n        require(self.nextGemIdVal == 0, \\\"ALREADY_MINTED\\\");\\n\\n        uint256 gemHash = nextGemHash(self);\\n        INFTGemMultiToken(self.multitoken).mint(creator, gemHash, 1);\\n        addToken(self, gemHash, INFTGemMultiToken.TokenType.GEM);\\n        // emit an event about a gem getting created\\n        emit NFTGemCreated(creator, address(self.pool), 0, gemHash, 1);\\n\\n        gemHash = nextGemHash(self);\\n        INFTGemMultiToken(self.multitoken).mint(funder, gemHash, 1);\\n        addToken(self, gemHash, INFTGemMultiToken.TokenType.GEM);\\n        // emit an event about a gem getting created\\n        emit NFTGemCreated(funder, address(self.pool), 0, gemHash, 1);\\n    }\\n}\\n\",\"keccak256\":\"0x27070e8eb4fdccd152ad13ca1212c9165214e800edf7dc4ef787ab9a98b57345\",\"license\":\"MIT\"},\"src/pool/NFTComplexGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPool.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/ISwapQueryHelper.sol\\\";\\nimport \\\"../interfaces/IERC3156FlashLender.sol\\\";\\n\\nimport \\\"../libs/AddressSet.sol\\\";\\n\\nimport \\\"./NFTComplexGemPoolData.sol\\\";\\n\\ncontract NFTComplexGemPool is\\n    NFTComplexGemPoolData,\\n    INFTComplexGemPool,\\n    IERC3156FlashLender,\\n    ERC1155Holder\\n{\\n    using AddressSet for AddressSet.Set;\\n    using ComplexPoolLib for ComplexPoolLib.ComplexPoolData;\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controllerAddress) external {\\n        require(\\n            poolData.controllers[msg.sender] == true ||\\n                address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        poolData.controllers[_controllerAddress] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _controllerAddress)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return poolData.controllers[_controllerAddress];\\n    }\\n\\n    /**\\n     * @dev Remove the sender's address from the list of controllers\\n     */\\n    function relinquishControl() external {\\n        require(\\n            poolData.controllers[msg.sender] == true ||\\n                address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        delete poolData.controllers[msg.sender];\\n    }\\n\\n    constructor() {\\n        poolData.controllers[msg.sender] = true;\\n    }\\n\\n    /**\\n     * @dev initializer called when contract is deployed\\n     */\\n    function initialize(\\n        string memory _symbol,\\n        string memory _name,\\n        uint256 _ethPrice,\\n        uint256 _minTime,\\n        uint256 _maxTime,\\n        uint256 _diffstep,\\n        uint256 _maxClaims,\\n        address _allowedToken\\n    ) external override onlyController {\\n        poolData.pool = address(this);\\n        poolData.symbol = _symbol;\\n        poolData.name = _name;\\n        poolData.ethPrice = _ethPrice;\\n        poolData.minTime = _minTime;\\n        poolData.maxTime = _maxTime;\\n        poolData.diffstep = _diffstep;\\n        poolData.maxClaims = _maxClaims;\\n        poolData.visible = true;\\n        poolData.enabled = true;\\n        if (_allowedToken != address(0)) {\\n            poolData.allowedTokens.insert(_allowedToken);\\n        }\\n    }\\n\\n    /**\\n     * @dev set the governor. pool uses the governor to issue gov token issuance requests\\n     */\\n    function setGovernor(address _governorAddress) external override {\\n        require(\\n            poolData.controllers[msg.sender] =\\n                true ||\\n                msg.sender == poolData.governor,\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n        poolData.governor = _governorAddress;\\n    }\\n\\n    /**\\n     * @dev set the fee tracker. pool uses the  fee tracker to issue  fee tracker token issuance requests\\n     */\\n    function setFeeTracker(address _feeTrackerAddress) external override {\\n        require(\\n            poolData.controllers[msg.sender] =\\n                true ||\\n                msg.sender == poolData.governor,\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n        poolData.feeTracker = _feeTrackerAddress;\\n    }\\n\\n    /**\\n     * @dev set the multitoken that this pool will mint new tokens on. Must be a controller of the multitoken\\n     */\\n    function setMultiToken(address _multiTokenAddress) external override {\\n        require(\\n            poolData.controllers[msg.sender] =\\n                true ||\\n                msg.sender == poolData.governor,\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n        poolData.multitoken = _multiTokenAddress;\\n    }\\n\\n    /**\\n     * @dev set the AMM swap helper that gets token prices\\n     */\\n    function setSwapHelper(address _swapHelperAddress) external override {\\n        require(\\n            poolData.controllers[msg.sender] =\\n                true ||\\n                msg.sender == poolData.governor,\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n        poolData.swapHelper = _swapHelperAddress;\\n    }\\n\\n    /**\\n     * @dev mint the genesis gems earned by the pools creator and funder\\n     */\\n    function mintGenesisGems(address _creatorAddress, address _funderAddress)\\n        external\\n        override\\n    {\\n        // security checks for this method are in the library - this\\n        // method  may only be  called one time per new pool creation\\n        poolData.mintGenesisGems(_creatorAddress, _funderAddress);\\n    }\\n\\n    /**\\n     * @dev create a single claim with given timeframe\\n     */\\n    function createClaim(uint256 _timeframe) external payable override {\\n        poolData.createClaims(_timeframe, 1);\\n    }\\n\\n    /**\\n     * @dev create multiple claims with given timeframe\\n     */\\n    function createClaims(uint256 _timeframe, uint256 _count)\\n        external\\n        payable\\n        override\\n    {\\n        poolData.createClaims(_timeframe, _count);\\n    }\\n\\n    /**\\n     * @dev purchase gems\\n     */\\n    function purchaseGems(uint256 _count) external payable override {\\n        poolData.purchaseGems(msg.sender, msg.value, _count);\\n    }\\n\\n    /**\\n     * @dev create a claim using a erc20 token\\n     */\\n    function createERC20Claim(address _erc20TokenAddress, uint256 _tokenAmount)\\n        external\\n        override\\n    {\\n        poolData.createERC20Claims(_erc20TokenAddress, _tokenAmount, 1);\\n    }\\n\\n    /**\\n     * @dev create a claim using a erc20 token\\n     */\\n    function createERC20Claims(\\n        address _erc20TokenAddress,\\n        uint256 _tokenAmount,\\n        uint256 _count\\n    ) external override {\\n        poolData.createERC20Claims(_erc20TokenAddress, _tokenAmount, _count);\\n    }\\n\\n    /**\\n     * @dev collect an open claim (take custody of the funds the claim is redeemable for and maybe a gem too)\\n     */\\n    function collectClaim(uint256 _claimHash, bool _requireMature)\\n        external\\n        override\\n    {\\n        poolData.collectClaim(_claimHash, _requireMature);\\n    }\\n\\n    /**\\n     * @dev The maximum flash loan amount - 90% of available funds\\n     */\\n    function maxFlashLoan(address tokenAddress)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        // if the token address is zero then get the FTM balance\\n        // other wise get the token balance of the given token address\\n        return\\n            tokenAddress == address(0)\\n                ? address(this).balance\\n                : IERC20(tokenAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev The flash loan fee - 0.1% of borrowed funds\\n     */\\n    function flashFee(address token, uint256 amount)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        // get hash of flash fee key using token address\\n        uint256 flashFeeHash = uint256(\\n            keccak256(abi.encodePacked(\\\"flash_loan\\\", address(token)))\\n        );\\n        // get the flash fee from the storage\\n        uint256 feeDiv = INFTGemFeeManager(poolData.feeTracker).fee(\\n            flashFeeHash\\n        );\\n        // if the flash fee is not set, get the default fee\\n        if (feeDiv == 0) {\\n            flashFeeHash = uint256(keccak256(abi.encodePacked(\\\"flash_loan\\\")));\\n            feeDiv = INFTGemFeeManager(poolData.feeTracker).fee(flashFeeHash);\\n        }\\n        // if no default fee, set the fee to 10000 (0.01%)\\n        if (feeDiv == 0) {\\n            feeDiv = 10000;\\n        }\\n        return amount / feeDiv;\\n    }\\n\\n    /**\\n     * @dev Perform a flash loan (borrow tokens from the controller and return them after a certain time)\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external override returns (bool) {\\n        // get the fee of the flash loan\\n        uint256 fee = flashFee(token, amount);\\n\\n        // get the receiver's address\\n        address receiverAddress = address(receiver);\\n\\n        // no token address means we are sending FTM\\n        if (token == address(0)) {\\n            payable(receiverAddress).transfer(amount);\\n        } else {\\n            // else we are sending erc20 tokens\\n            IERC20(token).transfer(receiverAddress, amount);\\n        }\\n\\n        // get the balance of the lender - base token if address is 0\\n        // or erc20 token if address is not 0\\n        uint256 initialBalance = token == address(0)\\n            ? address(this).balance\\n            : IERC20(token).balanceOf(address(this));\\n        // create success callback hash\\n        bytes32 callbackSuccess = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n        // call the flash loan callback\\n        require(\\n            receiver.onFlashLoan(msg.sender, token, amount, fee, data) ==\\n                callbackSuccess,\\n            \\\"FlashMinter: Callback failed\\\"\\n        );\\n\\n        // check if the flash loan is finished\\n        // first we get the balance of the lender\\n        uint256 _allowance = address(this).balance;\\n        if (token != address(0)) {\\n            // if the token is erc20 we need\\n            // to get the allowance of the token\\n            _allowance = IERC20(token).allowance(\\n                address(receiver),\\n                address(this)\\n            );\\n        } else {\\n            // if the token is FTM we check if the\\n            // initia balance is greater than the\\n            // allowance. If it is we set _allowance\\n            // to zero to dissallow the loan. Other\\n            if (initialBalance > _allowance) _allowance = 0;\\n            else _allowance = _allowance - initialBalance;\\n        }\\n\\n        // if the allowance is greater than the loan amount plus\\n        // the fee then we can finish the flash loan\\n        require(\\n            _allowance >= (amount + fee),\\n            \\\"FlashMinter: Repay not approved\\\"\\n        );\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x27c0e610ce2bc9321b8d1690d4bb332a9c1153f9a9d1b4f05bdf2f8647264257\",\"license\":\"MIT\"},\"src/pool/NFTComplexGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../libs/AddressSet.sol\\\";\\n\\nimport \\\"./ComplexPoolLib.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPoolData.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolData.sol\\\";\\n\\ncontract NFTComplexGemPoolData is INFTComplexGemPoolData {\\n    using AddressSet for AddressSet.Set;\\n    using ComplexPoolLib for ComplexPoolLib.ComplexPoolData;\\n\\n    ComplexPoolLib.ComplexPoolData internal poolData;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            poolData.controllers[msg.sender] == true ||\\n                msg.sender == poolData.governor ||\\n                address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() {\\n        poolData.controllers[msg.sender] = true;\\n        poolData.controllers[tx.origin] = true;\\n    }\\n\\n    /**\\n     * @dev all the tokenhashes (both claim and gem) for this pool\\n     */\\n    function tokenHashes() external view override returns (uint256[] memory) {\\n        return poolData.tokenHashes;\\n    }\\n\\n    /**\\n     * @dev set all the token hashes for this pool\\n     */\\n    function setTokenHashes(uint256[] memory _tokenHashes)\\n        external\\n        override\\n        onlyController\\n    {\\n        poolData.tokenHashes = _tokenHashes;\\n    }\\n\\n    /**\\n     * @dev The symbol for this pool / NFT\\n     */\\n    function symbol() external view override returns (string memory) {\\n        return poolData.symbol;\\n    }\\n\\n    /**\\n     * @dev The ether price for this pool / NFT\\n     */\\n    function ethPrice() external view override returns (uint256) {\\n        return poolData.ethPrice;\\n    }\\n\\n    /**\\n     * @dev max allowable quantity per claim\\n     */\\n    function maxQuantityPerClaim() external view override returns (uint256) {\\n        return poolData.maxQuantityPerClaim;\\n    }\\n\\n    /**\\n     * @dev max claims that can be made on this NFT on any given account\\n     */\\n    function maxClaimsPerAccount() external view override returns (uint256) {\\n        return poolData.maxClaimsPerAccount;\\n    }\\n\\n    /**\\n     * @dev update max quantity per claim\\n     */\\n    function setMaxQuantityPerClaim(uint256 _maxQuantityPerClaim)\\n        external\\n        override\\n        onlyController\\n    {\\n        poolData.maxQuantityPerClaim = _maxQuantityPerClaim;\\n    }\\n\\n    /**\\n     * @dev update max claims that can be made on this NFT\\n     */\\n    function setMaxClaimsPerAccount(uint256 _maxClaimsPerAccount)\\n        external\\n        override\\n        onlyController\\n    {\\n        poolData.maxClaimsPerAccount = _maxClaimsPerAccount;\\n    }\\n\\n    /**\\n     * @dev returns if pool allows purchase\\n     */\\n    function allowPurchase() external view override returns (bool) {\\n        return poolData.allowPurchase;\\n    }\\n\\n    /**\\n     * @dev set whether pool allows purchase\\n     */\\n    function setAllowPurchase(bool _allowPurchase)\\n        external\\n        override\\n        onlyController\\n    {\\n        poolData.allowPurchase = _allowPurchase;\\n    }\\n\\n    /**\\n     * @dev is pool enabled (taking claim requests)\\n     */\\n    function enabled() external view override returns (bool) {\\n        return poolData.enabled;\\n    }\\n\\n    /**\\n     * @dev set the enabled status of this pool\\n     */\\n    function setEnabled(bool _enabled) external override onlyController {\\n        poolData.enabled = _enabled;\\n    }\\n\\n    /**\\n     * @dev return the appreciation curve of this pool.\\n     */\\n    function priceIncrementType()\\n        external\\n        view\\n        override\\n        returns (PriceIncrementType)\\n    {\\n        return poolData.priceIncrementType;\\n    }\\n\\n    /**\\n     * @dev set the appreciation curve of this pool.\\n     */\\n    function setPriceIncrementType(PriceIncrementType _incrementType)\\n        external\\n        override\\n        onlyController\\n    {\\n        poolData.priceIncrementType = _incrementType;\\n    }\\n\\n    /**\\n     * @dev return the number of claims made thus far\\n     */\\n    function claimedCount() external view override returns (uint256) {\\n        return poolData.nextClaimIdVal;\\n    }\\n\\n    /**\\n     * @dev return the number of gems made thus far\\n     */\\n    function mintedCount() external view override returns (uint256) {\\n        return poolData.nextGemIdVal;\\n    }\\n\\n    /**\\n     * @dev the total amopunt of staked eth in this pool\\n     */\\n    function totalStakedEth() external view override returns (uint256) {\\n        return poolData.totalStakedEth;\\n    }\\n\\n    /**\\n     * @dev get token type of hash - 1 is for claim, 2 is for gem\\n     */\\n    function tokenType(uint256 _tokenHash)\\n        external\\n        view\\n        override\\n        returns (INFTGemMultiToken.TokenType)\\n    {\\n        return poolData.tokenTypes[_tokenHash];\\n    }\\n\\n    /**\\n     * @dev get the claim hash of the gem\\n     */\\n    function gemClaimHash(uint256 _claimHash)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return poolData.gemClaims[_claimHash];\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function tokenId(uint256 _tokenHash)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return poolData.tokenIds[_tokenHash];\\n    }\\n\\n    /**\\n     * @dev returns a count of all token hashes\\n     */\\n    function allTokenHashesLength() external view override returns (uint256) {\\n        return poolData.tokenHashes.length;\\n    }\\n\\n    /**\\n     * @dev get the token hash at index\\n     */\\n    function allTokenHashes(uint256 ndx)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return poolData.tokenHashes[ndx];\\n    }\\n\\n    /**\\n     * @dev return the next claim hash\\n     */\\n    function nextClaimHash() external view override returns (uint256) {\\n        return poolData.nextClaimHash();\\n    }\\n\\n    /**\\n     * @dev return the next gem hash\\n     */\\n    function nextGemHash() external view override returns (uint256) {\\n        return poolData.nextGemHash();\\n    }\\n\\n    /**\\n     * @dev return the next claim id\\n     */\\n    function nextClaimId() external view override returns (uint256) {\\n        return poolData.nextClaimIdVal;\\n    }\\n\\n    /**\\n     * @dev return the next gem id\\n     */\\n    function nextGemId() external view override returns (uint256) {\\n        return poolData.nextGemIdVal;\\n    }\\n\\n    /**\\n     * @dev return the count of allowed tokens\\n     */\\n    function allowedTokensLength() external view override returns (uint256) {\\n        return poolData.allowedTokens.count();\\n    }\\n\\n    /**\\n     * @dev the allowed token address at index\\n     */\\n    function allowedTokens(uint256 _index)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return poolData.allowedTokens.keyAtIndex(_index);\\n    }\\n\\n    /**\\n     * @dev add an allowed token to the pool\\n     */\\n    function addAllowedToken(address _tokenAddress)\\n        external\\n        override\\n        onlyController\\n    {\\n        poolData.allowedTokens.insert(_tokenAddress);\\n    }\\n\\n    /**\\n     * @dev add an allowed token to the pool\\n     */\\n    function removeAllowedToken(address _tokenAddress)\\n        external\\n        override\\n        onlyController\\n    {\\n        poolData.allowedTokens.remove(_tokenAddress);\\n    }\\n\\n    /**\\n     * @dev is the token in the allowed tokens list\\n     */\\n    function isTokenAllowed(address _tokenAddress)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return poolData.allowedTokens.exists(_tokenAddress);\\n    }\\n\\n    /**\\n     * @dev the claim amount for the given claim id\\n     */\\n    function claimAmount(uint256 _claimHash)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return poolData.claimAmount(_claimHash);\\n    }\\n\\n    /**\\n     * @dev the claim quantity (count of gems staked) for the given claim id\\n     */\\n    function claimQuantity(uint256 _claimHash)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return poolData.claimQuantity(_claimHash);\\n    }\\n\\n    /**\\n     * @dev the lock time for this claim. once past lock time a gema is minted\\n     */\\n    function claimUnlockTime(uint256 _claimHash)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return poolData.claimUnlockTime(_claimHash);\\n    }\\n\\n    /**\\n     * @dev claim token amount if paid using erc20\\n     */\\n    function claimTokenAmount(uint256 _claimHash)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return poolData.claimTokenAmount(_claimHash);\\n    }\\n\\n    /**\\n     * @dev the staked token if staking with erc20\\n     */\\n    function stakedToken(uint256 _claimHash)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return poolData.stakedToken(_claimHash);\\n    }\\n\\n    /**\\n     * @dev set market visibility\\n     */\\n    function setVisible(bool _visible) external override onlyController {\\n        poolData.visible = _visible;\\n    }\\n\\n    /**\\n     * @dev set market visibility\\n     */\\n    function visible() external view override returns (bool) {\\n        return poolData.visible;\\n    }\\n\\n    /**\\n     * @dev set category category\\n     */\\n    function setCategory(uint256 _category) external override onlyController {\\n        poolData.category = _category;\\n    }\\n\\n    /**\\n     * @dev get market category\\n     */\\n    function category() external view override returns (uint256) {\\n        return poolData.category;\\n    }\\n\\n    /**\\n     * @dev set description\\n     */\\n    function setDescription(string memory desc)\\n        external\\n        override\\n        onlyController\\n    {\\n        poolData.description = desc;\\n    }\\n\\n    /**\\n     * @dev get description\\n     */\\n    function description() external view override returns (string memory) {\\n        return poolData.description;\\n    }\\n\\n    /**\\n     * @dev set validate erc20 token against AMM\\n     */\\n    function setValidateErc20(bool) external override onlyController {\\n        poolData.validateerc20 = true;\\n    }\\n\\n    /**\\n     * @dev get validate erc20 token against AMM\\n     */\\n    function validateErc20() external view override returns (bool) {\\n        return poolData.validateerc20;\\n    }\\n\\n    /**\\n     * @dev add an input requirement for this token\\n     */\\n    function addInputRequirement(\\n        address _tokenAddress,\\n        address _poolAddress,\\n        INFTComplexGemPool.RequirementType _inputType,\\n        uint256 _tokenId,\\n        uint256 _minAmount,\\n        bool _takeCustody,\\n        bool _burn,\\n        bool _exactAmount\\n    ) external override {\\n        poolData.addInputRequirement(\\n            _tokenAddress,\\n            _poolAddress,\\n            _inputType,\\n            _tokenId,\\n            _minAmount,\\n            _takeCustody,\\n            _burn,\\n            _exactAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev add an input requirement for this token\\n     */\\n    function updateInputRequirement(\\n        uint256 _index,\\n        address _tokenAddress,\\n        address _poolAddress,\\n        INFTComplexGemPool.RequirementType _inputType,\\n        uint256 _tokenId,\\n        uint256 _minAmount,\\n        bool _takeCustody,\\n        bool _burn,\\n        bool _exactAmount\\n    ) external override {\\n        poolData.updateInputRequirement(\\n            _index,\\n            _tokenAddress,\\n            _poolAddress,\\n            _inputType,\\n            _tokenId,\\n            _minAmount,\\n            _takeCustody,\\n            _burn,\\n            _exactAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev all Input Requirements Length\\n     */\\n    function allInputRequirementsLength()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return poolData.allInputRequirementsLength();\\n    }\\n\\n    /**\\n     * @dev all Input Requirements at element\\n     */\\n    function allInputRequirements(uint256 _index)\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            INFTComplexGemPool.RequirementType,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        return poolData.allInputRequirements(_index);\\n    }\\n\\n    /**\\n     * @dev add an allowed token source\\n     */\\n    function addAllowedTokenSource(address _allowedToken) external override {\\n        if (!poolData.allowedTokenSources.exists(_allowedToken)) {\\n            poolData.allowedTokenSources.insert(_allowedToken);\\n        }\\n    }\\n\\n    /**\\n     * @dev remove an allowed token source\\n     */\\n    function removeAllowedTokenSource(address _allowedToken) external override {\\n        if (poolData.allowedTokenSources.exists(_allowedToken)) {\\n            poolData.allowedTokenSources.remove(_allowedToken);\\n        }\\n    }\\n\\n    /**\\n     * @dev returns an array of all allowed token sources\\n     */\\n    function allowedTokenSources()\\n        external\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return poolData.allowedTokenSources.keyList;\\n    }\\n\\n    /**\\n     * @dev delegate proxy method for multitoken allow\\n     */\\n    function proxies(address) external view returns (address) {\\n        return address(this);\\n    }\\n\\n    /**\\n     * @dev these settings defines how the pool behaves\\n     */\\n    function settings()\\n        external\\n        view\\n        override\\n        returns (\\n            string memory,\\n            string memory,\\n            string memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            poolData.symbol,\\n            poolData.name,\\n            poolData.description,\\n            poolData.category,\\n            poolData.ethPrice,\\n            poolData.minTime,\\n            poolData.maxTime,\\n            poolData.diffstep,\\n            poolData.maxClaims,\\n            poolData.maxQuantityPerClaim,\\n            poolData.maxClaimsPerAccount\\n        );\\n    }\\n\\n    /**\\n     * @dev these stats reflect the current pool state\\n     */\\n    function stats()\\n        external\\n        view\\n        override\\n        returns (\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            poolData.visible,\\n            poolData.nextClaimIdVal,\\n            poolData.nextGemIdVal,\\n            poolData.totalStakedEth,\\n            poolData.nextClaimHash(),\\n            poolData.nextGemHash(),\\n            poolData.nextClaimIdVal,\\n            poolData.nextGemIdVal\\n        );\\n    }\\n\\n    /**\\n     * @dev return the claim details for the given claim hash\\n     */\\n    function claim(uint256 claimHash)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256\\n        )\\n    {\\n        return (\\n            poolData.claimAmount(claimHash),\\n            poolData.claimQuantity(claimHash),\\n            poolData.claimUnlockTime(claimHash),\\n            poolData.claimTokenAmount(claimHash),\\n            poolData.stakedToken(claimHash),\\n            poolData.nextClaimIdVal\\n        );\\n    }\\n\\n    /**\\n     * @dev return the token data for the given hash\\n     */\\n    function token(uint256 _tokenHash)\\n        external\\n        view\\n        override\\n        returns (\\n            INFTGemMultiToken.TokenType,\\n            uint256,\\n            address\\n        )\\n    {\\n        return (\\n            poolData.tokenTypes[_tokenHash],\\n            poolData.tokenIds[_tokenHash],\\n            poolData.tokenSources[_tokenHash]\\n        );\\n    }\\n\\n    /**\\n     * @dev import the legacy gem\\n     */\\n    function importLegacyGem(\\n        address _poolAddress,\\n        address _legacyToken,\\n        uint256 _tokenHash,\\n        address _recipient\\n    ) external override {\\n        // this method is callable by anyone - this is used to import historical\\n        // gems into the new contracts. A gem can only be imported in once\\n        // per source\\n        require(_tokenHash > 0, \\\"INVALID_TOKENHASH\\\");\\n        require(_poolAddress > address(0), \\\"INVALID_POOL\\\");\\n        require(_legacyToken > address(0), \\\"INVALID_TOKEN\\\");\\n        require(_recipient > address(0), \\\"INVALID_RECIPIENT\\\");\\n        require(\\n            poolData.allowedTokenSources.exists(_legacyToken) == true,\\n            \\\"INVALID_TOKENSOURCE\\\"\\n        );\\n        require(\\n            poolData.importedLegacyToken[_tokenHash] == false,\\n            \\\"ALREADY_IMPORTED\\\"\\n        );\\n\\n        bytes32 importedSymHash = keccak256(\\n            abi.encodePacked(INFTGemPoolData(_poolAddress).symbol())\\n        );\\n        bytes32 poolSymHash = keccak256(abi.encodePacked(poolData.symbol));\\n        require(importedSymHash == poolSymHash, \\\"INVALID_POOLHASH\\\");\\n\\n        INFTGemMultiToken.TokenType importTokenType = INFTGemPoolData(\\n            _poolAddress\\n        ).tokenType(_tokenHash);\\n        require(\\n            importTokenType == INFTGemMultiToken.TokenType.GEM,\\n            \\\"INVALID_TOKENTYPE\\\"\\n        );\\n\\n        uint256 quantity = IERC1155(_legacyToken).balanceOf(\\n            _recipient,\\n            _tokenHash\\n        );\\n        uint256 importTokenId = INFTGemPoolData(_poolAddress).tokenId(\\n            _tokenHash\\n        );\\n\\n        if (quantity > 0) {\\n            INFTGemMultiToken(poolData.multitoken).mint(\\n                _recipient,\\n                _tokenHash,\\n                quantity\\n            );\\n            INFTGemMultiToken(poolData.multitoken).setTokenData(\\n                _tokenHash,\\n                INFTGemMultiToken.TokenType.GEM,\\n                address(this)\\n            );\\n\\n            poolData.tokenTypes[_tokenHash] = INFTGemMultiToken.TokenType.GEM;\\n            poolData.tokenIds[_tokenHash] = importTokenId;\\n            poolData.tokenSources[_tokenHash] = _legacyToken;\\n            poolData.importedLegacyToken[_tokenHash] = true;\\n\\n            emit NFTGemImported(\\n                msg.sender,\\n                address(this),\\n                _poolAddress,\\n                _legacyToken,\\n                _tokenHash,\\n                quantity\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev returns if legacy gem with given hash is imported\\n     */\\n    function isLegacyGemImported(uint256 _tokenhash)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return poolData.importedLegacyToken[_tokenhash];\\n    }\\n\\n    /**\\n     * @dev set the next claim and gem ids\\n     */\\n    function setNextIds(uint256 _nextClaimId, uint256 _nextGemId)\\n        external\\n        override\\n        onlyController\\n    {\\n        poolData.nextClaimIdVal = _nextClaimId;\\n        poolData.nextGemIdVal = _nextGemId;\\n    }\\n}\\n\",\"keccak256\":\"0x17c7c7f71896a76730e520a5c453cba602c445ee2d2c8a278f4a8f651aba9797\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80635e6fe72a116100505780635e6fe72a146100aa57806367275aed146100bf5780638514d358146100d257610067565b80631ff77f161461006c5780632b69fa1014610095575b600080fd5b61007f61007a36600461065b565b6100e5565b60405161008c91906106bb565b60405180910390f35b61009d61013c565b60405161008c91906106cf565b6100b261019e565b60405161008c91906108ff565b61007f6100cd36600461065b565b6101a4565b61007f6100e03660046105a8565b6101bf565b600060018281548110610121577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b6060600180548060200260200160405190810160405280929190818152602001828054801561019457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610176575b5050505050905090565b60015490565b6000908152602081905260409020546001600160a01b031690565b600080896040516020016101d3919061069f565b60408051601f1981840301815291815281516020928301206000818152928390529120549091506001600160a01b0316156102295760405162461bcd60e51b81526004016102209061085a565b60405180910390fd5b876102465760405162461bcd60e51b8152600401610220906107b5565b866102635760405162461bcd60e51b815260040161022090610891565b846102805760405162461bcd60e51b8152600401610220906107ec565b600060405180602001610292906104fe565b601f1982820381018352601f9091011660405290506102b360008383610484565b6040517fa7fc7a070000000000000000000000000000000000000000000000000000000081529093506001600160a01b0384169063a7fc7a07906102fb908f906004016106bb565b600060405180830381600087803b15801561031557600080fd5b505af1158015610329573d6000803e3d6000fd5b50506040517fd9a3f9bb0000000000000000000000000000000000000000000000000000000081526001600160a01b038616925063d9a3f9bb9150610380908e908e908e908e908e908e908e908e9060040161071c565b600060405180830381600087803b15801561039a57600080fd5b505af11580156103ae573d6000803e3d6000fd5b50505060008381526020819052604080822080546001600160a01b0388167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216811790925560018054808201825594527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690930180549093168117909255519091507f39edc680fea25684123932cc30f03ee17ba6966438526d7569cc7d6bb4e762e69061046d908e908e908e908e908e908e908e908e9061071c565b60405180910390a250509998505050505050505050565b600080844710156104a75760405162461bcd60e51b8152600401610220906108c8565b82516104c55760405162461bcd60e51b815260040161022090610780565b8383516020850187f590506001600160a01b0381166104f65760405162461bcd60e51b815260040161022090610823565b949350505050565b614c598061096883390190565b80356001600160a01b038116811461052257600080fd5b919050565b600082601f830112610537578081fd5b813567ffffffffffffffff8082111561055257610552610938565b6040516020601f19601f850116820101818110838211171561057657610576610938565b60405282815284830160200186101561058d578384fd5b82602086016020830137918201602001929092529392505050565b60008060008060008060008060006101208a8c0312156105c6578485fd5b6105cf8a61050b565b985060208a013567ffffffffffffffff808211156105eb578687fd5b6105f78d838e01610527565b995060408c013591508082111561060c578687fd5b506106198c828d01610527565b97505060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a0135915061064c6101008b0161050b565b90509295985092959850929598565b60006020828403121561066c578081fd5b5035919050565b6000815180845261068b816020860160208601610908565b601f01601f19169290920160200192915050565b600082516106b1818460208701610908565b9190910192915050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156107105783516001600160a01b0316835292840192918401916001016106eb565b50909695505050505050565b60006101008083526107308184018c610673565b90508281036020840152610744818b610673565b604084019990995250506060810195909552608085019390935260a084019190915260c08301526001600160a01b031660e09091015292915050565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b6020808252600d908201527f494e56414c49445f505249434500000000000000000000000000000000000000604082015260600190565b60208082526017908201527f494e56414c49445f444946464943554c54595f53544550000000000000000000604082015260600190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252600e908201527f47454d504f4f4c5f455849535453000000000000000000000000000000000000604082015260600190565b60208082526010908201527f494e56414c49445f4d494e5f54494d4500000000000000000000000000000000604082015260600190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b90815260200190565b60005b8381101561092357818101518382015260200161090b565b83811115610932576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe608060405234801561001057600080fd5b50336000818152602460205260408082208054600160ff19918216811783553285529284208054821684179055938352805490931617909155614c0090819061005990396000f3fe6080604052600436106105735760003560e01c8063a0021cf1116102ca578063d3d0839711610179578063e6c3b1f6116100d6578063f8d1e9301161008a578063f9eaee0d1161006f578063f9eaee0d14610e87578063fd31a0a514610ea7578063ff186b2e14610ec757610573565b8063f8d1e93014610e31578063f9c9c27614610e5357610573565b8063ef430aa6116100bb578063ef430aa614610de7578063f23a6e6114610dfc578063f4fde0d314610e1c57610573565b8063e6c3b1f614610da7578063edcf2d5714610dc757610573565b8063d9d98ce41161012d578063e06174e411610112578063e06174e414610d46578063e1c28bef14610d72578063e5d2ce2f14610d8757610573565b8063d9d98ce414610d06578063df1fe1a914610d2657610573565b8063d73cd47f1161015e578063d73cd47f14610c9d578063d80528ae14610cbd578063d9a3f9bb14610ce657610573565b8063d3d0839714610c68578063d43e646014610c7d57610573565b8063c42cf53511610227578063c80c0613116101db578063cf721b15116101c0578063cf721b1514610bf3578063d104f8f514610c28578063d31674db14610c4857610573565b8063c80c061314610bf3578063cdc8a8ab14610c0857610573565b8063c54a92421161020c578063c54a924214610b93578063c5e01a5c14610bb3578063c65eff9614610bd357610573565b8063c42cf53514610b53578063c455279114610b7357610573565b8063b3947a941161027e578063b788e4e911610263578063b788e4e914610b11578063bc197c8114610b26578063c08fa1a414610a5257610573565b8063b3947a9414610ad1578063b429afeb14610af157610573565b8063a901c474116102af578063a901c47414610a87578063af6a6d7914610aa7578063b385a50a14610abc57610573565b8063a0021cf114610a52578063a7fc7a0714610a6757610573565b80635d2e0dd4116104265780637f2e8f0c1161038357806390469a9d116103375780639277a1851161031c5780639277a185146109fd5780639593556014610a1d57806395d89b4114610a3d57610573565b806390469a9d146109bd57806390c3f38f146109dd57610573565b80638407b6c5116103685780638407b6c514610968578063870114f6146109885780638a09871b146109a857610573565b80637f2e8f0c14610928578063829775511461094857610573565b80636b6201da116103da5780637ae7815d116103bf5780637ae7815d146108c65780637c07bc7a146108e65780637dcb0e5f1461090857610573565b80636b6201da146108915780637284e416146108a457610573565b80635fb930911161040b5780635fb930911461083e5780636100c34314610851578063613255ab1461087157610573565b80635d2e0dd4146107fc5780635e5f2e261461081157610573565b8063336b9efb116104d457806344f0877c116104885780634e04cdc71161046d5780634e04cdc7146107b2578063504cdacf146107c75780635cffe9de146107dc57610573565b806344f0877c1461077d5780634565e5ef1461079d57610573565b8063392732b1116104b9578063392732b114610728578063407dff161461073b5780634178617f1461075d57610573565b8063336b9efb146106e1578063379607f5146106f657610573565b8063238dafe01161052b5780632449ef51116105105780632449ef511461068157806326ff3152146106a1578063328d8f72146106c157610573565b8063238dafe01461063f57806323b221a01461065457610573565b80631284650d1161055c5780631284650d146105dd57806315523ab9146105ff5780632360cf5e1461061f57610573565b806301ffc9a714610578578063044215c6146105ae575b600080fd5b34801561058457600080fd5b50610598610593366004613e08565b610edc565b6040516105a5919061446b565b60405180910390f35b3480156105ba57600080fd5b506105ce6105c936600461404c565b610f38565b6040516105a5939291906144ee565b3480156105e957600080fd5b506105fd6105f8366004613a23565b610f6e565b005b34801561060b57600080fd5b5061059861061a36600461404c565b610f8c565b34801561062b57600080fd5b506105fd61063a366004614128565b610fa0565b34801561064b57600080fd5b50610598611007565b34801561066057600080fd5b5061067461066f36600461404c565b611016565b6040516105a5919061488b565b34801561068d57600080fd5b506105fd61069c366004613a62565b6110bb565b3480156106ad57600080fd5b506105fd6106bc366004613a23565b611144565b3480156106cd57600080fd5b506105fd6106dc366004613db8565b61115e565b3480156106ed57600080fd5b506106746111cd565b34801561070257600080fd5b5061071661071136600461404c565b6111d3565b6040516105a596959493929190614a07565b6105fd610736366004614128565b61150b565b34801561074757600080fd5b50610750611560565b6040516105a591906144db565b34801561076957600080fd5b506105fd610778366004613a23565b611570565b34801561078957600080fd5b506105fd610798366004613db8565b6115ce565b3480156107a957600080fd5b50610674611658565b3480156107be57600080fd5b50610598611669565b3480156107d357600080fd5b50610674611677565b3480156107e857600080fd5b506105986107f7366004613e48565b61167d565b34801561080857600080fd5b50610598611a09565b34801561081d57600080fd5b5061083161082c36600461404c565b611a12565b6040516105a591906142ab565b6105fd61084c36600461404c565b611a1f565b34801561085d57600080fd5b506105fd61086c366004613d49565b611aa9565b34801561087d57600080fd5b5061067461088c366004613a23565b611b35565b6105fd61089f36600461404c565b611be7565b3480156108b057600080fd5b506108b9611c3d565b6040516105a59190614518565b3480156108d257600080fd5b506105fd6108e1366004613db8565b611cd2565b3480156108f257600080fd5b506108fb611d35565b6040516105a59190614433565b34801561091457600080fd5b5061067461092336600461404c565b611d8f565b34801561093457600080fd5b5061067461094336600461404c565b611da1565b34801561095457600080fd5b5061067461096336600461404c565b611df6565b34801561097457600080fd5b506105fd610983366004613b44565b611e08565b34801561099457600080fd5b506105fd6109a3366004614104565b611ea3565b3480156109b457600080fd5b50610674611ef8565b3480156109c957600080fd5b506105fd6109d8366004613a23565b611f9b565b3480156109e957600080fd5b506105fd6109f8366004613f1a565b611ff9565b348015610a0957600080fd5b506105fd610a18366004613a23565b612063565b348015610a2957600080fd5b50610674610a3836600461404c565b6120ac565b348015610a4957600080fd5b506108b9612101565b348015610a5e57600080fd5b50610674612113565b348015610a7357600080fd5b506105fd610a82366004613a23565b612119565b348015610a9357600080fd5b50610674610aa236600461404c565b61217b565b348015610ab357600080fd5b506105986121d0565b348015610ac857600080fd5b506106746121d9565b348015610add57600080fd5b506105fd610aec366004613c65565b6121df565b348015610afd57600080fd5b50610598610b0c366004613a23565b61275f565b348015610b1d57600080fd5b5061067461277d565b348015610b3257600080fd5b50610b46610b41366004613a9a565b6127d0565b6040516105a591906144ae565b348015610b5f57600080fd5b506105fd610b6e366004613a23565b6127fa565b348015610b7f57600080fd5b50610831610b8e366004613a23565b612843565b348015610b9f57600080fd5b506105fd610bae366004613ee2565b612848565b348015610bbf57600080fd5b50610831610bce36600461404c565b6128f1565b348015610bdf57600080fd5b506105fd610bee36600461404c565b612996565b348015610bff57600080fd5b506106746129ee565b348015610c1457600080fd5b506105fd610c23366004613d7d565b6129f4565b348015610c3457600080fd5b506105fd610c43366004613a23565b612a5a565b348015610c5457600080fd5b50610674610c6336600461404c565b612aa3565b348015610c7457600080fd5b50610674612ada565b348015610c8957600080fd5b506105fd610c98366004613db8565b612b2d565b348015610ca957600080fd5b506105fd610cb8366004613a23565b612b93565b348015610cc957600080fd5b50610cd2612bdc565b6040516105a5989796959493929190614476565b348015610cf257600080fd5b506105fd610d01366004613fb7565b612d60565b348015610d1257600080fd5b50610674610d21366004613d1e565b612e55565b348015610d3257600080fd5b506105fd610d41366004614064565b613004565b348015610d5257600080fd5b50610d5b6130a2565b6040516105a59b9a9998979695949392919061452b565b348015610d7e57600080fd5b506105fd6132b9565b348015610d9357600080fd5b506105fd610da236600461404c565b613310565b348015610db357600080fd5b50610750610dc236600461404c565b613368565b348015610dd357600080fd5b506105fd610de2366004613d1e565b61337d565b348015610df357600080fd5b506106746133d5565b348015610e0857600080fd5b50610b46610e17366004613cb7565b6133db565b348015610e2857600080fd5b50610674613405565b348015610e3d57600080fd5b50610e4661340b565b6040516105a591906143e6565b348015610e5f57600080fd5b50610e73610e6e36600461404c565b61346b565b6040516105a59897969594939291906142d9565b348015610e9357600080fd5b50610598610ea2366004613a23565b61351f565b348015610eb357600080fd5b506105fd610ec236600461404c565b61352c565b348015610ed357600080fd5b50610674613584565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e0000000000000000000000000000000000000000000000000000000001480610f325750610f328261358a565b92915050565b6000908152601260209081526040808320546013835281842054601490935292205460ff9092169290916001600160a01b031690565b610f796015826135d4565b15610f8957610f89601582613643565b50565b600090815260208052604090205460ff1690565b3360009081526024602052604090205460ff16151560011480610fcd57506002546001600160a01b031633145b80610fd757503033145b610ffc5760405162461bcd60e51b8152600401610ff390614687565b60405180910390fd5b601991909155601855565b60115462010000900460ff1690565b6040517f01356b6d00000000000000000000000000000000000000000000000000000000815260009073__$8228317518e9daeef1bbbb17c026e269fd$__906301356b6d9061106b9084908690600401614936565b60206040518083038186803b15801561108357600080fd5b505af4158015611097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f329190613df0565b6040517fb9f0527400000000000000000000000000000000000000000000000000000000815273__$8228317518e9daeef1bbbb17c026e269fd$__9063b9f05274906111109060009086908690600401614894565b60006040518083038186803b15801561112857600080fd5b505af415801561113c573d6000803e3d6000fd5b505050505050565b61114f6015826135d4565b610f8957610f896015826137a9565b3360009081526024602052604090205460ff1615156001148061118b57506002546001600160a01b031633145b8061119557503033145b6111b15760405162461bcd60e51b8152600401610ff390614687565b60118054911515620100000262ff000019909216919091179055565b60105490565b600080600080600080600073__$8228317518e9daeef1bbbb17c026e269fd$__6301356b6d9091896040518363ffffffff1660e01b8152600401611218929190614936565b60206040518083038186803b15801561123057600080fd5b505af4158015611244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112689190613df0565b6040517fecd5244e00000000000000000000000000000000000000000000000000000000815273__$8228317518e9daeef1bbbb17c026e269fd$__9063ecd5244e906112bb906000908c90600401614936565b60206040518083038186803b1580156112d357600080fd5b505af41580156112e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130b9190613df0565b6040517fb94677da00000000000000000000000000000000000000000000000000000000815273__$8228317518e9daeef1bbbb17c026e269fd$__9063b94677da9061135e906000908d90600401614936565b60206040518083038186803b15801561137657600080fd5b505af415801561138a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ae9190613df0565b6040517fdc1f0f5300000000000000000000000000000000000000000000000000000000815273__$8228317518e9daeef1bbbb17c026e269fd$__9063dc1f0f5390611401906000908e90600401614936565b60206040518083038186803b15801561141957600080fd5b505af415801561142d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114519190613df0565b6040517f76e455e100000000000000000000000000000000000000000000000000000000815273__$8228317518e9daeef1bbbb17c026e269fd$__906376e455e1906114a4906000908f90600401614936565b60206040518083038186803b1580156114bc57600080fd5b505af41580156114d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f49190613a46565b601954949c939b5091995097509550909350915050565b6040517f80ca2ba600000000000000000000000000000000000000000000000000000000815273__$8228317518e9daeef1bbbb17c026e269fd$__906380ca2ba69061111090600090869086906004016149c4565b6011546301000000900460ff1690565b3360009081526024602052604090205460ff1615156001148061159d57506002546001600160a01b031633145b806115a757503033145b6115c35760405162461bcd60e51b8152600401610ff390614687565b610f896027826137a9565b3360009081526024602052604090205460ff161515600114806115fb57506002546001600160a01b031633145b8061160557503033145b6116215760405162461bcd60e51b8152600401610ff390614687565b60118054911515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909216919091179055565b60006116646027613835565b905090565b601154610100900460ff1690565b601a5490565b60008061168a8686612e55565b9050866001600160a01b0387166116d7576040516001600160a01b0382169087156108fc029088906000818181858888f193505050501580156116d1573d6000803e3d6000fd5b50611772565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0388169063a9059cbb9061171e9084908a906004016143ac565b602060405180830381600087803b15801561173857600080fd5b505af115801561174c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117709190613dd4565b505b60006001600160a01b0388161561181d576040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038916906370a08231906117c89030906004016142ab565b60206040518083038186803b1580156117e057600080fd5b505afa1580156117f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118189190613df0565b61181f565b475b6040517f23e30c8b0000000000000000000000000000000000000000000000000000000081529091507f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd99081906001600160a01b038c16906323e30c8b906118959033908e908e908b908f908f90600401614354565b602060405180830381600087803b1580156118af57600080fd5b505af11580156118c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e79190613df0565b146119045760405162461bcd60e51b8152600401610ff3906145e2565b476001600160a01b038a16156119b2576040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b038b169063dd62ed3e9061195b908e9030906004016142bf565b60206040518083038186803b15801561197357600080fd5b505afa158015611987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ab9190613df0565b90506119cf565b808311156119c2575060006119cf565b6119cc8382614ace565b90505b6119d9858a614a96565b8110156119f85760405162461bcd60e51b8152600401610ff3906147c0565b5060019a9950505050505050505050565b60115460ff1690565b6000610f3260278361383c565b6040517fe5fca79a00000000000000000000000000000000000000000000000000000000815273__$8228317518e9daeef1bbbb17c026e269fd$__9063e5fca79a90611a7690600090339034908790600401614912565b60006040518083038186803b158015611a8e57600080fd5b505af4158015611aa2573d6000803e3d6000fd5b5050505050565b6040517fafeafd9a00000000000000000000000000000000000000000000000000000000815273__$8228317518e9daeef1bbbb17c026e269fd$__9063afeafd9a90611b0090600090879087908790600401614912565b60006040518083038186803b158015611b1857600080fd5b505af4158015611b2c573d6000803e3d6000fd5b50505050505050565b60006001600160a01b03821615611be0576040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038316906370a0823190611b8b9030906004016142ab565b60206040518083038186803b158015611ba357600080fd5b505afa158015611bb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdb9190613df0565b610f32565b5047919050565b6040517f80ca2ba600000000000000000000000000000000000000000000000000000000815273__$8228317518e9daeef1bbbb17c026e269fd$__906380ca2ba690611a769060009085906001906004016149c4565b606060006009018054611c4f90614b15565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7b90614b15565b8015611cc85780601f10611c9d57610100808354040283529160200191611cc8565b820191906000526020600020905b815481529060010190602001808311611cab57829003601f168201915b5050505050905090565b3360009081526024602052604090205460ff16151560011480611cff57506002546001600160a01b031633145b80611d0957503033145b611d255760405162461bcd60e51b8152600401610ff390614687565b506011805460ff19166001179055565b60606000601701805480602002602001604051908101604052809291908181526020018280548015611cc857602002820191906000526020600020905b815481526020019060010190808311611d72575050505050905090565b60009081526013602052604090205490565b6040517fecd5244e00000000000000000000000000000000000000000000000000000000815260009073__$8228317518e9daeef1bbbb17c026e269fd$__9063ecd5244e9061106b9084908690600401614936565b60009081526021602052604090205490565b6040517f212f8bbd00000000000000000000000000000000000000000000000000000000815273__$8228317518e9daeef1bbbb17c026e269fd$__9063212f8bbd90611e69906000908c908c908c908c908c908c908c908c906004016148b3565b60006040518083038186803b158015611e8157600080fd5b505af4158015611e95573d6000803e3d6000fd5b505050505050505050505050565b6040517f48126f4b00000000000000000000000000000000000000000000000000000000815273__$8228317518e9daeef1bbbb17c026e269fd$__906348126f4b9061111090600090869086906004016149ac565b6040517f164cd8c200000000000000000000000000000000000000000000000000000000815260009073__$8228317518e9daeef1bbbb17c026e269fd$__9063164cd8c290611f4b90849060040161488b565b60206040518083038186803b158015611f6357600080fd5b505af4158015611f77573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116649190613df0565b3360009081526024602052604090205460ff16151560011480611fc857506002546001600160a01b031633145b80611fd257503033145b611fee5760405162461bcd60e51b8152600401610ff390614687565b610f89602782613643565b3360009081526024602052604090205460ff1615156001148061202657506002546001600160a01b031633145b8061203057503033145b61204c5760405162461bcd60e51b8152600401610ff390614687565b805161205f90600990602084019061387d565b5050565b336000908152602460205260409020805460ff191660011790556003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6040517fdc1f0f5300000000000000000000000000000000000000000000000000000000815260009073__$8228317518e9daeef1bbbb17c026e269fd$__9063dc1f0f539061106b9084908690600401614936565b606060006007018054611c4f90614b15565b60195490565b3360009081526024602052604090205460ff1615156001148061213b57503033145b6121575760405162461bcd60e51b8152600401610ff390614687565b6001600160a01b03166000908152602460205260409020805460ff19166001179055565b6040517fb94677da00000000000000000000000000000000000000000000000000000000815260009073__$8228317518e9daeef1bbbb17c026e269fd$__9063b94677da9061106b9084908690600401614936565b60065460ff1690565b600f5490565b600082116121ff5760405162461bcd60e51b8152600401610ff390614752565b6001600160a01b0384166122255760405162461bcd60e51b8152600401610ff3906147f7565b6001600160a01b03831661224b5760405162461bcd60e51b8152600401610ff3906145ab565b6001600160a01b0381166122715760405162461bcd60e51b8152600401610ff390614619565b61227c6015846135d4565b151560011461229d5760405162461bcd60e51b8152600401610ff39061471b565b600082815260208052604090205460ff16156122cb5760405162461bcd60e51b8152600401610ff3906146e4565b6000846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561230657600080fd5b505afa15801561231a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123429190810190613f4d565b6040516020016123529190614175565b60408051601f19818403018152908290528051602091820120925060009161237d9160079101614191565b6040516020818303038152906040528051906020012090508082146123b45760405162461bcd60e51b8152600401610ff390614650565b6040517fe6c3b1f60000000000000000000000000000000000000000000000000000000081526000906001600160a01b0388169063e6c3b1f6906123fc90889060040161488b565b60206040518083038186803b15801561241457600080fd5b505afa158015612428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244c9190613efe565b9050600281600281111561247057634e487b7160e01b600052602160045260246000fd5b1461248d5760405162461bcd60e51b8152600401610ff390614789565b6040517efdd58e0000000000000000000000000000000000000000000000000000000081526000906001600160a01b0388169062fdd58e906124d59088908a906004016143ac565b60206040518083038186803b1580156124ed57600080fd5b505afa158015612501573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125259190613df0565b90506000886001600160a01b0316637dcb0e5f886040518263ffffffff1660e01b8152600401612555919061488b565b60206040518083038186803b15801561256d57600080fd5b505afa158015612581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a59190613df0565b90508115612754576001546040517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063156e29f6906125fa9089908b9087906004016143c5565b600060405180830381600087803b15801561261457600080fd5b505af1158015612628573d6000803e3d6000fd5b50506001546040517f7c8810760000000000000000000000000000000000000000000000000000000081526001600160a01b039091169250637c881076915061267a908a9060029030906004016149da565b600060405180830381600087803b15801561269457600080fd5b505af11580156126a8573d6000803e3d6000fd5b50505060008881526012602090815260408083208054600260ff19918216179091556013835281842086905560148352818420805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038f16179055918052918290208054909116600117905551889150309033907ff5b54e798ff7f434ed773aa633e6a9f82ef9ae465e46042e1983f29bf1fd69ea9061274b908e908e908990614330565b60405180910390a45b505050505050505050565b6001600160a01b031660009081526024602052604090205460ff1690565b6040517f33c13e0d00000000000000000000000000000000000000000000000000000000815260009073__$8228317518e9daeef1bbbb17c026e269fd$__906333c13e0d90611f4b90849060040161488b565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b336000908152602460205260409020805460ff191660011790556002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b503090565b3360009081526024602052604090205460ff1615156001148061287557506002546001600160a01b031633145b8061287f57503033145b61289b5760405162461bcd60e51b8152600401610ff390614687565b601180548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff1663010000008360028111156128e957634e487b7160e01b600052602160045260246000fd5b021790555050565b6040517f76e455e100000000000000000000000000000000000000000000000000000000815260009073__$8228317518e9daeef1bbbb17c026e269fd$__906376e455e1906129469084908690600401614936565b60206040518083038186803b15801561295e57600080fd5b505af4158015612972573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f329190613a46565b3360009081526024602052604090205460ff161515600114806129c357506002546001600160a01b031633145b806129cd57503033145b6129e95760405162461bcd60e51b8152600401610ff390614687565b601055565b60185490565b3360009081526024602052604090205460ff16151560011480612a2157506002546001600160a01b031633145b80612a2b57503033145b612a475760405162461bcd60e51b8152600401610ff390614687565b805161205f906017906020840190613901565b336000908152602460205260409020805460ff191660011790556001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000806017018281548110612ac857634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6040517f828c7b7200000000000000000000000000000000000000000000000000000000815260009073__$8228317518e9daeef1bbbb17c026e269fd$__9063828c7b7290611f4b90849060040161488b565b3360009081526024602052604090205460ff16151560011480612b5a57506002546001600160a01b031633145b80612b6457503033145b612b805760405162461bcd60e51b8152600401610ff390614687565b6006805460ff1916911515919091179055565b336000908152602460205260409020805460ff191660011790556004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600654601954601854601a546040517f164cd8c2000000000000000000000000000000000000000000000000000000008152600094859485948594859485948594859460ff90921693909273__$8228317518e9daeef1bbbb17c026e269fd$__9063164cd8c290612c5190889060040161488b565b60206040518083038186803b158015612c6957600080fd5b505af4158015612c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca19190613df0565b6040517f33c13e0d00000000000000000000000000000000000000000000000000000000815273__$8228317518e9daeef1bbbb17c026e269fd$__906333c13e0d90612cf29060009060040161488b565b60206040518083038186803b158015612d0a57600080fd5b505af4158015612d1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d429190613df0565b601954601854969f959e50939c50919a509850965094509092509050565b3360009081526024602052604090205460ff16151560011480612d8d57506002546001600160a01b031633145b80612d9757503033145b612db35760405162461bcd60e51b8152600401610ff390614687565b6000805473ffffffffffffffffffffffffffffffffffffffff1916301790558751612de59060079060208b019061387d565b508651612df99060089060208a019061387d565b50600a869055600b859055600c849055600d839055600e8290556006805460ff191660011790556011805462ff00001916620100001790556001600160a01b03811615612e4b57612e4b6027826137a9565b5050505050505050565b60008083604051602001612e699190614255565b60408051601f198184030181529082905280516020909101206003547f39b37ab00000000000000000000000000000000000000000000000000000000083529092506000916001600160a01b03909116906339b37ab090612ece90859060040161488b565b60206040518083038186803b158015612ee657600080fd5b505afa158015612efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1e9190613df0565b905080612fe757604051602001612f349061422c565b60408051601f198184030181529082905280516020909101206003547f39b37ab00000000000000000000000000000000000000000000000000000000083529093506001600160a01b0316906339b37ab090612f9490859060040161488b565b60206040518083038186803b158015612fac57600080fd5b505afa158015612fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe49190613df0565b90505b80612ff157506127105b612ffb8185614aae565b95945050505050565b6040517f2394dcbf00000000000000000000000000000000000000000000000000000000815273__$8228317518e9daeef1bbbb17c026e269fd$__90632394dcbf90613067906000908d908d908d908d908d908d908d908d908d90600401614944565b60006040518083038186803b15801561307f57600080fd5b505af4158015613093573d6000803e3d6000fd5b50505050505050505050505050565b60608060606000806000806000806000806000600701600060080160006009016000600501546000600a01546000600b01546000600c01546000600d01546000600e01546000600f01546000601001548a80546130fe90614b15565b80601f016020809104026020016040519081016040528092919081815260200182805461312a90614b15565b80156131775780601f1061314c57610100808354040283529160200191613177565b820191906000526020600020905b81548152906001019060200180831161315a57829003601f168201915b50505050509a5089805461318a90614b15565b80601f01602080910402602001604051908101604052809291908181526020018280546131b690614b15565b80156132035780601f106131d857610100808354040283529160200191613203565b820191906000526020600020905b8154815290600101906020018083116131e657829003601f168201915b5050505050995088805461321690614b15565b80601f016020809104026020016040519081016040528092919081815260200182805461324290614b15565b801561328f5780601f106132645761010080835404028352916020019161328f565b820191906000526020600020905b81548152906001019060200180831161327257829003601f168201915b505050505098509a509a509a509a509a509a509a509a509a509a509a50909192939495969798999a565b3360009081526024602052604090205460ff161515600114806132db57503033145b6132f75760405162461bcd60e51b8152600401610ff390614687565b336000908152602460205260409020805460ff19169055565b3360009081526024602052604090205460ff1615156001148061333d57506002546001600160a01b031633145b8061334757503033145b6133635760405162461bcd60e51b8152600401610ff390614687565b600555565b60009081526012602052604090205460ff1690565b6040517fafeafd9a00000000000000000000000000000000000000000000000000000000815273__$8228317518e9daeef1bbbb17c026e269fd$__9063afeafd9a906111109060009086908690600190600401614912565b60055490565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b60175490565b601680546040805160208084028201810190925282815260609390929091830182828015611cc857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613444575050505050905090565b600080600080600080600080600073__$8228317518e9daeef1bbbb17c026e269fd$__635b68e93c90918b6040518363ffffffff1660e01b81526004016134b3929190614936565b6101006040518083038186803b1580156134cc57600080fd5b505af41580156134e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135049190613bda565b97509750975097509750975097509750919395975091939597565b6000610f326027836135d4565b3360009081526024602052604090205460ff1615156001148061355957506002546001600160a01b031633145b8061356357503033145b61357f5760405162461bcd60e51b8152600401610ff390614687565b600f55565b600a5490565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b60018201546000906135e857506000610f32565b6001600160a01b038216600081815260208590526040902054600185018054909190811061362657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316149392505050565b61364d82826135d4565b6136565761205f565b6000600161366384613835565b61366d9190614ace565b6001600160a01b0383166000908152602085905260409020549091508082146137345760008460010183815481106136b557634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835290879052604090912083905560018601805491925082918490811061370457634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b6001600160a01b03831660009081526020859052604081205560018085018054909161375f91614ace565b8154811061377d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916905550505050565b6137b382826135d4565b156137d05760405162461bcd60e51b8152600401610ff39061482e565b60018281018054808301825560008281526020902001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055546138179190614ace565b6001600160a01b039091166000908152602092909252604090912055565b6001015490565b600082600101828154811061386157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169392505050565b82805461388990614b15565b90600052602060002090601f0160209004810192826138ab57600085556138f1565b82601f106138c457805160ff19168380011785556138f1565b828001600101855582156138f1579182015b828111156138f15782518255916020019190600101906138d6565b506138fd92915061393b565b5090565b8280548282559060005260206000209081019282156138f157916020028201828111156138f15782518255916020019190600101906138d6565b5b808211156138fd576000815560010161393c565b600082601f830112613960578081fd5b8135602067ffffffffffffffff82111561397c5761397c614b66565b80820261398a828201614a38565b8381528281019086840183880185018910156139a4578687fd5b8693505b858410156139c65780358352600193909301929184019184016139a8565b50979650505050505050565b600082601f8301126139e2578081fd5b81356139f56139f082614a62565b614a38565b818152846020838601011115613a09578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215613a34578081fd5b8135613a3f81614b9a565b9392505050565b600060208284031215613a57578081fd5b8151613a3f81614b9a565b60008060408385031215613a74578081fd5b8235613a7f81614b9a565b91506020830135613a8f81614b9a565b809150509250929050565b600080600080600060a08688031215613ab1578081fd5b8535613abc81614b9a565b94506020860135613acc81614b9a565b9350604086013567ffffffffffffffff80821115613ae8578283fd5b613af489838a01613950565b94506060880135915080821115613b09578283fd5b613b1589838a01613950565b93506080880135915080821115613b2a578283fd5b50613b37888289016139d2565b9150509295509295909350565b600080600080600080600080610100898b031215613b60578283fd5b8835613b6b81614b9a565b97506020890135613b7b81614b9a565b96506040890135613b8b81614bbd565b9550606089013594506080890135935060a0890135613ba981614baf565b925060c0890135613bb981614baf565b915060e0890135613bc981614baf565b809150509295985092959890939650565b600080600080600080600080610100898b031215613bf6578182fd5b8851613c0181614b9a565b60208a0151909850613c1281614b9a565b60408a0151909750613c2381614bbd565b80965050606089015194506080890151935060a0890151613c4381614baf565b60c08a0151909350613c5481614baf565b60e08a0151909250613bc981614baf565b60008060008060808587031215613c7a578182fd5b8435613c8581614b9a565b93506020850135613c9581614b9a565b9250604085013591506060850135613cac81614b9a565b939692955090935050565b600080600080600060a08688031215613cce578283fd5b8535613cd981614b9a565b94506020860135613ce981614b9a565b93506040860135925060608601359150608086013567ffffffffffffffff811115613d12578182fd5b613b37888289016139d2565b60008060408385031215613d30578182fd5b8235613d3b81614b9a565b946020939093013593505050565b600080600060608486031215613d5d578081fd5b8335613d6881614b9a565b95602085013595506040909401359392505050565b600060208284031215613d8e578081fd5b813567ffffffffffffffff811115613da4578182fd5b613db084828501613950565b949350505050565b600060208284031215613dc9578081fd5b8135613a3f81614baf565b600060208284031215613de5578081fd5b8151613a3f81614baf565b600060208284031215613e01578081fd5b5051919050565b600060208284031215613e19578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114613a3f578182fd5b600080600080600060808688031215613e5f578283fd5b8535613e6a81614b9a565b94506020860135613e7a81614b9a565b935060408601359250606086013567ffffffffffffffff80821115613e9d578283fd5b818801915088601f830112613eb0578283fd5b813581811115613ebe578384fd5b896020828501011115613ecf578384fd5b9699959850939650602001949392505050565b600060208284031215613ef3578081fd5b8135613a3f81614bbd565b600060208284031215613f0f578081fd5b8151613a3f81614bbd565b600060208284031215613f2b578081fd5b813567ffffffffffffffff811115613f41578182fd5b613db0848285016139d2565b600060208284031215613f5e578081fd5b815167ffffffffffffffff811115613f74578182fd5b8201601f81018413613f84578182fd5b8051613f926139f082614a62565b818152856020838501011115613fa6578384fd5b612ffb826020830160208601614ae5565b600080600080600080600080610100898b031215613fd3578182fd5b883567ffffffffffffffff80821115613fea578384fd5b613ff68c838d016139d2565b995060208b013591508082111561400b578384fd5b506140188b828c016139d2565b97505060408901359550606089013594506080890135935060a0890135925060c0890135915060e0890135613bc981614b9a565b60006020828403121561405d578081fd5b5035919050565b60008060008060008060008060006101208a8c031215614082578283fd5b8935985060208a013561409481614b9a565b975060408a01356140a481614b9a565b965060608a01356140b481614bbd565b955060808a0135945060a08a0135935060c08a01356140d281614baf565b925060e08a01356140e281614baf565b91506101008a01356140f381614baf565b809150509295985092959850929598565b60008060408385031215614116578182fd5b823591506020830135613a8f81614baf565b6000806040838503121561413a578182fd5b50508035926020909101359150565b60008151808452614161816020860160208601614ae5565b601f01601f19169290920160200192915050565b60008251614187818460208701614ae5565b9190910192915050565b81546000908190600281046001808316806141ad57607f831692505b60208084108214156141cd57634e487b7160e01b87526022600452602487fd5b8180156141e157600181146141f25761421e565b60ff1986168952848901965061421e565b6141fb8a614a8a565b885b868110156142165781548b8201529085019083016141fd565b505084890196505b509498975050505050505050565b7f666c6173685f6c6f616e000000000000000000000000000000000000000000008152600a0190565b7f666c6173685f6c6f616e00000000000000000000000000000000000000000000815260609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016600a820152601e0190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0389811682528816602082015261010081016142fb88614b7c565b60408201979097526060810195909552608085019390935290151560a0840152151560c0830152151560e09091015292915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001600160a01b03808916835280881660208401525085604083015284606083015260a060808301528260a0830152828460c084013781830160c090810191909152601f909201601f1916010195945050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252825182820181905260009190848201906040850190845b818110156144275783516001600160a01b031683529284019291840191600101614402565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156144275783518352928401929184019160010161444f565b901515815260200190565b9715158852602088019690965260408701949094526060860192909252608085015260a084015260c083015260e08201526101000190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b602081016144e883614b7c565b91905290565b606081016144fb85614b7c565b93815260208101929092526001600160a01b031660409091015290565b600060208252613a3f6020830184614149565b600061016080835261453f8184018f614149565b90508281036020840152614553818e614149565b90508281036040840152614567818d614149565b606084019b909b525050608081019790975260a087019590955260c086019390935260e0850191909152610100840152610120830152610140909101529392505050565b6020808252600d908201527f494e56414c49445f544f4b454e00000000000000000000000000000000000000604082015260600190565b6020808252601c908201527f466c6173684d696e7465723a2043616c6c6261636b206661696c656400000000604082015260600190565b60208082526011908201527f494e56414c49445f524543495049454e54000000000000000000000000000000604082015260600190565b60208082526010908201527f494e56414c49445f504f4f4c4841534800000000000000000000000000000000604082015260600190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f414c52454144595f494d504f5254454400000000000000000000000000000000604082015260600190565b60208082526013908201527f494e56414c49445f544f4b454e534f5552434500000000000000000000000000604082015260600190565b60208082526011908201527f494e56414c49445f544f4b454e48415348000000000000000000000000000000604082015260600190565b60208082526011908201527f494e56414c49445f544f4b454e54595045000000000000000000000000000000604082015260600190565b6020808252601f908201527f466c6173684d696e7465723a205265706179206e6f7420617070726f76656400604082015260600190565b6020808252600c908201527f494e56414c49445f504f4f4c0000000000000000000000000000000000000000604082015260600190565b6020808252602a908201527f416464726573735365743a206b657920616c726561647920657869737473206960408201527f6e20746865207365742e00000000000000000000000000000000000000000000606082015260800190565b90815260200190565b9283526001600160a01b03918216602084015216604082015260600190565b8981526001600160a01b0389811660208301528816604082015261012081016148db88614b7c565b6060820197909752608081019590955260a085019390935290151560c0840152151560e08301521515610100909101529392505050565b9384526001600160a01b039290921660208401526040830152606082015260800190565b918252602082015260400190565b8a8152602081018a90526001600160a01b03898116604083015288166060820152610140810161497388614b7c565b608082019790975260a081019590955260c085019390935290151560e08401521515610100830152151561012090910152949350505050565b92835260208301919091521515604082015260600190565b9283526020830191909152604082015260600190565b838152606081016149ea84614b7c565b8360208301526001600160a01b0383166040830152949350505050565b9586526020860194909452604085019290925260608401526001600160a01b0316608083015260a082015260c00190565b60405181810167ffffffffffffffff81118282101715614a5a57614a5a614b66565b604052919050565b600067ffffffffffffffff821115614a7c57614a7c614b66565b50601f01601f191660200190565b60009081526020902090565b60008219821115614aa957614aa9614b50565b500190565b600082614ac957634e487b7160e01b81526012600452602481fd5b500490565b600082821015614ae057614ae0614b50565b500390565b60005b83811015614b00578181015183820152602001614ae8565b83811115614b0f576000848401525b50505050565b600281046001821680614b2957607f821691505b60208210811415614b4a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60038110610f8957634e487b7160e01b600052602160045260246000fd5b6001600160a01b0381168114610f8957600080fd5b8015158114610f8957600080fd5b60038110610f8957600080fdfea2646970667358221220975515982064f46a60d8cc5049e2c0f8e482b164e47a70d0edfeb0ecd658950164736f6c63430008000033a2646970667358221220dbd367f507f122dce911e6f3ea55a25556a0dcb453900b5cdaacb202d492d16d64736f6c63430008000033",
  "libraries": {
    "Strings": "0xd45eC25dF301d3E0FCfb2579cC5d983808fe0819",
    "AddressSet": "0x16898Ec08bab43BCF1Ae0A2fa90E25D61F5AaB4f",
    "UInt256Set": "0x5A1295EA06d05ace6B3E2a3f0Bc0769E0D914eBA",
    "Create2": "0xF0c0e1CfC1b73a20Dde07BEA2B640096e581E58A",
    "WrappedTokenLib": "0x233D640e29a53D63cF6434a074a4aA61390Ed3FF",
    "ComplexPoolLib": "0x7D9831a6684eAfC37c0e29b2c8465df7eFcFe3A1"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allNFTGemPools(uint256)": {
        "details": "get the quantized token for this"
      },
      "allNFTGemPoolsLength()": {
        "details": "number of quantized addresses"
      },
      "createNFTGemPool(address,string,string,uint256,uint256,uint256,uint256,uint256,address)": {
        "details": "deploy a new erc20 token using create2"
      },
      "getNFTGemPool(uint256)": {
        "details": "get the quantized token for this"
      },
      "nftGemPools()": {
        "details": "get the quantized token for this"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5200,
        "contract": "src/factories/NFTGemPoolFactory.sol:NFTGemPoolFactory",
        "label": "_getNFTGemPool",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5203,
        "contract": "src/factories/NFTGemPoolFactory.sol:NFTGemPoolFactory",
        "label": "_allNFTGemPools",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}