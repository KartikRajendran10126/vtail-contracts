{
  "address": "0x74d55Aa97F1a0656de8eB2F5B2a44Fa3250a4F90",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "gemSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gemName",
          "type": "string"
        }
      ],
      "name": "CustomNFTGemPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "gemSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gemName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "diffstep",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxMint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "allowedToken",
          "type": "address"
        }
      ],
      "name": "NFTGemPoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "gemSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "gemName",
          "type": "string"
        }
      ],
      "name": "addCustomNFTGemPool",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "gemPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "allNFTGemPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "gemPool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allNFTGemPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "bytecode",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "gemSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "gemName",
          "type": "string"
        }
      ],
      "name": "createCustomNFTGemPool",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "gemPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gemSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "gemName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diffstep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "allowedToken",
          "type": "address"
        }
      ],
      "name": "createNFTGemPool",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "gemPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_symbolHash",
          "type": "uint256"
        }
      ],
      "name": "getNFTGemPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "gemPool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolHash",
          "type": "uint256"
        }
      ],
      "name": "removeGemPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ndx",
          "type": "uint256"
        }
      ],
      "name": "removeGemPoolAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe525587259c5344bac40a114a665439bf54491c54e43a1fc286233c0fa9ea751",
  "receipt": {
    "to": null,
    "from": "0x80EBffD553601340B688f246FD20a57BAab17AaD",
    "contractAddress": "0x74d55Aa97F1a0656de8eB2F5B2a44Fa3250a4F90",
    "transactionIndex": 3,
    "gasUsed": "3742124",
    "logsBloom": "0x
    "blockHash": "0x00001b42000001d2527b32184dcf4528314eab015988b5ec19fe5ca9c1d66e71",
    "transactionHash": "0xe525587259c5344bac40a114a665439bf54491c54e43a1fc286233c0fa9ea751",
    "logs": [],
    "blockNumber": 5157550,
    "cumulativeGasUsed": "4326342",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "74452c6cda3ea6bebd3f6973f1954c6f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gemSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gemName\",\"type\":\"string\"}],\"name\":\"CustomNFTGemPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gemSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gemName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"diffstep\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"allowedToken\",\"type\":\"address\"}],\"name\":\"NFTGemPoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gemSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gemName\",\"type\":\"string\"}],\"name\":\"addCustomNFTGemPool\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"gemPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"allNFTGemPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gemPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allNFTGemPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"gemSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gemName\",\"type\":\"string\"}],\"name\":\"createCustomNFTGemPool\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"gemPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gemSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gemName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffstep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowedToken\",\"type\":\"address\"}],\"name\":\"createNFTGemPool\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"gemPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_symbolHash\",\"type\":\"uint256\"}],\"name\":\"getNFTGemPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gemPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolHash\",\"type\":\"uint256\"}],\"name\":\"removeGemPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ndx\",\"type\":\"uint256\"}],\"name\":\"removeGemPoolAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"addCustomNFTGemPool(address,string,string)\":{\"details\":\"add an existing gem pool to factory(for migrations)\"},\"allNFTGemPools(uint256)\":{\"details\":\"get the quantized token for this\"},\"allNFTGemPoolsLength()\":{\"details\":\"number of quantized addresses\"},\"createCustomNFTGemPool(bytes,string,string)\":{\"details\":\"deploy a new erc20 token using create2\"},\"createNFTGemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)\":{\"details\":\"deploy a new erc20 token using create2\"},\"getNFTGemPool(uint256)\":{\"details\":\"get the quantized token for this\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"relinquishControl()\":{\"details\":\"Check if this address is a controller\"},\"removeGemPool(uint256)\":{\"details\":\"remove a gem pool from the list using its symbol hash\"},\"removeGemPoolAt(uint256)\":{\"details\":\"remove a gem pool from the list using its index into pools array\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/factories/NFTGemPoolFactory.sol\":\"NFTGemPoolFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller) external override onlyController {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address) external view override returns (bool allowed) {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function relinquishControl() external view override onlyController {\\n        _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0xd775053cec953f14832c8145de2f04f2259110a29accbc924f5dfe71ea85b095\",\"license\":\"MIT\"},\"src/factories/NFTGemPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../access/Controllable.sol\\\";\\nimport \\\"../pool/NFTComplexGemPool.sol\\\";\\nimport \\\"../pool/ComplexPoolLib.sol\\\";\\nimport \\\"../libs/Create2.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolFactory.sol\\\";\\n\\ncontract NFTGemPoolFactory is Controllable, INFTGemPoolFactory {\\n    address private operator;\\n\\n    mapping(uint256 => address) private _getNFTGemPool;\\n    address[] private _allNFTGemPools;\\n\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /**\\n     * @dev get the quantized token for this\\n     */\\n    function getNFTGemPool(uint256 _symbolHash) external view override returns (address gemPool) {\\n        gemPool = _getNFTGemPool[_symbolHash];\\n    }\\n\\n    /**\\n     * @dev get the quantized token for this\\n     */\\n    function allNFTGemPools(uint256 idx) external view override returns (address gemPool) {\\n        gemPool = _allNFTGemPools[idx];\\n    }\\n\\n    /**\\n     * @dev number of quantized addresses\\n     */\\n    function allNFTGemPoolsLength() external view override returns (uint256) {\\n        return _allNFTGemPools.length;\\n    }\\n\\n    /**\\n     * @dev deploy a new erc20 token using create2\\n     */\\n    function createCustomNFTGemPool(\\n        bytes memory bytecode,\\n        string memory gemSymbol,\\n        string memory gemName\\n    ) external override onlyController returns (address payable gemPool) {\\n        bytes32 salt = keccak256(abi.encodePacked(gemSymbol));\\n        require(_getNFTGemPool[uint256(salt)] == address(0), \\\"GEMPOOL_EXISTS\\\"); // single check is sufficient\\n\\n        // use create2 to deploy the quantized erc20 contract\\n        gemPool = payable(Create2.deploy(0, salt, bytecode));\\n\\n        // insert the erc20 contract address into lists - one that maps source to quantized,\\n        _getNFTGemPool[uint256(salt)] = gemPool;\\n        _allNFTGemPools.push(gemPool);\\n\\n        // emit an event about the new pool being created\\n        emit CustomNFTGemPoolCreated(gemSymbol, gemName);\\n    }\\n\\n    /**\\n     * @dev add an existing gem pool to factory(for migrations)\\n     */\\n    function addCustomNFTGemPool(\\n        address poolAddress,\\n        string memory gemSymbol,\\n        string memory gemName\\n    ) external override onlyController returns (address payable gemPool) {\\n        bytes32 salt = keccak256(abi.encodePacked(gemSymbol));\\n        require(_getNFTGemPool[uint256(salt)] == address(0), \\\"GEMPOOL_EXISTS\\\"); // single check is sufficient\\n\\n        // insert the erc20 contract address into lists - one that maps source to quantized,\\n        _getNFTGemPool[uint256(salt)] = poolAddress;\\n        _allNFTGemPools.push(poolAddress);\\n\\n        // return the address that was passed in\\n        gemPool = payable(poolAddress);\\n\\n        // emit an event about the new pool being created\\n        emit CustomNFTGemPoolCreated(gemSymbol, gemName);\\n    }\\n\\n    /**\\n     * @dev deploy a new erc20 token using create2\\n     */\\n    function createNFTGemPool(\\n        string memory gemSymbol,\\n        string memory gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    ) external override onlyController returns (address payable gemPool) {\\n        bytes32 salt = keccak256(abi.encodePacked(gemSymbol));\\n        require(_getNFTGemPool[uint256(salt)] == address(0), \\\"GEMPOOL_EXISTS\\\"); // single check is sufficient\\n\\n        // validation checks to make sure values are sane\\n        require(ethPrice != 0, \\\"INVALID_PRICE\\\");\\n        require(minTime != 0, \\\"INVALID_MIN_TIME\\\");\\n        require(diffstep != 0, \\\"INVALID_DIFFICULTY_STEP\\\");\\n\\n        // create the quantized erc20 token using create2, which lets us determine the\\n        // quantized erc20 address of a token without interacting with the contract itself\\n        bytes memory bytecode = type(NFTComplexGemPool).creationCode;\\n\\n        // use create2 to deploy the quantized erc20 contract\\n        gemPool = payable(Create2.deploy(0, salt, bytecode));\\n\\n        // initialize the erc20 contract with the relevant addresses which it proxies\\n        NFTComplexGemPool(gemPool).initialize(\\n            gemSymbol,\\n            gemName,\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxMint,\\n            allowedToken\\n        );\\n\\n        // insert the erc20 contract address into lists\\n        _getNFTGemPool[uint256(salt)] = gemPool;\\n        _allNFTGemPools.push(gemPool);\\n\\n        // emit an event about the new pool being created\\n        emit NFTGemPoolCreated(gemSymbol, gemName, ethPrice, minTime, maxTime, diffstep, maxMint, allowedToken);\\n    }\\n\\n    /**\\n     * @dev remove a gem pool from the list using its symbol hash\\n     */\\n    function removeGemPool(uint256 poolHash) external override onlyController {\\n        address oldPool = _getNFTGemPool[poolHash];\\n        delete _getNFTGemPool[poolHash];\\n        for (uint256 i = 0; i < _allNFTGemPools.length; i++) {\\n            if (_allNFTGemPools[i] == oldPool) {\\n                if (_allNFTGemPools.length == 1) {\\n                    delete _allNFTGemPools;\\n                } else {\\n                    _allNFTGemPools[i] == _allNFTGemPools[_allNFTGemPools.length - 1];\\n                    delete _allNFTGemPools[_allNFTGemPools.length - 1];\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev remove a gem pool from the list using its index into pools array\\n     */\\n    function removeGemPoolAt(uint256 ndx) external override onlyController {\\n        require(_allNFTGemPools.length > ndx, \\\"INDEX_OUT_OF_RANGE\\\");\\n        if (_allNFTGemPools.length == 1) {\\n            delete _allNFTGemPools;\\n        } else {\\n            _allNFTGemPools[ndx] == _allNFTGemPools[_allNFTGemPools.length - 1];\\n            delete _allNFTGemPools[_allNFTGemPools.length - 1];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9049b8f3904cac0f5827e92342d508efeced8245b82d09098bcada9f4aed867e\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(address indexed contractAddress, address indexed controllerAddress);\\n    event ControllerRemoved(address indexed contractAddress, address indexed controllerAddress);\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2f2d8600b126c9f7e41c2d3f94d9cf833ccd0312b74a9563c769743a192f81ca\",\"license\":\"MIT\"},\"src/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6e86542ba9c42a9ad56d81283264fd072ad07d7789113fd3482fe748a22428d6\",\"license\":\"MIT\"},\"src/interfaces/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4dbd32ff92fed4943c7c6524a29c96430f5b8caf64691ea3089184377b92dff8\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xacc13c3e2db32f3fbd54b5fe811690085679d84ca9c8a9b81374d811b30758b0\",\"license\":\"MIT\"},\"src/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6be5c98231ba90ad43bcf7dad027c1a1e7787220565aa3bb24becace05825664\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./INFTGemPool.sol\\\";\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTComplexGemPool {\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event ComplexNFTGemClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event ComplexNFTGemERC20ClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event ComplexNFTGemClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 amountPaid,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event ComplexNFTGemERC20ClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event ComplexNFTGemCreated(address account, address pool, uint256 claimHash, uint256 gemHash, uint256 quantity);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function setVisible(bool visible) external;\\n\\n    function visible() external view returns (bool);\\n\\n    function setCategory(uint256 category) external;\\n\\n    function category() external view returns (uint256);\\n\\n    function setDescription(string memory description) external;\\n\\n    function description() external view returns (string memory);\\n\\n    function setValidateErc20(bool) external;\\n\\n    function validateErc20() external view returns (bool);\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external;\\n\\n    function collectClaim(uint256 claimHash) external;\\n\\n    function deposit(address erc20token, uint256 tokenAmount) external;\\n\\n    function withdraw(\\n        address erc20token,\\n        address destination,\\n        uint256 tokenAmount\\n    ) external;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0x35b48ffabe569cb21a2701ff58c1b5758f43b39fc134aef7b84d5e71f87e758d\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTComplexGemPoolData {\\n    function addInputRequirement(\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tokenId,\\n        uint256 minAmount,\\n        bool burn\\n    ) external;\\n\\n    function updateInputRequirement(\\n        uint256 ndx,\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tid,\\n        uint256 minAmount,\\n        bool burn\\n    ) external;\\n\\n    function allInputRequirementsLength() external returns (uint256);\\n\\n    function allInputRequirements(uint256 ndx)\\n        external\\n        returns (\\n            address,\\n            address,\\n            uint8,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function ethPrice() external view returns (uint256);\\n\\n    function minTime() external view returns (uint256);\\n\\n    function maxTime() external view returns (uint256);\\n\\n    function difficultyStep() external view returns (uint256);\\n\\n    function maxClaims() external view returns (uint256);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n\\n    function claimQuantity(uint256 claimId) external view returns (uint256);\\n\\n    function mintedCount() external view returns (uint256);\\n\\n    function totalStakedEth() external view returns (uint256);\\n\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n\\n    function tokenType(uint256 tokenHash) external view returns (uint8);\\n\\n    function allTokenHashesLength() external view returns (uint256);\\n\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n\\n    function nextClaimHash() external view returns (uint256);\\n\\n    function nextGemHash() external view returns (uint256);\\n\\n    function nextGemId() external view returns (uint256);\\n\\n    function nextClaimId() external view returns (uint256);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n\\n    function allowedTokens(uint256 idx) external view returns (address);\\n\\n    function isTokenAllowed(address token) external view returns (bool);\\n\\n    function addAllowedToken(address token) external;\\n\\n    function removeAllowedToken(address token) external;\\n}\\n\",\"keccak256\":\"0x57263a660d0d048f02c912bed74b25fa2e3a86c0390ecc7b65638f4f69a39849\",\"license\":\"MIT\"},\"src/interfaces/INFTGemFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTGemFeeManager {\\n\\n    event DefaultFeeDivisorChanged(address indexed operator, uint256 oldValue, uint256 value);\\n    event FeeDivisorChanged(address indexed operator, address indexed token, uint256 oldValue, uint256 value);\\n    event ETHReceived(address indexed manager, address sender, uint256 value);\\n    event LiquidityChanged(address indexed manager, uint256 oldValue, uint256 value);\\n\\n    function liquidity(address token) external view returns (uint256);\\n\\n    function defaultLiquidity() external view returns (uint256);\\n\\n    function setDefaultLiquidity(uint256 _liquidityMult) external returns (uint256);\\n\\n    function feeDivisor(address token) external view returns (uint256);\\n\\n    function defaultFeeDivisor() external view returns (uint256);\\n\\n    function setFeeDivisor(address token, uint256 _feeDivisor) external returns (uint256);\\n\\n    function setDefaultFeeDivisor(uint256 _feeDivisor) external returns (uint256);\\n\\n    function ethBalanceOf() external view returns (uint256);\\n\\n    function balanceOF(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0xc1beb3a7410a4a0f6f8c47a8901fe81207199ff243704e79e2be60d5ed1bd305\",\"license\":\"MIT\"},\"src/interfaces/INFTGemGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemGovernor {\\n    event GovernanceTokenIssued(address indexed receiver, uint256 amount);\\n    event FeeUpdated(address indexed proposal, address indexed token, uint256 newFee);\\n    event AllowList(address indexed proposal, address indexed token, bool isBanned);\\n    event ProjectFunded(address indexed proposal, address indexed receiver, uint256 received);\\n    event StakingPoolCreated(\\n        address indexed proposal,\\n        address indexed pool,\\n        string symbol,\\n        string name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffStep,\\n        uint256 maxClaims,\\n        address alllowedToken\\n    );\\n\\n    function initialize(\\n        address _multitoken,\\n        address _factory,\\n        address _feeTracker,\\n        address _proposalFactory,\\n        address _swapHelper\\n    ) external;\\n\\n    function createProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function destroyProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function executeProposal(address propAddress) external;\\n\\n    function issueInitialGovernanceTokens(address receiver) external returns (uint256);\\n\\n    function maybeIssueGovernanceToken(address receiver) external returns (uint256);\\n\\n    function issueFuelToken(address receiver, uint256 amount) external returns (uint256);\\n\\n    function createPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createNewPoolProposal(\\n        address,\\n        string memory,\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external returns (address);\\n\\n    function createChangeFeeProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (address);\\n\\n    function createFundProjectProposal(\\n        address,\\n        string memory,\\n        address,\\n        string memory,\\n        uint256\\n    ) external returns (address);\\n\\n    function createUpdateAllowlistProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        bool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x1b50c9b3cace4c06f4c147759a6a349402c66b6ab453198553b9159e81a64ce6\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function allHeldTokens(address holder, uint256 _idx) external view returns (uint256);\\n\\n    function allHeldTokensLength(address holder) external view returns (uint256);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx) external view returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token) external view returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token) external view returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        uint8 tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash) external view returns (uint8, address);\\n}\\n\",\"keccak256\":\"0x1aa862437617abb8d35cd4120347de5c623ef4e84523fd3d0b914196f8b24e92\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPool {\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 amountPaid,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(address account, address pool, uint256 claimHash, uint256 gemHash, uint256 quantity);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function setVisible(bool visible) external;\\n\\n    function visible() external view returns (bool);\\n\\n    function setCategory(uint256 category) external;\\n\\n    function category() external view returns (uint256);\\n\\n    function setValidateErc20(bool) external;\\n\\n    function validateErc20() external view returns (bool);\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external;\\n\\n    function collectClaim(uint256 claimHash) external;\\n\\n    function rescue(address erc20token, uint256 tokenAmount) external;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6c2ba95bb3c2eafbc9d7bf749cafc943f7d2476a89b5a03744f3fc53b64cde96\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTGemPoolData {\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function ethPrice() external view returns (uint256);\\n\\n    function minTime() external view returns (uint256);\\n\\n    function maxTime() external view returns (uint256);\\n\\n    function difficultyStep() external view returns (uint256);\\n\\n    function maxClaims() external view returns (uint256);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n\\n    function claimQuantity(uint256 claimId) external view returns (uint256);\\n\\n    function mintedCount() external view returns (uint256);\\n\\n    function totalStakedEth() external view returns (uint256);\\n\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n\\n    function tokenType(uint256 tokenHash) external view returns (uint8);\\n\\n    function allTokenHashesLength() external view returns (uint256);\\n\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n\\n    function nextClaimHash() external view returns (uint256);\\n\\n    function nextGemHash() external view returns (uint256);\\n\\n    function nextGemId() external view returns (uint256);\\n\\n    function nextClaimId() external view returns (uint256);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n\\n    function allowedTokens(uint256 idx) external view returns (address);\\n\\n    function isTokenAllowed(address token) external view returns (bool);\\n\\n    function addAllowedToken(address token) external;\\n\\n    function removeAllowedToken(address token) external;\\n}\\n\",\"keccak256\":\"0x19e368494dc8e8ce9b5f3b906c431424a8e402a994a40ea5b714c40c0822977d\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPoolFactory {\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event NFTGemPoolCreated(\\n        string gemSymbol,\\n        string gemName,\\n        uint256 ethPrice,\\n        uint256 mintTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    );\\n\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event CustomNFTGemPoolCreated(string gemSymbol, string gemName);\\n\\n    function getNFTGemPool(uint256 _symbolHash) external view returns (address);\\n\\n    function allNFTGemPools(uint256 idx) external view returns (address);\\n\\n    function allNFTGemPoolsLength() external view returns (uint256);\\n\\n    function createCustomNFTGemPool(\\n        bytes memory bytecode,\\n        string memory gemSymbol,\\n        string memory gemName\\n    ) external returns (address payable);\\n\\n    function createNFTGemPool(\\n        string memory gemSymbol,\\n        string memory gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    ) external returns (address payable);\\n\\n    function addCustomNFTGemPool(\\n        address poolAddress,\\n        string memory gemSymbol,\\n        string memory gemName\\n    ) external returns (address payable);\\n\\n    function removeGemPool(uint256 poolHash) external;\\n\\n    function removeGemPoolAt(uint256 ndx) external;\\n}\\n\",\"keccak256\":\"0xbf1315c3c9bf97d6d3a99dd828025ff5cd10e9d9215425bdaf0cfc7785ce09e0\",\"license\":\"MIT\"},\"src/interfaces/ISwapQueryHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface ISwapQueryHelper {\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function factory() external view returns (address);\\n\\n    function COIN() external pure returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function hasPool(address token) external view returns (bool);\\n\\n    function getReserves(address pair) external view returns (uint256, uint256);\\n\\n    function getPathForCoinToToken(address token) external pure returns (address[] memory);\\n\\n    function setFactory(address f) external;\\n}\\n\",\"keccak256\":\"0x36e47f43dc3f309d516f238f4744143e1d2cb23e0206729103478534960e7693\",\"license\":\"MIT\"},\"src/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor() {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x15bfd50d966a81b175c274590675b1fce1235d233502004005916c9ce564798e\",\"license\":\"MIT\"},\"src/libs/AddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @notice Key sets with enumeration and delete. Uses mappings for random\\n * and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced.\\n * @dev Sets are unordered. Delete operations reorder keys. All operations have a\\n * fixed gas cost at any scale, O(1).\\n * author: Rob Hitchens\\n */\\n\\nlibrary AddressSet {\\n    struct Set {\\n        mapping(address => uint256) keyPointers;\\n        address[] keyList;\\n    }\\n\\n    /**\\n     * @notice insert a key.\\n     * @dev duplicate keys are not permitted.\\n     * @param self storage pointer to a Set.\\n     * @param key value to insert.\\n     */\\n    function insert(Set storage self, address key) internal {\\n        require(!exists(self, key), \\\"AddressSet: key already exists in the set.\\\");\\n        self.keyList.push(key);\\n        self.keyPointers[key] = self.keyList.length - 1;\\n    }\\n\\n    /**\\n     * @notice remove a key.\\n     * @dev key to remove must exist.\\n     * @param self storage pointer to a Set.\\n     * @param key value to remove.\\n     */\\n    function remove(Set storage self, address key) internal {\\n        require(exists(self, key), \\\"AddressSet: key does not exist in the set.\\\");\\n        uint256 last = count(self) - 1;\\n        uint256 rowToReplace = self.keyPointers[key];\\n        if (rowToReplace != last) {\\n            address keyToMove = self.keyList[last];\\n            self.keyPointers[keyToMove] = rowToReplace;\\n            self.keyList[rowToReplace] = keyToMove;\\n            self.keyPointers[key] = 0;\\n            delete self.keyPointers[key];\\n            delete self.keyList[self.keyList.length - 1];\\n        } else {\\n            self.keyPointers[key] = 0;\\n            delete self.keyPointers[key];\\n            delete self.keyList;\\n        }\\n    }\\n\\n    /**\\n     * @notice count the keys.\\n     * @param self storage pointer to a Set.\\n     */\\n    function count(Set storage self) internal view returns (uint256) {\\n        return (self.keyList.length);\\n    }\\n\\n    /**\\n     * @notice check if a key is in the Set.\\n     * @param self storage pointer to a Set.\\n     * @param key value to check.\\n     * @return bool true: Set member, false: not a Set member.\\n     */\\n    function exists(Set storage self, address key) internal view returns (bool) {\\n        if (self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */\\n    function keyAtIndex(Set storage self, uint256 index) internal view returns (address) {\\n        return self.keyList[index];\\n    }\\n}\\n\",\"keccak256\":\"0xc2cf228fcaa5b9e053037a5fea5a05453007924833cc575186d48391b904e6cd\",\"license\":\"MIT\"},\"src/libs/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x5ba9948f2d0fa1e5c4ecd4fbd3cdc836e6c26e07375c4d0482593291e649a072\",\"license\":\"MIT\"},\"src/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x688b57d8a4d5b6221b74de43b603ac03191e89f278c361ea7ceb257268882c4b\",\"license\":\"MIT\"},\"src/pool/ComplexPoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPoolData.sol\\\";\\nimport \\\"../interfaces/ISwapQueryHelper.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPool.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\nimport \\\"../libs/AddressSet.sol\\\";\\nimport \\\"../libs/SafeMath.sol\\\";\\n\\nlibrary ComplexPoolLib {\\n    using SafeMath for uint256;\\n    using AddressSet for AddressSet.Set;\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event ComplexNFTGemClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event ComplexNFTGemERC20ClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event ComplexNFTGemClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 amountPaid,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event ComplexNFTGemERC20ClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    struct InputRequirement {\\n        address token;\\n        address pool;\\n        uint8 inputType; // 1 = erc20, 2 = erc1155, 3 = pool\\n        uint256 tokenId; // if erc20 slot 0 contains required amount\\n        uint256 minVal;\\n        bool burn;\\n    }\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event ComplexNFTGemCreated(address account, address pool, uint256 claimHash, uint256 gemHash, uint256 quantity);\\n\\n    struct ComplexPoolData {\\n        // governor and multitoken target\\n        address pool;\\n        address multitoken;\\n        address governor;\\n        address feeTracker;\\n        address swapHelper;\\n        uint256 category;\\n        bool visible;\\n        // it all starts with a symbol and a nams\\n        string symbol;\\n        string name;\\n        string description;\\n        // magic economy numbers\\n        uint256 ethPrice;\\n        uint256 minTime;\\n        uint256 maxTime;\\n        uint256 diffstep;\\n        uint256 maxClaims;\\n        uint256 maxQuantityPerClaim;\\n        bool validateerc20;\\n        mapping(uint256 => uint8) tokenTypes;\\n        mapping(uint256 => uint256) tokenIds;\\n        uint256[] tokenHashes;\\n        // next ids of things\\n        uint256 nextGemIdVal;\\n        uint256 nextClaimIdVal;\\n        uint256 totalStakedEth;\\n        // records claim timestamp / ETH value / ERC token and amount sent\\n        mapping(uint256 => uint256) claimLockTimestamps;\\n        mapping(uint256 => address) claimLockToken;\\n        mapping(uint256 => uint256) claimAmountPaid;\\n        mapping(uint256 => uint256) claimQuant;\\n        mapping(uint256 => uint256) claimTokenAmountPaid;\\n        // input NFTs storage\\n        mapping(uint256 => uint256[]) claimIds;\\n        mapping(uint256 => uint256[]) claimQuantities;\\n        mapping(address => bool) controllers;\\n        InputRequirement[] inputRequirements;\\n        AddressSet.Set allowedTokens;\\n    }\\n\\n    /**\\n     * @dev Transfer a quantity of input reqs from to\\n     */\\n    function transferInputReqsFrom(\\n        ComplexPoolData storage self,\\n        uint256 claimHash,\\n        address from,\\n        address to,\\n        uint256 quantity\\n    ) internal {\\n        address gemtoken;\\n        for (uint256 i = 0; i < self.inputRequirements.length; i++) {\\n            if (self.inputRequirements[i].inputType == 1) {\\n                IERC20 token = IERC20(self.inputRequirements[i].token);\\n                token.transferFrom(from, to, self.inputRequirements[i].minVal);\\n            } else if (self.inputRequirements[i].inputType == 2) {\\n                IERC1155 token = IERC1155(self.inputRequirements[i].token);\\n                token.safeTransferFrom(\\n                    from,\\n                    to,\\n                    self.inputRequirements[i].tokenId,\\n                    self.inputRequirements[i].minVal,\\n                    \\\"\\\"\\n                );\\n            } else if (self.inputRequirements[i].inputType == 3) {\\n                uint256 required = self.inputRequirements[i].minVal * quantity;\\n                uint256 hashCount = INFTGemMultiToken(self.inputRequirements[i].token).allHeldTokensLength(from);\\n                for (uint256 j = 0; j < hashCount; j++) {\\n                    uint256 hashAt = INFTGemMultiToken(self.inputRequirements[i].token).allHeldTokens(from, j);\\n                    if (INFTComplexGemPoolData(self.inputRequirements[i].pool).tokenType(hashAt) == 2) {\\n                        gemtoken = self.inputRequirements[i].token;\\n                        uint256 bal = IERC1155(self.inputRequirements[i].token).balanceOf(from, hashAt);\\n                        if (bal > required) {\\n                            bal = required;\\n                        }\\n                        if (bal == 0) {\\n                            continue;\\n                        }\\n                        self.claimIds[claimHash].push(hashAt);\\n                        self.claimQuantities[claimHash].push(bal);\\n                        required = required - bal;\\n                    }\\n                    if (required == 0) {\\n                        break;\\n                    }\\n                }\\n                require(required == 0, \\\"UNMET_REQUIREMENTS\\\");\\n            }\\n        }\\n\\n        if (self.claimIds[claimHash].length > 0 && gemtoken != address(0)) {\\n            IERC1155(gemtoken).safeBatchTransferFrom(\\n                from,\\n                to,\\n                self.claimIds[claimHash],\\n                self.claimQuantities[claimHash],\\n                \\\"\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev add an input requirement for this token\\n     */\\n    function addInputRequirement(\\n        ComplexPoolData storage self,\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tokenId,\\n        uint256 minAmount,\\n        bool burn\\n    ) public {\\n        require(token != address(0), \\\"INVALID_TOKEN\\\");\\n        require(inputType == 1 || inputType == 2 || inputType == 3, \\\"INVALID_TOKENTYPE\\\");\\n        require((inputType == 3 && pool != address(0)) || inputType != 3, \\\"INVALID_POOL\\\");\\n        require(\\n            (inputType == 1 && tokenId == 0) || inputType == 2 || (inputType == 3 && tokenId == 0),\\n            \\\"INVALID_TOKENID\\\"\\n        );\\n        require(minAmount != 0, \\\"ZERO_AMOUNT\\\");\\n        self.inputRequirements.push(InputRequirement(token, pool, inputType, tokenId, minAmount, burn));\\n    }\\n\\n    /**\\n     * @dev update input requirements\\n     */\\n    function updateInputRequirement(\\n        ComplexPoolData storage self,\\n        uint256 ndx,\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tid,\\n        uint256 minAmount,\\n        bool burn\\n    ) public {\\n        require(ndx < self.inputRequirements.length, \\\"OUT_OF_RANGE\\\");\\n        require(token != address(0), \\\"INVALID_TOKEN\\\");\\n        require(inputType == 1 || inputType == 2 || inputType == 3, \\\"INVALID_TOKENTYPE\\\");\\n        require((inputType == 3 && pool != address(0)) || inputType != 3, \\\"INVALID_POOL\\\");\\n        require((inputType == 1 && tid == 0) || inputType == 2 || (inputType == 3 && tid == 0), \\\"INVALID_TOKENID\\\");\\n        require(minAmount != 0, \\\"ZERO_AMOUNT\\\");\\n        self.inputRequirements[ndx] = InputRequirement(token, pool, inputType, tid, minAmount, burn);\\n    }\\n\\n    /**\\n     * @dev number of input requirements\\n     */\\n    function allInputRequirementsLength(ComplexPoolData storage self) public returns (uint256) {\\n        return self.inputRequirements.length;\\n    }\\n\\n    /**\\n     * @dev input requirements at index\\n     */\\n    function allInputRequirements(ComplexPoolData storage self, uint256 ndx)\\n        public\\n        returns (\\n            address,\\n            address,\\n            uint8,\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        require(ndx < self.inputRequirements.length, \\\"OUT_OF_RANGE\\\");\\n        InputRequirement memory req = self.inputRequirements[ndx];\\n        return (req.token, req.pool, req.inputType, req.tokenId, req.minVal, req.burn);\\n    }\\n\\n    /**\\n     * @dev attempt to create a claim using the given timeframe\\n     */\\n    function createClaims(\\n        ComplexPoolData storage self,\\n        uint256 timeframe,\\n        uint256 count\\n    ) public {\\n        // minimum timeframe\\n        require(timeframe >= self.minTime, \\\"TIMEFRAME_TOO_SHORT\\\");\\n        // no ETH\\n        require(msg.value != 0, \\\"ZERO_BALANCE\\\");\\n        // zero qty\\n        require(count != 0, \\\"ZERO_QUANTITY\\\");\\n        // maximum timeframe\\n        require((self.maxTime != 0 && timeframe <= self.maxTime) || self.maxTime == 0, \\\"TIMEFRAME_TOO_LONG\\\");\\n\\n        uint256 adjustedBalance = msg.value.div(count);\\n        // cost given this timeframe\\n\\n        uint256 cost = self.ethPrice.mul(self.minTime).div(timeframe);\\n        require(adjustedBalance >= cost, \\\"INSUFFICIENT_ETH\\\");\\n\\n        // get the nest claim hash, revert if no more claims\\n        uint256 claimHash = nextClaimHash(self);\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(self.multitoken).mint(msg.sender, claimHash, 1);\\n        INFTGemMultiToken(self.multitoken).setTokenData(claimHash, 1, address(this));\\n        addToken(self, claimHash, 1);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 claimUnlockTime = block.timestamp.add(timeframe);\\n        self.claimLockTimestamps[claimHash] = claimUnlockTime;\\n        self.claimAmountPaid[claimHash] = cost.mul(count);\\n        self.claimQuant[claimHash] = count;\\n\\n        // tranasfer NFT input requirements from user to pool\\n        transferInputReqsFrom(self, claimHash, msg.sender, address(self.pool), count);\\n\\n        // maybe mint a governance token for the claimant\\n        INFTGemGovernor(self.governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(self.governor).issueFuelToken(msg.sender, cost);\\n\\n        emit ComplexNFTGemClaimCreated(msg.sender, address(self.pool), claimHash, timeframe, count, cost);\\n\\n        // increase the staked eth balance\\n        self.totalStakedEth = self.totalStakedEth.add(cost.mul(count));\\n\\n        // return the extra to sender\\n        if (msg.value > cost.mul(count)) {\\n            (bool success, ) = payable(msg.sender).call{value: msg.value.sub(cost.mul(count))}(\\\"\\\");\\n            require(success, \\\"REFUND_FAILED\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev crate multiple gem claim using an erc20 token. this token must be tradeable in Uniswap or this call will fail\\n     */\\n    function createERC20Claims(\\n        ComplexPoolData storage self,\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) public {\\n        // must be a valid address\\n        require(erc20token != address(0), \\\"INVALID_ERC20_TOKEN\\\");\\n\\n        // token is allowed\\n        require(\\n            (self.allowedTokens.count() > 0 && self.allowedTokens.exists(erc20token)) ||\\n                self.allowedTokens.count() == 0,\\n            \\\"TOKEN_DISALLOWED\\\"\\n        );\\n\\n        // zero qty\\n        require(count != 0, \\\"ZERO_QUANTITY\\\");\\n\\n        // Uniswap pool must exist\\n        require(ISwapQueryHelper(self.swapHelper).hasPool(erc20token) == true, \\\"NO_UNISWAP_POOL\\\");\\n\\n        // must have an amount specified\\n        require(tokenAmount >= 0, \\\"NO_PAYMENT_INCLUDED\\\");\\n\\n        // get a quote in ETH for the given token.\\n        (uint256 ethereum, uint256 tokenReserve, uint256 ethReserve) =\\n            ISwapQueryHelper(self.swapHelper).coinQuote(erc20token, tokenAmount.div(count));\\n\\n        if (self.validateerc20 == true) {\\n            // make sure the convertible amount is has reserves > 100x the token\\n            require(ethReserve >= ethereum.mul(100).mul(count), \\\"INSUFFICIENT_ETH_LIQUIDITY\\\");\\n\\n            // make sure the convertible amount is has reserves > 100x the token\\n            require(tokenReserve >= tokenAmount.mul(100).mul(count), \\\"INSUFFICIENT_TOKEN_LIQUIDITY\\\");\\n        }\\n\\n        // make sure the convertible amount is less than max price\\n        require(ethereum <= self.ethPrice, \\\"OVERPAYMENT\\\");\\n\\n        // calculate the maturity time given the converted eth\\n        uint256 maturityTime = self.ethPrice.mul(self.minTime).div(ethereum);\\n\\n        // make sure the convertible amount is less than max price\\n        require(maturityTime >= self.minTime, \\\"INSUFFICIENT_TIME\\\");\\n\\n        // get the next claim hash, revert if no more claims\\n        uint256 claimHash = nextClaimHash(self);\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(self.multitoken).mint(msg.sender, claimHash, 1);\\n        INFTGemMultiToken(self.multitoken).setTokenData(claimHash, 1, address(this));\\n        addToken(self, claimHash, 1);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 claimUnlockTime = block.timestamp.add(maturityTime);\\n        self.claimLockTimestamps[claimHash] = claimUnlockTime;\\n        self.claimAmountPaid[claimHash] = ethereum;\\n        self.claimLockToken[claimHash] = erc20token;\\n        self.claimTokenAmountPaid[claimHash] = tokenAmount;\\n        self.claimQuant[claimHash] = count;\\n\\n        // tranasfer NFT input requirements from user to pool\\n        transferInputReqsFrom(self, claimHash, msg.sender, address(self.pool), count);\\n\\n        // increase staked eth amount\\n        self.totalStakedEth = self.totalStakedEth.add(ethereum);\\n\\n        // maybe mint a governance token for the claimant\\n        INFTGemGovernor(self.governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(self.governor).issueFuelToken(msg.sender, ethereum);\\n\\n        // emit a message indicating that an erc20 claim has been created\\n        emit ComplexNFTGemERC20ClaimCreated(\\n            msg.sender,\\n            address(self.pool),\\n            claimHash,\\n            maturityTime,\\n            erc20token,\\n            count,\\n            ethereum\\n        );\\n\\n        // transfer the caller's ERC20 tokens into the pool\\n        IERC20(erc20token).transferFrom(msg.sender, address(self.pool), tokenAmount);\\n    }\\n\\n    /**\\n     * @dev collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)\\n     */\\n    function collectClaim(ComplexPoolData storage self, uint256 claimHash) public {\\n        // validation checks - disallow if not owner (holds coin with claimHash)\\n        // or if the unlockTime amd unlockPaid data is in an invalid state\\n        require(IERC1155(self.multitoken).balanceOf(msg.sender, claimHash) == 1, \\\"NOT_CLAIM_OWNER\\\");\\n        uint256 unlockTime = self.claimLockTimestamps[claimHash];\\n        uint256 unlockPaid = self.claimAmountPaid[claimHash];\\n        require(unlockTime != 0 && unlockPaid > 0, \\\"INVALID_CLAIM\\\");\\n\\n        // grab the erc20 token info if there is any\\n        address tokenUsed = self.claimLockToken[claimHash];\\n        uint256 unlockTokenPaid = self.claimTokenAmountPaid[claimHash];\\n\\n        // check the maturity of the claim - only issue gem if mature\\n        bool isMature = unlockTime < block.timestamp;\\n\\n        //  burn claim and transfer money back to user\\n        INFTGemMultiToken(self.multitoken).burn(msg.sender, claimHash, 1);\\n\\n        // if they used erc20 tokens stake their claim, return their tokens\\n        if (tokenUsed != address(0)) {\\n            // calculate fee portion using fee tracker\\n            uint256 feePortion = 0;\\n            if (isMature == true) {\\n                uint256 poolDiv = INFTGemFeeManager(self.feeTracker).feeDivisor(address(self.pool));\\n                uint256 divisor = INFTGemFeeManager(self.feeTracker).feeDivisor(tokenUsed);\\n                uint256 feeNum = poolDiv != divisor ? divisor : poolDiv;\\n                feePortion = unlockTokenPaid.div(feeNum);\\n            }\\n            // assess a fee for minting the NFT. Fee is collectec in fee tracker\\n            IERC20(tokenUsed).transferFrom(address(self.pool), self.feeTracker, feePortion);\\n            // send the principal minus fees to the caller\\n            IERC20(tokenUsed).transferFrom(address(self.pool), msg.sender, unlockTokenPaid.sub(feePortion));\\n\\n            // emit an event that the claim was redeemed for ERC20\\n            emit ComplexNFTGemERC20ClaimRedeemed(\\n                msg.sender,\\n                address(self.pool),\\n                claimHash,\\n                tokenUsed,\\n                unlockPaid,\\n                unlockTokenPaid,\\n                self.claimQuant[claimHash],\\n                feePortion\\n            );\\n        } else {\\n            // calculate fee portion using fee tracker\\n            uint256 feePortion = 0;\\n            if (isMature == true) {\\n                uint256 divisor = INFTGemFeeManager(self.feeTracker).feeDivisor(address(0));\\n                feePortion = unlockPaid.div(divisor);\\n            }\\n            // transfer the ETH fee to fee tracker\\n            payable(self.feeTracker).transfer(feePortion);\\n            // transfer the ETH back to user\\n            payable(msg.sender).transfer(unlockPaid.sub(feePortion));\\n\\n            // emit an event that the claim was redeemed for ETH\\n            emit ComplexNFTGemClaimRedeemed(\\n                msg.sender,\\n                address(self.pool),\\n                claimHash,\\n                unlockPaid,\\n                self.claimQuant[claimHash],\\n                feePortion\\n            );\\n        }\\n\\n        // deduct the total staked ETH balance of the pool\\n        self.totalStakedEth = self.totalStakedEth.sub(unlockPaid);\\n\\n        // if all this is happening before the unlocktime then we exit\\n        // without minting a gem because the user is withdrawing early\\n        if (!isMature) {\\n            return;\\n        }\\n\\n        // get the next gem hash, increase the staking sifficulty\\n        // for the pool, and mint a gem token back to account\\n        uint256 nextHash = nextGemHash(self);\\n\\n        // mint the gem\\n        INFTGemMultiToken(self.multitoken).mint(msg.sender, nextHash, self.claimQuant[claimHash]);\\n        addToken(self, nextHash, 2);\\n\\n        // maybe mint a governance token\\n        INFTGemGovernor(self.governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(self.governor).issueFuelToken(msg.sender, unlockPaid);\\n\\n        // emit an event about a gem getting created\\n        emit ComplexNFTGemCreated(msg.sender, address(self.pool), claimHash, nextHash, self.claimQuant[claimHash]);\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function addToken(\\n        ComplexPoolData storage self,\\n        uint256 tokenHash,\\n        uint8 tt\\n    ) public {\\n        require(tt == 1 || tt == 2, \\\"INVALID_TOKENTYPE\\\");\\n        self.tokenHashes.push(tokenHash);\\n        self.tokenTypes[tokenHash] = tt;\\n        self.tokenIds[tokenHash] = tt == 1 ? nextClaimId(self) : nextGemId(self);\\n        INFTGemMultiToken(self.multitoken).setTokenData(tokenHash, tt, address(this));\\n        if (tt == 2) {\\n            increaseDifficulty(self);\\n        }\\n    }\\n\\n    /**\\n     * @dev get the next claim id\\n     */\\n    function nextClaimId(ComplexPoolData storage self) public returns (uint256) {\\n        uint256 ncId = self.nextClaimIdVal;\\n        self.nextClaimIdVal = self.nextClaimIdVal.add(1);\\n        return ncId;\\n    }\\n\\n    /**\\n     * @dev get the next gem id\\n     */\\n    function nextGemId(ComplexPoolData storage self) public returns (uint256) {\\n        uint256 ncId = self.nextGemIdVal;\\n        self.nextGemIdVal = self.nextGemIdVal.add(1);\\n        return ncId;\\n    }\\n\\n    /**\\n     * @dev increase the pool's difficulty by calculating the step increase portion and adding it to the eth price of the market\\n     */\\n    function increaseDifficulty(ComplexPoolData storage self) public {\\n        uint256 diffIncrease = self.ethPrice.div(self.diffstep);\\n        self.ethPrice = self.ethPrice.add(diffIncrease);\\n    }\\n\\n    /**\\n     * @dev the hash of the next gem to be minted\\n     */\\n    function nextGemHash(ComplexPoolData storage self) public view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(\\\"gem\\\", address(self.pool), self.nextGemIdVal)));\\n    }\\n\\n    /**\\n     * @dev the hash of the next claim to be minted\\n     */\\n    function nextClaimHash(ComplexPoolData storage self) public view returns (uint256) {\\n        return\\n            (self.maxClaims != 0 && self.nextClaimIdVal <= self.maxClaims) || self.maxClaims == 0\\n                ? uint256(keccak256(abi.encodePacked(\\\"claim\\\", address(self.pool), self.nextClaimIdVal)))\\n                : 0;\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function allTokenHashes(ComplexPoolData storage self, uint256 ndx) public view returns (uint256) {\\n        return self.tokenHashes[ndx];\\n    }\\n\\n    /**\\n     * @dev the claim amount for the given claim id\\n     */\\n    function claimAmount(ComplexPoolData storage self, uint256 claimHash) public view returns (uint256) {\\n        return self.claimAmountPaid[claimHash];\\n    }\\n\\n    /**\\n     * @dev the claim quantity (count of gems staked) for the given claim id\\n     */\\n    function claimQuantity(ComplexPoolData storage self, uint256 claimHash) public view returns (uint256) {\\n        return self.claimQuant[claimHash];\\n    }\\n\\n    /**\\n     * @dev the lock time for this claim. once past lock time a gema is minted\\n     */\\n    function claimUnlockTime(ComplexPoolData storage self, uint256 claimHash) public view returns (uint256) {\\n        return self.claimLockTimestamps[claimHash];\\n    }\\n\\n    /**\\n     * @dev claim token amount if paid using erc20\\n     */\\n    function claimTokenAmount(ComplexPoolData storage self, uint256 claimHash) public view returns (uint256) {\\n        return self.claimTokenAmountPaid[claimHash];\\n    }\\n\\n    /**\\n     * @dev the staked token if staking with erc20\\n     */\\n    function stakedToken(ComplexPoolData storage self, uint256 claimHash) public view returns (address) {\\n        return self.claimLockToken[claimHash];\\n    }\\n\\n    /**\\n     * @dev the public version of the above\\n     */\\n    function addAllowedToken(ComplexPoolData storage self, address token) public {\\n        if (!self.allowedTokens.exists(token)) {\\n            self.allowedTokens.insert(token);\\n        }\\n    }\\n\\n    /**\\n     * @dev the public version of the above\\n     */\\n    function removeAllowedToken(ComplexPoolData storage self, address token) public {\\n        if (self.allowedTokens.exists(token)) {\\n            self.allowedTokens.remove(token);\\n        }\\n    }\\n\\n    /**\\n     * @dev deposit into pool\\n     */\\n    function deposit(\\n        ComplexPoolData storage self,\\n        address erc20token,\\n        uint256 tokenAmount\\n    ) public {\\n        if (erc20token == address(0)) {\\n            require(msg.sender.balance >= tokenAmount);\\n            self.totalStakedEth = self.totalStakedEth.add(msg.sender.balance);\\n        } else {\\n            require(IERC20(erc20token).balanceOf(msg.sender) >= tokenAmount);\\n            IERC20(erc20token).transferFrom(msg.sender, address(self.pool), tokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev withdraw pool contents\\n     */\\n    function withdraw(\\n        ComplexPoolData storage self,\\n        address erc20token,\\n        address destination,\\n        uint256 tokenAmount\\n    ) public {\\n        require(destination != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(self.controllers[msg.sender] == true || msg.sender == self.governor, \\\"UNAUTHORIZED\\\");\\n        if (erc20token == address(0)) {\\n            payable(destination).transfer(tokenAmount);\\n        } else {\\n            IERC20(erc20token).transferFrom(address(self.pool), address(destination), tokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev mint the genesis gems earned by the pools creator and funder\\n     */\\n    function mintGenesisGems(\\n        ComplexPoolData storage self,\\n        address creator,\\n        address funder\\n    ) public {\\n        require(self.multitoken != address(0), \\\"NO_MULTITOKEN\\\");\\n        require(creator != address(0) && funder != address(0), \\\"ZERO_DESTINATION\\\");\\n        require(self.nextGemIdVal == 0, \\\"ALREADY_MINTED\\\");\\n\\n        uint256 gemHash = nextGemHash(self);\\n        INFTGemMultiToken(self.multitoken).mint(creator, gemHash, 1);\\n        addToken(self, gemHash, 2);\\n\\n        gemHash = nextGemHash(self);\\n        INFTGemMultiToken(self.multitoken).mint(creator, gemHash, 1);\\n        addToken(self, gemHash, 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa44dcdf7a6a1d2b8ade13e2ce2c46e2f6c3138dda7212d6a533c1a0145c0834b\",\"license\":\"MIT\"},\"src/pool/NFTComplexGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPool.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/ISwapQueryHelper.sol\\\";\\n\\nimport \\\"../utils/Initializable.sol\\\";\\nimport \\\"../tokens/ERC1155Holder.sol\\\";\\n\\nimport \\\"../libs/AddressSet.sol\\\";\\nimport \\\"../libs/SafeMath.sol\\\";\\n\\nimport \\\"./NFTComplexGemPoolData.sol\\\";\\n\\ncontract NFTComplexGemPool is NFTComplexGemPoolData, INFTComplexGemPool, ERC1155Holder {\\n    using SafeMath for uint256;\\n    using AddressSet for AddressSet.Set;\\n    using ComplexPoolLib for ComplexPoolLib.ComplexPoolData;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            poolData.controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address controller) external {\\n        require(\\n            poolData.controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        poolData.controllers[controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address caddress) external view returns (bool) {\\n        return poolData.controllers[caddress];\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function relinquishControl() external {\\n        require(\\n            poolData.controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        poolData.controllers[msg.sender] = false;\\n    }\\n\\n    constructor() {\\n        poolData.controllers[msg.sender] = true;\\n    }\\n\\n    /**\\n     * @dev initializer called when contract is deployed\\n     */\\n    function initialize(\\n        string memory __symbol,\\n        string memory __name,\\n        uint256 __ethPrice,\\n        uint256 __minTime,\\n        uint256 __maxTime,\\n        uint256 __diffstep,\\n        uint256 __maxClaims,\\n        address __allowedToken\\n    ) external override onlyController {\\n        poolData.pool = address(this);\\n        poolData.symbol = __symbol;\\n        poolData.name = __name;\\n        poolData.ethPrice = __ethPrice;\\n        poolData.minTime = __minTime;\\n        poolData.maxTime = __maxTime;\\n        poolData.diffstep = __diffstep;\\n        poolData.maxClaims = __maxClaims;\\n        poolData.visible = true;\\n        if (__allowedToken != address(0)) {\\n            poolData.allowedTokens.insert(__allowedToken);\\n        }\\n    }\\n\\n    /**\\n     * @dev set the governor. pool uses the governor to issue gov token issuance requests\\n     */\\n    function setGovernor(address addr) external override {\\n        require(poolData.controllers[msg.sender] = true || msg.sender == poolData.governor, \\\"UNAUTHORIZED\\\");\\n        poolData.governor = addr;\\n    }\\n\\n    /**\\n     * @dev set the governor. pool uses the governor to issue gov token issuance requests\\n     */\\n    function setFeeTracker(address addr) external override {\\n        require(poolData.controllers[msg.sender] = true || msg.sender == poolData.governor, \\\"UNAUTHORIZED\\\");\\n        poolData.feeTracker = addr;\\n    }\\n\\n    /**\\n     * @dev set the multitoken that this pool will mint new tokens on. Must be a controller of the multitoken\\n     */\\n    function setMultiToken(address addr) external override {\\n        require(poolData.controllers[msg.sender] = true || msg.sender == poolData.governor, \\\"UNAUTHORIZED\\\");\\n        poolData.multitoken = addr;\\n    }\\n\\n    /**\\n     * @dev set the AMM swap helper that gets token prices\\n     */\\n    function setSwapHelper(address addr) external override {\\n        require(poolData.controllers[msg.sender] = true || msg.sender == poolData.governor, \\\"UNAUTHORIZED\\\");\\n        poolData.swapHelper = addr;\\n    }\\n\\n    /**\\n     * @dev set market visibility\\n     */\\n    function setVisible(bool visible) external override {\\n        require(poolData.controllers[msg.sender] = true || msg.sender == poolData.governor, \\\"UNAUTHORIZED\\\");\\n        poolData.visible = visible;\\n    }\\n\\n    /**\\n     * @dev set market visibility\\n     */\\n    function visible() external view override returns (bool v) {\\n        v = poolData.visible;\\n    }\\n\\n    /**\\n     * @dev set category category\\n     */\\n    function setCategory(uint256 category) external override {\\n        require(poolData.controllers[msg.sender] = true || msg.sender == poolData.governor, \\\"UNAUTHORIZED\\\");\\n        poolData.category = category;\\n    }\\n\\n    /**\\n     * @dev get market category\\n     */\\n    function category() external view override returns (uint256 c) {\\n        c = poolData.category;\\n    }\\n\\n    /**\\n     * @dev set description\\n     */\\n    function setDescription(string memory desc) external override {\\n        require(poolData.controllers[msg.sender] = true || msg.sender == poolData.governor, \\\"UNAUTHORIZED\\\");\\n        poolData.description = desc;\\n    }\\n\\n    /**\\n     * @dev get description\\n     */\\n    function description() external view override returns (string memory c) {\\n        c = poolData.description;\\n    }\\n\\n    /**\\n     * @dev set validate erc20 token against AMM\\n     */\\n    function setValidateErc20(bool) external override {\\n        require(poolData.controllers[msg.sender] = true || msg.sender == poolData.governor, \\\"UNAUTHORIZED\\\");\\n        poolData.validateerc20 = true;\\n    }\\n\\n    /**\\n     * @dev get validate erc20 token against AMM\\n     */\\n    function validateErc20() external view override returns (bool) {\\n        return poolData.validateerc20;\\n    }\\n\\n    /**\\n     * @dev mint the genesis gems earned by the pools creator and funder\\n     */\\n    function mintGenesisGems(address creator, address funder) external override {\\n        poolData.mintGenesisGems(creator, funder);\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function createClaim(uint256 timeframe) external payable override {\\n        poolData.createClaims(timeframe, 1);\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function createClaims(uint256 timeframe, uint256 count) external payable override {\\n        poolData.createClaims(timeframe, count);\\n    }\\n\\n    /**\\n     * @dev create a claim using a erc20 token\\n     */\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external override {\\n        poolData.createERC20Claims(erc20token, tokenAmount, 1);\\n    }\\n\\n    /**\\n     * @dev create a claim using a erc20 token\\n     */\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external override {\\n        poolData.createERC20Claims(erc20token, tokenAmount, count);\\n    }\\n\\n    /**\\n     * @dev collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)\\n     */\\n    function collectClaim(uint256 claimHash) external override {\\n        poolData.collectClaim(claimHash);\\n    }\\n\\n    /**\\n     * @dev deposit into pool\\n     */\\n    function deposit(address erc20token, uint256 tokenAmount) external override {\\n        poolData.deposit(erc20token, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev withdraw pool contents\\n     */\\n    function withdraw(\\n        address erc20token,\\n        address destination,\\n        uint256 tokenAmount\\n    ) external override {\\n        poolData.withdraw(erc20token, destination, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x2b69685aa025d20847bab2e407ea4ae4efa7d20b9e76f19fc867d97c4d94ccb3\",\"license\":\"MIT\"},\"src/pool/NFTComplexGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../libs/AddressSet.sol\\\";\\nimport \\\"../libs/SafeMath.sol\\\";\\n\\nimport \\\"./ComplexPoolLib.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemPoolData.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPoolData.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC1155.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract NFTComplexGemPoolData is INFTComplexGemPoolData {\\n    using SafeMath for uint256;\\n    using AddressSet for AddressSet.Set;\\n    using ComplexPoolLib for ComplexPoolLib.ComplexPoolData;\\n\\n    ComplexPoolLib.ComplexPoolData internal poolData;\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev The symbol for this pool / NFT\\n     */\\n    function symbol() external view override returns (string memory) {\\n        return poolData.symbol;\\n    }\\n\\n    /**\\n     * @dev The name for this pool / NFT\\n     */\\n    function name() external view override returns (string memory) {\\n        return poolData.name;\\n    }\\n\\n    /**\\n     * @dev The ether price for this pool / NFT\\n     */\\n    function ethPrice() external view override returns (uint256) {\\n        return poolData.ethPrice;\\n    }\\n\\n    /**\\n     * @dev min time to stake in this pool to earn an NFT\\n     */\\n    function minTime() external view override returns (uint256) {\\n        return poolData.minTime;\\n    }\\n\\n    /**\\n     * @dev max time to stake in this pool to earn an NFT\\n     */\\n    function maxTime() external view override returns (uint256) {\\n        return poolData.maxTime;\\n    }\\n\\n    /**\\n     * @dev difficulty step increase for this pool.\\n     */\\n    function difficultyStep() external view override returns (uint256) {\\n        return poolData.diffstep;\\n    }\\n\\n    /**\\n     * @dev max claims that can be made on this NFT\\n     */\\n    function maxClaims() external view override returns (uint256) {\\n        return poolData.maxClaims;\\n    }\\n\\n    /**\\n     * @dev number of claims made thus far\\n     */\\n    function claimedCount() external view override returns (uint256) {\\n        return poolData.nextClaimIdVal;\\n    }\\n\\n    /**\\n     * @dev the number of gems minted in this\\n     */\\n    function mintedCount() external view override returns (uint256) {\\n        return poolData.nextGemIdVal;\\n    }\\n\\n    /**\\n     * @dev the number of gems minted in this\\n     */\\n    function totalStakedEth() external view override returns (uint256) {\\n        return poolData.totalStakedEth;\\n    }\\n\\n    /**\\n     * @dev get token type of hash - 1 is for claim, 2 is for gem\\n     */\\n    function tokenType(uint256 tokenHash) external view override returns (uint8) {\\n        return poolData.tokenTypes[tokenHash];\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function tokenId(uint256 tokenHash) external view override returns (uint256) {\\n        return poolData.tokenIds[tokenHash];\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function allTokenHashesLength() external view override returns (uint256) {\\n        return poolData.tokenHashes.length;\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function allTokenHashes(uint256 ndx) external view override returns (uint256) {\\n        return poolData.tokenHashes[ndx];\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function nextClaimHash() external view override returns (uint256) {\\n        return poolData.nextClaimHash();\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function nextGemHash() external view override returns (uint256) {\\n        return poolData.nextGemHash();\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function nextClaimId() external view override returns (uint256) {\\n        return poolData.nextClaimIdVal;\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function nextGemId() external view override returns (uint256) {\\n        return poolData.nextGemIdVal;\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function allowedTokensLength() external view override returns (uint256) {\\n        return poolData.allowedTokens.count();\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function allowedTokens(uint256 idx) external view override returns (address) {\\n        return poolData.allowedTokens.keyAtIndex(idx);\\n    }\\n\\n    /**\\n     * @dev add an allowed token to the pool\\n     */\\n    function addAllowedToken(address token) external override {\\n        poolData.allowedTokens.insert(token);\\n    }\\n\\n    /**\\n     * @dev add ad allowed token to the pool\\n     */\\n    function removeAllowedToken(address token) external override {\\n        poolData.allowedTokens.remove(token);\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function isTokenAllowed(address token) external view override returns (bool) {\\n        return poolData.allowedTokens.exists(token);\\n    }\\n\\n    /**\\n     * @dev the claim amount for the given claim id\\n     */\\n    function claimAmount(uint256 claimHash) external view override returns (uint256) {\\n        return poolData.claimAmount(claimHash);\\n    }\\n\\n    /**\\n     * @dev the claim quantity (count of gems staked) for the given claim id\\n     */\\n    function claimQuantity(uint256 claimHash) external view override returns (uint256) {\\n        return poolData.claimQuantity(claimHash);\\n    }\\n\\n    /**\\n     * @dev the lock time for this claim. once past lock time a gema is minted\\n     */\\n    function claimUnlockTime(uint256 claimHash) external view override returns (uint256) {\\n        return poolData.claimUnlockTime(claimHash);\\n    }\\n\\n    /**\\n     * @dev claim token amount if paid using erc20\\n     */\\n    function claimTokenAmount(uint256 claimHash) external view override returns (uint256) {\\n        return poolData.claimTokenAmount(claimHash);\\n    }\\n\\n    /**\\n     * @dev the staked token if staking with erc20\\n     */\\n    function stakedToken(uint256 claimHash) external view override returns (address) {\\n        return poolData.stakedToken(claimHash);\\n    }\\n\\n    /**\\n     * @dev Transfer a quantity of input reqs from to\\n     */\\n    function transferInputReqsFrom(\\n        uint256 claimHash,\\n        address from,\\n        address to,\\n        uint256 quantity\\n    ) internal {\\n        poolData.transferInputReqsFrom(claimHash, from, to, quantity);\\n    }\\n\\n    /**\\n     * @dev add an input requirement for this token\\n     */\\n    function addInputRequirement(\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tid,\\n        uint256 minAmount,\\n        bool burn\\n    ) external override {\\n        poolData.addInputRequirement(token, pool, inputType, tid, minAmount, burn);\\n    }\\n\\n    /**\\n     * @dev add an input requirement for this token\\n     */\\n    function updateInputRequirement(\\n        uint256 ndx,\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tid,\\n        uint256 minAmount,\\n        bool burn\\n    ) external override {\\n        poolData.updateInputRequirement(ndx, token, pool, inputType, tid, minAmount, burn);\\n    }\\n\\n    /**\\n     * @dev all Input Requirements Length\\n     */\\n    function allInputRequirementsLength() external override returns (uint256) {\\n        return poolData.allInputRequirementsLength();\\n    }\\n\\n    /**\\n     * @dev all Input Requirements at element\\n     */\\n    function allInputRequirements(uint256 ndx)\\n        external\\n        override\\n        returns (\\n            address token,\\n            address pool,\\n            uint8 inputType,\\n            uint256 tokenId,\\n            uint256 amt,\\n            bool burn\\n        )\\n    {\\n        return poolData.allInputRequirements(ndx);\\n    }\\n\\n    /**\\n     * @dev delegate proxy method for multitoken allow\\n     */\\n    function proxies(address) external view returns (address) {\\n        return address(this);\\n    }\\n}\\n\",\"keccak256\":\"0x4a0d30b1c4332cf6887429375b493fc6625c4a51de78f96d5b075e25d64c76f3\",\"license\":\"MIT\"},\"src/tokens/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x49e15074f8a57b5d5667525d0969959e4c046d1be9a2c7fd9728b9f544cd6572\",\"license\":\"MIT\"},\"src/tokens/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC1155Receiver.sol\\\";\\nimport \\\"../introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    constructor() {\\n        _registerInterface(\\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\\n                ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3bd66ee80963e46b0c88bb3fb9c48c8382106a12f9d182d7f6c9c682b2190850\",\"license\":\"MIT\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x449514510d4ad1b6d147c8e25e9c9e2f7652ead618c4ed1b8021ce128778fad1\",\"license\":\"MIT\"},\"src/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xdda65747b0bb97e8f0cf0e3bb767d4de43420edf302dd11008536ba2aecf46a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b610043565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b614299806100526000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c806367275aed11610081578063e1c28bef1161005b578063e1c28bef1461048f578063e4aa923d14610497578063f994567c1461064b576100c9565b806367275aed146103f8578063a7fc7a0714610415578063b429afeb14610448576100c9565b80634ff8f07e116100b25780634ff8f07e1461025e57806351788914146103bf5780635e6fe72a146103de576100c9565b80630311949d146100ce5780631ff77f1614610241575b600080fd5b610218600480360360608110156100e457600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561011c57600080fd5b82018360208201111561012e57600080fd5b8035906020019184600183028401116401000000008311171561015057600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156101a357600080fd5b8201836020820111156101b557600080fd5b803590602001918460018302840111640100000000831117156101d757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610668945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6102186004803603602081101561025757600080fd5b5035610946565b610218600480360361010081101561027557600080fd5b81019060208101813564010000000081111561029057600080fd5b8201836020820111156102a257600080fd5b803590602001918460018302840111640100000000831117156102c457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561031757600080fd5b82018360208201111561032957600080fd5b8035906020019184600183028401116401000000008311171561034b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a0013573ffffffffffffffffffffffffffffffffffffffff1661097d565b6103dc600480360360208110156103d557600080fd5b5035610f40565b005b6103e66110a0565b60408051918252519081900360200190f35b6102186004803603602081101561040e57600080fd5b50356110a6565b6103dc6004803603602081101561042b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166110ce565b61047b6004803603602081101561045e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661117a565b604080519115158252519081900360200190f35b6103dc6111a5565b610218600480360360608110156104ad57600080fd5b8101906020810181356401000000008111156104c857600080fd5b8201836020820111156104da57600080fd5b803590602001918460018302840111640100000000831117156104fc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561054f57600080fd5b82018360208201111561056157600080fd5b8035906020019184600183028401116401000000008311171561058357600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156105d657600080fd5b8201836020820111156105e857600080fd5b8035906020019184600183028401116401000000008311171561060a57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061120d945050505050565b6103dc6004803603602081101561066157600080fd5b503561144f565b3360009081526020819052604081205460ff1615156001148061068a57503033145b6106c55760405162461bcd60e51b815260040180806020018281038252602881526020018061423c6028913960400191505060405180910390fd5b6000836040516020018082805190602001908083835b602083106106fa5780518252601f1990920191602091820191016106db565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f19018352845281519181019190912060008181526002909252929020549194505073ffffffffffffffffffffffffffffffffffffffff161591506107ae9050576040805162461bcd60e51b815260206004820152600e60248201527f47454d504f4f4c5f455849535453000000000000000000000000000000000000604482015290519081900360640190fd5b6000818152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff8a167fffffffffffffffffffffffff00000000000000000000000000000000000000009182168117909255600380546001810182559086527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180549091169091179055805181815287519181019190915286518895507f89087d44119cf78c7cc1dfb971ca45b6aa9fde12ab6feedacc1fb42c3487862c9388938893928392838301926060850192908801918190849084905b838110156108a257818101518382015260200161088a565b50505050905090810190601f1680156108cf5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156109025781810151838201526020016108ea565b50505050905090810190601f16801561092f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1509392505050565b60006003828154811061095557fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b3360009081526020819052604081205460ff1615156001148061099f57503033145b6109da5760405162461bcd60e51b815260040180806020018281038252602881526020018061423c6028913960400191505060405180910390fd5b6000896040516020018082805190602001908083835b60208310610a0f5780518252601f1990920191602091820191016109f0565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f19018352845281519181019190912060008181526002909252929020549194505073ffffffffffffffffffffffffffffffffffffffff16159150610ac39050576040805162461bcd60e51b815260206004820152600e60248201527f47454d504f4f4c5f455849535453000000000000000000000000000000000000604482015290519081900360640190fd5b87610b15576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f505249434500000000000000000000000000000000000000604482015290519081900360640190fd5b86610b67576040805162461bcd60e51b815260206004820152601060248201527f494e56414c49445f4d494e5f54494d4500000000000000000000000000000000604482015290519081900360640190fd5b84610bb9576040805162461bcd60e51b815260206004820152601760248201527f494e56414c49445f444946464943554c54595f53544550000000000000000000604482015290519081900360640190fd5b606060405180602001610bcb9061172d565b601f1982820381018352601f909101166040529050610bec60008383611607565b92508273ffffffffffffffffffffffffffffffffffffffff1663d9a3f9bb8c8c8c8c8c8c8c8c6040518963ffffffff1660e01b81526004018080602001806020018981526020018881526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b818151815260200191508051906020019080838360005b83811015610c9c578181015183820152602001610c84565b50505050905090810190601f168015610cc95780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b83811015610cfc578181015183820152602001610ce4565b50505050905090810190601f168015610d295780820380516001836020036101000a031916815260200191505b509a5050505050505050505050600060405180830381600087803b158015610d5057600080fd5b505af1158015610d64573d6000803e3d6000fd5b505050600083815260026020908152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8a8116918217909355600380546001810182559087527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805490921617905581519182018e9052606082018d9052608082018c905260a082018b905260c082018a9052881660e08201526101008082528f51908201528e517fd5dd03a462020e8d5d777d0957fbf19067fc095f932d026bb0f23e384522f2a694508f938f938f938f938f938f938f938f939092839283810192610120850192918e01918190849084905b83811015610e90578181015183820152602001610e78565b50505050905090810190601f168015610ebd5780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b83811015610ef0578181015183820152602001610ed8565b50505050905090810190601f168015610f1d5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390a1505098975050505050505050565b3360009081526020819052604090205460ff16151560011480610f6257503033145b610f9d5760405162461bcd60e51b815260040180806020018281038252602881526020018061423c6028913960400191505060405180910390fd5b6003548110610ff3576040805162461bcd60e51b815260206004820152601260248201527f494e4445585f4f55545f4f465f52414e47450000000000000000000000000000604482015290519081900360640190fd5b6003546001141561100f5761100a6003600061173a565b61109d565b60038054600019810190811061102157fe5b6000918252602090912001546003805473ffffffffffffffffffffffffffffffffffffffff909216918390811061105457fe5b506000525060038054600019810190811061106b57fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b50565b60035490565b60009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b3360009081526020819052604090205460ff161515600114806110f057503033145b61112b5760405162461bcd60e51b815260040180806020018281038252602881526020018061423c6028913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff16600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b3360009081526020819052604090205460ff161515600114806111c757503033145b6112025760405162461bcd60e51b815260040180806020018281038252602881526020018061423c6028913960400191505060405180910390fd5b336000908152602052565b3360009081526020819052604081205460ff1615156001148061122f57503033145b61126a5760405162461bcd60e51b815260040180806020018281038252602881526020018061423c6028913960400191505060405180910390fd5b6000836040516020018082805190602001908083835b6020831061129f5780518252601f199092019160209182019101611280565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f19018352845281519181019190912060008181526002909252929020549194505073ffffffffffffffffffffffffffffffffffffffff161591506113539050576040805162461bcd60e51b815260206004820152600e60248201527f47454d504f4f4c5f455849535453000000000000000000000000000000000000604482015290519081900360640190fd5b61135f60008287611607565b6000828152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff86167fffffffffffffffffffffffff00000000000000000000000000000000000000009182168117909255600380546001810182559086527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180549091169091179055805181815288519181019190915287519395507f89087d44119cf78c7cc1dfb971ca45b6aa9fde12ab6feedacc1fb42c3487862c938893889383928382019260608501928801919081908490849083156108a257818101518382015260200161088a565b3360009081526020819052604090205460ff1615156001148061147157503033145b6114ac5760405162461bcd60e51b815260040180806020018281038252602881526020018061423c6028913960400191505060405180910390fd5b600081815260026020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000811690915573ffffffffffffffffffffffffffffffffffffffff16905b600354811015611602578173ffffffffffffffffffffffffffffffffffffffff166003828154811061152857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156115fa576003546001141561156c576115676003600061173a565b6115fa565b60038054600019810190811061157e57fe5b6000918252602090912001546003805473ffffffffffffffffffffffffffffffffffffffff90921691839081106115b157fe5b50600052506003805460001981019081106115c857fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b6001016114fa565b505050565b6000808447101561165f576040805162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b82516116b2576040805162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015290519081900360640190fd5b8383516020850187f5905073ffffffffffffffffffffffffffffffffffffffff8116611725576040805162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015290519081900360640190fd5b949350505050565b612acf8061176d83390190565b508054600082559060005260206000209081019061109d91905b808211156117685760008155600101611754565b509056fe60806040523480156200001157600080fd5b50620000246301ffc9a760e01b62000056565b62000036630271189760e51b62000056565b336000908152601e60205260409020805460ff19166001179055620000db565b6001600160e01b03198082161415620000b6576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602260205260409020805460ff19166001179055565b6129e480620000eb6000396000f3fe6080604052600436106103975760003560e01c8063a901c474116101dc578063d3d0839711610102578063e6c3b1f6116100a0578063f4fde0d31161006f578063f4fde0d314611244578063f9c9c27614611259578063f9eaee0d146112d3578063ff186b2e1461131357610397565b8063e6c3b1f6146110c4578063edcf2d5714611104578063ef430aa61461114a578063f23a6e611461115f57610397565b8063d9a3f9bb116100dc578063d9a3f9bb14610ec7578063d9caed1214611035578063e1c28bef14611085578063e5d2ce2f1461109a57610397565b8063d3d0839714610e46578063d43e646014610e5b578063d73cd47f14610e8757610397565b8063c42cf5351161017a578063cf5380b411610149578063cf5380b414610dc7578063cf721b1514610db2578063d104f8f514610ddc578063d31674db14610e1c57610397565b8063c42cf53514610d08578063c455279114610d48578063c5e01a5c14610d88578063c80c061314610db257610397565b8063b788e4e9116101b6578063b788e4e914610ac8578063bc197c8114610add578063bf86999b14610cf3578063c08fa1a4146109f457610397565b8063a901c47414610a49578063af6a6d7914610a73578063b429afeb14610a8857610397565b80636b6201da116102c15780638a09871b1161025f578063959355601161022e57806395935560146109b557806395d89b41146109df578063a0021cf1146109f4578063a7fc7a0714610a0957610397565b80638a09871b1461086d57806390469a9d1461088257806390c3f38f146108c25780639277a1851461097557610397565b80637ae7815d1161029b5780637ae7815d146107c35780637c5d643e146107ef5780637dcb0e5f146108195780637f2e8f0c1461084357610397565b80636b6201da1461072a5780636ba0f5c4146107475780637284e416146107ae57610397565b80634178617f11610339578063504cdacf11610308578063504cdacf146106615780635d2e0dd4146106765780635e5f2e261461068b5780636100c343146106de57610397565b80634178617f146105595780634565e5ef1461059957806347e7ef24146105ae5780634cd28a7e146105f457610397565b806322e67e711161037557806322e67e71146104ad57806323b221a0146104c25780632449ef51146104ec578063392732b11461053657610397565b806301ffc9a71461039c57806306fdde03146103fc5780631aa4307814610486575b600080fd5b3480156103a857600080fd5b506103e8600480360360208110156103bf57600080fd5b50357fffffffff0000000000000000000000000000000000000000000000000000000016611328565b604080519115158252519081900360200190f35b34801561040857600080fd5b5061041161135f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561044b578181015183820152602001610433565b50505050905090810190601f1680156104785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561049257600080fd5b5061049b6113f5565b60408051918252519081900360200190f35b3480156104b957600080fd5b5061049b6113fb565b3480156104ce57600080fd5b5061049b600480360360208110156104e557600080fd5b5035611401565b3480156104f857600080fd5b506105346004803603604081101561050f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166114a7565b005b6105346004803603604081101561054c57600080fd5b5080359060200135611550565b34801561056557600080fd5b506105346004803603602081101561057c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166115c7565b3480156105a557600080fd5b5061049b6115d5565b3480156105ba57600080fd5b50610534600480360360408110156105d157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356115e6565b34801561060057600080fd5b50610534600480360360e081101561061757600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff602082013581169160408101359091169060ff6060820135169060808101359060a08101359060c001351515611672565b34801561066d57600080fd5b5061049b611747565b34801561068257600080fd5b506103e861174d565b34801561069757600080fd5b506106b5600480360360208110156106ae57600080fd5b5035611756565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156106ea57600080fd5b506105346004803603606081101561070157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060208101359060400135611769565b6105346004803603602081101561074057600080fd5b5035611819565b34801561075357600080fd5b50610534600480360360c081101561076a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060ff6040820135169060608101359060808101359060a0013515156118ab565b3480156107ba57600080fd5b50610411611977565b3480156107cf57600080fd5b50610534600480360360208110156107e657600080fd5b503515156119d8565b3480156107fb57600080fd5b506105346004803603602081101561081257600080fd5b5035611a02565b34801561082557600080fd5b5061049b6004803603602081101561083c57600080fd5b5035611a72565b34801561084f57600080fd5b5061049b6004803603602081101561086657600080fd5b5035611a84565b34801561087957600080fd5b5061049b611af8565b34801561088e57600080fd5b50610534600480360360208110156108a557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611b7c565b3480156108ce57600080fd5b50610534600480360360208110156108e557600080fd5b81019060208101813564010000000081111561090057600080fd5b82018360208201111561091257600080fd5b8035906020019184600183028401116401000000008311171561093457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611b87945050505050565b34801561098157600080fd5b506105346004803603602081101561099857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611bb8565b3480156109c157600080fd5b5061049b600480360360208110156109d857600080fd5b5035611c19565b3480156109eb57600080fd5b50610411611c8d565b348015610a0057600080fd5b5061049b611cee565b348015610a1557600080fd5b5061053460048036036020811015610a2c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611cf4565b348015610a5557600080fd5b5061049b60048036036020811015610a6c57600080fd5b5035611d9c565b348015610a7f57600080fd5b506103e8611e10565b348015610a9457600080fd5b506103e860048036036020811015610aab57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611e19565b348015610ad457600080fd5b5061049b611e44565b348015610ae957600080fd5b50610cbe600480360360a0811015610b0057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235811692602081013590911691810190606081016040820135640100000000811115610b4157600080fd5b820183602082011115610b5357600080fd5b80359060200191846020830284011164010000000083111715610b7557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050640100000000811115610bc557600080fd5b820183602082011115610bd757600080fd5b80359060200191846020830284011164010000000083111715610bf957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050640100000000811115610c4957600080fd5b820183602082011115610c5b57600080fd5b80359060200191846001830284011164010000000083111715610c7d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611e97945050505050565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b348015610cff57600080fd5b5061049b611ec1565b348015610d1457600080fd5b5061053460048036036020811015610d2b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611ec7565b348015610d5457600080fd5b506106b560048036036020811015610d6b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611f28565b348015610d9457600080fd5b506106b560048036036020811015610dab57600080fd5b5035611f2d565b348015610dbe57600080fd5b5061049b611fa1565b348015610dd357600080fd5b5061049b611fa7565b348015610de857600080fd5b5061053460048036036020811015610dff57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611fad565b348015610e2857600080fd5b5061049b60048036036020811015610e3f57600080fd5b503561200e565b348015610e5257600080fd5b5061049b612031565b348015610e6757600080fd5b5061053460048036036020811015610e7e57600080fd5b50351515612084565b348015610e9357600080fd5b5061053460048036036020811015610eaa57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166120b1565b348015610ed357600080fd5b506105346004803603610100811015610eeb57600080fd5b810190602081018135640100000000811115610f0657600080fd5b820183602082011115610f1857600080fd5b80359060200191846001830284011164010000000083111715610f3a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050640100000000811115610f8d57600080fd5b820183602082011115610f9f57600080fd5b80359060200191846001830284011164010000000083111715610fc157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a0013573ffffffffffffffffffffffffffffffffffffffff16612112565b34801561104157600080fd5b506105346004803603606081101561105857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135612232565b34801561109157600080fd5b506105346122c6565b3480156110a657600080fd5b50610534600480360360208110156110bd57600080fd5b5035612356565b3480156110d057600080fd5b506110ee600480360360208110156110e757600080fd5b5035612375565b6040805160ff9092168252519081900360200190f35b34801561111057600080fd5b506105346004803603604081101561112757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561238a565b34801561115657600080fd5b5061049b61241d565b34801561116b57600080fd5b50610cbe600480360360a081101561118257600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359091169160408201359160608101359181019060a0810160808201356401000000008111156111cf57600080fd5b8201836020820111156111e157600080fd5b8035906020019184600183028401116401000000008311171561120357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612423945050505050565b34801561125057600080fd5b5061049b61244d565b34801561126557600080fd5b506112836004803603602081101561127c57600080fd5b5035612453565b6040805173ffffffffffffffffffffffffffffffffffffffff978816815295909616602086015260ff9093168486015260608401919091526080830152151560a082015290519081900360c00190f35b3480156112df57600080fd5b506103e8600480360360208110156112f657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612511565b34801561131f57600080fd5b5061049b61251e565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081526022602052604090205460ff1690565b60088054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156113eb5780601f106113c0576101008083540402835291602001916113eb565b820191906000526020600020905b8154815290600101906020018083116113ce57829003601f168201915b5050505050905090565b600b5490565b600c5490565b604080517f01356b6d00000000000000000000000000000000000000000000000000000000815260006004820181905260248201849052915173c79FFA1E3b5e834F632aa37be723382bD74d67da916301356b6d916044808301926020929190829003018186803b15801561147557600080fd5b505af4158015611489573d6000803e3d6000fd5b505050506040513d602081101561149f57600080fd5b505192915050565b604080517fb9f0527400000000000000000000000000000000000000000000000000000000815260006004820181905273ffffffffffffffffffffffffffffffffffffffff808616602484015284166044830152915173c79FFA1E3b5e834F632aa37be723382bD74d67da9263b9f052749260648082019391829003018186803b15801561153457600080fd5b505af4158015611548573d6000803e3d6000fd5b505050505050565b604080517f80ca2ba60000000000000000000000000000000000000000000000000000000081526000600482018190526024820185905260448201849052915173c79FFA1E3b5e834F632aa37be723382bD74d67da926380ca2ba69260648082019391829003018186803b15801561153457600080fd5b6115d2602082612524565b50565b60006115e160206125f6565b905090565b604080517f88d496a400000000000000000000000000000000000000000000000000000000815260006004820181905273ffffffffffffffffffffffffffffffffffffffff8516602483015260448201849052915173c79FFA1E3b5e834F632aa37be723382bD74d67da926388d496a49260648082019391829003018186803b15801561153457600080fd5b604080517fa93ac116000000000000000000000000000000000000000000000000000000008152600060048201819052602482018a905273ffffffffffffffffffffffffffffffffffffffff808a1660448401528816606483015260ff8716608483015260a4820186905260c4820185905283151560e4830152915173c79FFA1E3b5e834F632aa37be723382bD74d67da9263a93ac116926101048082019391829003018186803b15801561172657600080fd5b505af415801561173a573d6000803e3d6000fd5b5050505050505050505050565b60165490565b60105460ff1690565b60006117636020836125fd565b92915050565b604080517fafeafd9a00000000000000000000000000000000000000000000000000000000815260006004820181905273ffffffffffffffffffffffffffffffffffffffff861660248301526044820185905260648201849052915173c79FFA1E3b5e834F632aa37be723382bD74d67da9263afeafd9a9260848082019391829003018186803b1580156117fc57600080fd5b505af4158015611810573d6000803e3d6000fd5b50505050505050565b604080517f80ca2ba60000000000000000000000000000000000000000000000000000000081526000600482018190526024820184905260016044830152915173c79FFA1E3b5e834F632aa37be723382bD74d67da926380ca2ba69260648082019391829003018186803b15801561189057600080fd5b505af41580156118a4573d6000803e3d6000fd5b5050505050565b604080517fd28b935100000000000000000000000000000000000000000000000000000000815260006004820181905273ffffffffffffffffffffffffffffffffffffffff808a1660248401528816604483015260ff871660648301526084820186905260a4820185905283151560c4830152915173c79FFA1E3b5e834F632aa37be723382bD74d67da9263d28b93519260e48082019391829003018186803b15801561195757600080fd5b505af415801561196b573d6000803e3d6000fd5b50505050505050505050565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156113eb5780601f106113c0576101008083540402835291602001916113eb565b336000908152601e60205260409020805460ff19166001179055506010805460ff19166001179055565b604080517f96b8b27f00000000000000000000000000000000000000000000000000000000815260006004820181905260248201849052915173c79FFA1E3b5e834F632aa37be723382bD74d67da926396b8b27f9260448082019391829003018186803b15801561189057600080fd5b60009081526012602052604090205490565b604080517fecd5244e00000000000000000000000000000000000000000000000000000000815260006004820181905260248201849052915173c79FFA1E3b5e834F632aa37be723382bD74d67da9163ecd5244e916044808301926020929190829003018186803b15801561147557600080fd5b60008073c79FFA1E3b5e834F632aa37be723382bD74d67da63164cd8c290916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611b4b57600080fd5b505af4158015611b5f573d6000803e3d6000fd5b505050506040513d6020811015611b7557600080fd5b5051905090565b6115d2602082612637565b336000908152601e60205260409020805460ff191660011790558051611bb4906009906020840190612885565b5050565b336000908152601e60205260409020805460ff19166001179055600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b604080517fdc1f0f5300000000000000000000000000000000000000000000000000000000815260006004820181905260248201849052915173c79FFA1E3b5e834F632aa37be723382bD74d67da9163dc1f0f53916044808301926020929190829003018186803b15801561147557600080fd5b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156113eb5780601f106113c0576101008083540402835291602001916113eb565b60155490565b336000908152601e602052604090205460ff16151560011480611d1657503033145b611d6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061295d6028913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff166000908152601e60205260409020805460ff19166001179055565b604080517fb94677da00000000000000000000000000000000000000000000000000000000815260006004820181905260248201849052915173c79FFA1E3b5e834F632aa37be723382bD74d67da9163b94677da916044808301926020929190829003018186803b15801561147557600080fd5b60065460ff1690565b73ffffffffffffffffffffffffffffffffffffffff166000908152601e602052604090205460ff1690565b60008073c79FFA1E3b5e834F632aa37be723382bD74d67da6333c13e0d90916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611b4b57600080fd5b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b600d5490565b336000908152601e60205260409020805460ff19166001179055600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b503090565b604080517f76e455e100000000000000000000000000000000000000000000000000000000815260006004820181905260248201849052915173c79FFA1E3b5e834F632aa37be723382bD74d67da916376e455e1916044808301926020929190829003018186803b15801561147557600080fd5b60145490565b600e5490565b336000908152601e60205260409020805460ff19166001179055600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600080601301828154811061201f57fe5b90600052602060002001549050919050565b60008073c79FFA1E3b5e834F632aa37be723382bD74d67da63828c7b7290916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611b4b57600080fd5b336000908152601e60205260409020805460ff191660011790556006805460ff1916911515919091179055565b336000908152601e60205260409020805460ff19166001179055600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b336000908152601e602052604090205460ff1615156001148061213457503033145b612189576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061295d6028913960400191505060405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163017905587516121c69060079060208b0190612885565b5086516121da9060089060208a0190612885565b50600a869055600b859055600c849055600d839055600e8290556006805460ff1916600117905573ffffffffffffffffffffffffffffffffffffffff81161561222857612228602082612524565b5050505050505050565b604080517fe5932f4200000000000000000000000000000000000000000000000000000000815260006004820181905273ffffffffffffffffffffffffffffffffffffffff80871660248401528516604483015260648201849052915173c79FFA1E3b5e834F632aa37be723382bD74d67da9263e5932f429260848082019391829003018186803b1580156117fc57600080fd5b336000908152601e602052604090205460ff161515600114806122e857503033145b61233d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061295d6028913960400191505060405180910390fd5b336000908152601e60205260409020805460ff19169055565b336000908152601e60205260409020805460ff19166001179055600555565b60009081526011602052604090205460ff1690565b604080517fafeafd9a00000000000000000000000000000000000000000000000000000000815260006004820181905273ffffffffffffffffffffffffffffffffffffffff851660248301526044820184905260016064830152915173c79FFA1E3b5e834F632aa37be723382bD74d67da9263afeafd9a9260848082019391829003018186803b15801561153457600080fd5b60055490565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b60135490565b600080600080600080600073c79FFA1E3b5e834F632aa37be723382bD74d67da635b68e93c9091896040518363ffffffff1660e01b8152600401808381526020018281526020019250505060c06040518083038186803b1580156124b657600080fd5b505af41580156124ca573d6000803e3d6000fd5b505050506040513d60c08110156124e057600080fd5b508051602082015160408301516060840151608085015160a090950151939c929b5090995097509195509350915050565b6000611763602083612810565b600a5490565b61252e8282612810565b15612584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612985602a913960400191505060405180910390fd5b6001828101805491820181556000818152602080822090930180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff959095169485179055905492815292905260409091206000199091019055565b6001015490565b600082600101828154811061260e57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169392505050565b6126418282612810565b612696576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612933602a913960400191505060405180910390fd5b600060016126a3846125f6565b73ffffffffffffffffffffffffffffffffffffffff841660009081526020869052604090205491900391508082146127d45760008460010183815481106126e657fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1680835290879052604090912083905560018601805491925082918490811061272e57fe5b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9485161790559186168152908690526040812055600185018054600019810190811061279d57fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555061280a565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208590526040812081905561280a906001860190612903565b50505050565b600182015460009061282457506000611763565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260208590526040902054600185018054909190811061285b57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16149392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106128c657805160ff19168380011785556128f3565b828001600101855582156128f3579182015b828111156128f35782518255916020019190600101906128d8565b506128ff92915061291d565b5090565b50805460008255906000526020600020908101906115d291905b5b808211156128ff576000815560010161291e56fe416464726573735365743a206b657920646f6573206e6f7420657869737420696e20746865207365742e436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f6e74726f6c6c6572416464726573735365743a206b657920616c72656164792065786973747320696e20746865207365742ea2646970667358221220229eac68c1a29569ca08334acbd6d26e986246299c2fe1fe526b30a63e7c903164736f6c63430007030033436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f6e74726f6c6c6572a2646970667358221220d737a6f55244bb343f1eb734ed9a0229736527367df1a8162c6c1a58b567888864736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c806367275aed11610081578063e1c28bef1161005b578063e1c28bef1461048f578063e4aa923d14610497578063f994567c1461064b576100c9565b806367275aed146103f8578063a7fc7a0714610415578063b429afeb14610448576100c9565b80634ff8f07e116100b25780634ff8f07e1461025e57806351788914146103bf5780635e6fe72a146103de576100c9565b80630311949d146100ce5780631ff77f1614610241575b600080fd5b610218600480360360608110156100e457600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561011c57600080fd5b82018360208201111561012e57600080fd5b8035906020019184600183028401116401000000008311171561015057600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156101a357600080fd5b8201836020820111156101b557600080fd5b803590602001918460018302840111640100000000831117156101d757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610668945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6102186004803603602081101561025757600080fd5b5035610946565b610218600480360361010081101561027557600080fd5b81019060208101813564010000000081111561029057600080fd5b8201836020820111156102a257600080fd5b803590602001918460018302840111640100000000831117156102c457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561031757600080fd5b82018360208201111561032957600080fd5b8035906020019184600183028401116401000000008311171561034b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a0013573ffffffffffffffffffffffffffffffffffffffff1661097d565b6103dc600480360360208110156103d557600080fd5b5035610f40565b005b6103e66110a0565b60408051918252519081900360200190f35b6102186004803603602081101561040e57600080fd5b50356110a6565b6103dc6004803603602081101561042b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166110ce565b61047b6004803603602081101561045e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661117a565b604080519115158252519081900360200190f35b6103dc6111a5565b610218600480360360608110156104ad57600080fd5b8101906020810181356401000000008111156104c857600080fd5b8201836020820111156104da57600080fd5b803590602001918460018302840111640100000000831117156104fc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561054f57600080fd5b82018360208201111561056157600080fd5b8035906020019184600183028401116401000000008311171561058357600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156105d657600080fd5b8201836020820111156105e857600080fd5b8035906020019184600183028401116401000000008311171561060a57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061120d945050505050565b6103dc6004803603602081101561066157600080fd5b503561144f565b3360009081526020819052604081205460ff1615156001148061068a57503033145b6106c55760405162461bcd60e51b815260040180806020018281038252602881526020018061423c6028913960400191505060405180910390fd5b6000836040516020018082805190602001908083835b602083106106fa5780518252601f1990920191602091820191016106db565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f19018352845281519181019190912060008181526002909252929020549194505073ffffffffffffffffffffffffffffffffffffffff161591506107ae9050576040805162461bcd60e51b815260206004820152600e60248201527f47454d504f4f4c5f455849535453000000000000000000000000000000000000604482015290519081900360640190fd5b6000818152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff8a167fffffffffffffffffffffffff00000000000000000000000000000000000000009182168117909255600380546001810182559086527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180549091169091179055805181815287519181019190915286518895507f89087d44119cf78c7cc1dfb971ca45b6aa9fde12ab6feedacc1fb42c3487862c9388938893928392838301926060850192908801918190849084905b838110156108a257818101518382015260200161088a565b50505050905090810190601f1680156108cf5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156109025781810151838201526020016108ea565b50505050905090810190601f16801561092f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1509392505050565b60006003828154811061095557fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b3360009081526020819052604081205460ff1615156001148061099f57503033145b6109da5760405162461bcd60e51b815260040180806020018281038252602881526020018061423c6028913960400191505060405180910390fd5b6000896040516020018082805190602001908083835b60208310610a0f5780518252601f1990920191602091820191016109f0565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f19018352845281519181019190912060008181526002909252929020549194505073ffffffffffffffffffffffffffffffffffffffff16159150610ac39050576040805162461bcd60e51b815260206004820152600e60248201527f47454d504f4f4c5f455849535453000000000000000000000000000000000000604482015290519081900360640190fd5b87610b15576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f505249434500000000000000000000000000000000000000604482015290519081900360640190fd5b86610b67576040805162461bcd60e51b815260206004820152601060248201527f494e56414c49445f4d494e5f54494d4500000000000000000000000000000000604482015290519081900360640190fd5b84610bb9576040805162461bcd60e51b815260206004820152601760248201527f494e56414c49445f444946464943554c54595f53544550000000000000000000604482015290519081900360640190fd5b606060405180602001610bcb9061172d565b601f1982820381018352601f909101166040529050610bec60008383611607565b92508273ffffffffffffffffffffffffffffffffffffffff1663d9a3f9bb8c8c8c8c8c8c8c8c6040518963ffffffff1660e01b81526004018080602001806020018981526020018881526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b818151815260200191508051906020019080838360005b83811015610c9c578181015183820152602001610c84565b50505050905090810190601f168015610cc95780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b83811015610cfc578181015183820152602001610ce4565b50505050905090810190601f168015610d295780820380516001836020036101000a031916815260200191505b509a5050505050505050505050600060405180830381600087803b158015610d5057600080fd5b505af1158015610d64573d6000803e3d6000fd5b505050600083815260026020908152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8a8116918217909355600380546001810182559087527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805490921617905581519182018e9052606082018d9052608082018c905260a082018b905260c082018a9052881660e08201526101008082528f51908201528e517fd5dd03a462020e8d5d777d0957fbf19067fc095f932d026bb0f23e384522f2a694508f938f938f938f938f938f938f938f939092839283810192610120850192918e01918190849084905b83811015610e90578181015183820152602001610e78565b50505050905090810190601f168015610ebd5780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b83811015610ef0578181015183820152602001610ed8565b50505050905090810190601f168015610f1d5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390a1505098975050505050505050565b3360009081526020819052604090205460ff16151560011480610f6257503033145b610f9d5760405162461bcd60e51b815260040180806020018281038252602881526020018061423c6028913960400191505060405180910390fd5b6003548110610ff3576040805162461bcd60e51b815260206004820152601260248201527f494e4445585f4f55545f4f465f52414e47450000000000000000000000000000604482015290519081900360640190fd5b6003546001141561100f5761100a6003600061173a565b61109d565b60038054600019810190811061102157fe5b6000918252602090912001546003805473ffffffffffffffffffffffffffffffffffffffff909216918390811061105457fe5b506000525060038054600019810190811061106b57fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b50565b60035490565b60009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b3360009081526020819052604090205460ff161515600114806110f057503033145b61112b5760405162461bcd60e51b815260040180806020018281038252602881526020018061423c6028913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff16600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b3360009081526020819052604090205460ff161515600114806111c757503033145b6112025760405162461bcd60e51b815260040180806020018281038252602881526020018061423c6028913960400191505060405180910390fd5b336000908152602052565b3360009081526020819052604081205460ff1615156001148061122f57503033145b61126a5760405162461bcd60e51b815260040180806020018281038252602881526020018061423c6028913960400191505060405180910390fd5b6000836040516020018082805190602001908083835b6020831061129f5780518252601f199092019160209182019101611280565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f19018352845281519181019190912060008181526002909252929020549194505073ffffffffffffffffffffffffffffffffffffffff161591506113539050576040805162461bcd60e51b815260206004820152600e60248201527f47454d504f4f4c5f455849535453000000000000000000000000000000000000604482015290519081900360640190fd5b61135f60008287611607565b6000828152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff86167fffffffffffffffffffffffff00000000000000000000000000000000000000009182168117909255600380546001810182559086527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180549091169091179055805181815288519181019190915287519395507f89087d44119cf78c7cc1dfb971ca45b6aa9fde12ab6feedacc1fb42c3487862c938893889383928382019260608501928801919081908490849083156108a257818101518382015260200161088a565b3360009081526020819052604090205460ff1615156001148061147157503033145b6114ac5760405162461bcd60e51b815260040180806020018281038252602881526020018061423c6028913960400191505060405180910390fd5b600081815260026020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000811690915573ffffffffffffffffffffffffffffffffffffffff16905b600354811015611602578173ffffffffffffffffffffffffffffffffffffffff166003828154811061152857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156115fa576003546001141561156c576115676003600061173a565b6115fa565b60038054600019810190811061157e57fe5b6000918252602090912001546003805473ffffffffffffffffffffffffffffffffffffffff90921691839081106115b157fe5b50600052506003805460001981019081106115c857fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b6001016114fa565b505050565b6000808447101561165f576040805162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b82516116b2576040805162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015290519081900360640190fd5b8383516020850187f5905073ffffffffffffffffffffffffffffffffffffffff8116611725576040805162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015290519081900360640190fd5b949350505050565b612acf8061176d83390190565b508054600082559060005260206000209081019061109d91905b808211156117685760008155600101611754565b509056fe60806040523480156200001157600080fd5b50620000246301ffc9a760e01b62000056565b62000036630271189760e51b62000056565b336000908152601e60205260409020805460ff19166001179055620000db565b6001600160e01b03198082161415620000b6576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602260205260409020805460ff19166001179055565b6129e480620000eb6000396000f3fe6080604052600436106103975760003560e01c8063a901c474116101dc578063d3d0839711610102578063e6c3b1f6116100a0578063f4fde0d31161006f578063f4fde0d314611244578063f9c9c27614611259578063f9eaee0d146112d3578063ff186b2e1461131357610397565b8063e6c3b1f6146110c4578063edcf2d5714611104578063ef430aa61461114a578063f23a6e611461115f57610397565b8063d9a3f9bb116100dc578063d9a3f9bb14610ec7578063d9caed1214611035578063e1c28bef14611085578063e5d2ce2f1461109a57610397565b8063d3d0839714610e46578063d43e646014610e5b578063d73cd47f14610e8757610397565b8063c42cf5351161017a578063cf5380b411610149578063cf5380b414610dc7578063cf721b1514610db2578063d104f8f514610ddc578063d31674db14610e1c57610397565b8063c42cf53514610d08578063c455279114610d48578063c5e01a5c14610d88578063c80c061314610db257610397565b8063b788e4e9116101b6578063b788e4e914610ac8578063bc197c8114610add578063bf86999b14610cf3578063c08fa1a4146109f457610397565b8063a901c47414610a49578063af6a6d7914610a73578063b429afeb14610a8857610397565b80636b6201da116102c15780638a09871b1161025f578063959355601161022e57806395935560146109b557806395d89b41146109df578063a0021cf1146109f4578063a7fc7a0714610a0957610397565b80638a09871b1461086d57806390469a9d1461088257806390c3f38f146108c25780639277a1851461097557610397565b80637ae7815d1161029b5780637ae7815d146107c35780637c5d643e146107ef5780637dcb0e5f146108195780637f2e8f0c1461084357610397565b80636b6201da1461072a5780636ba0f5c4146107475780637284e416146107ae57610397565b80634178617f11610339578063504cdacf11610308578063504cdacf146106615780635d2e0dd4146106765780635e5f2e261461068b5780636100c343146106de57610397565b80634178617f146105595780634565e5ef1461059957806347e7ef24146105ae5780634cd28a7e146105f457610397565b806322e67e711161037557806322e67e71146104ad57806323b221a0146104c25780632449ef51146104ec578063392732b11461053657610397565b806301ffc9a71461039c57806306fdde03146103fc5780631aa4307814610486575b600080fd5b3480156103a857600080fd5b506103e8600480360360208110156103bf57600080fd5b50357fffffffff0000000000000000000000000000000000000000000000000000000016611328565b604080519115158252519081900360200190f35b34801561040857600080fd5b5061041161135f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561044b578181015183820152602001610433565b50505050905090810190601f1680156104785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561049257600080fd5b5061049b6113f5565b60408051918252519081900360200190f35b3480156104b957600080fd5b5061049b6113fb565b3480156104ce57600080fd5b5061049b600480360360208110156104e557600080fd5b5035611401565b3480156104f857600080fd5b506105346004803603604081101561050f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166114a7565b005b6105346004803603604081101561054c57600080fd5b5080359060200135611550565b34801561056557600080fd5b506105346004803603602081101561057c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166115c7565b3480156105a557600080fd5b5061049b6115d5565b3480156105ba57600080fd5b50610534600480360360408110156105d157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356115e6565b34801561060057600080fd5b50610534600480360360e081101561061757600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff602082013581169160408101359091169060ff6060820135169060808101359060a08101359060c001351515611672565b34801561066d57600080fd5b5061049b611747565b34801561068257600080fd5b506103e861174d565b34801561069757600080fd5b506106b5600480360360208110156106ae57600080fd5b5035611756565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156106ea57600080fd5b506105346004803603606081101561070157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060208101359060400135611769565b6105346004803603602081101561074057600080fd5b5035611819565b34801561075357600080fd5b50610534600480360360c081101561076a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060ff6040820135169060608101359060808101359060a0013515156118ab565b3480156107ba57600080fd5b50610411611977565b3480156107cf57600080fd5b50610534600480360360208110156107e657600080fd5b503515156119d8565b3480156107fb57600080fd5b506105346004803603602081101561081257600080fd5b5035611a02565b34801561082557600080fd5b5061049b6004803603602081101561083c57600080fd5b5035611a72565b34801561084f57600080fd5b5061049b6004803603602081101561086657600080fd5b5035611a84565b34801561087957600080fd5b5061049b611af8565b34801561088e57600080fd5b50610534600480360360208110156108a557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611b7c565b3480156108ce57600080fd5b50610534600480360360208110156108e557600080fd5b81019060208101813564010000000081111561090057600080fd5b82018360208201111561091257600080fd5b8035906020019184600183028401116401000000008311171561093457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611b87945050505050565b34801561098157600080fd5b506105346004803603602081101561099857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611bb8565b3480156109c157600080fd5b5061049b600480360360208110156109d857600080fd5b5035611c19565b3480156109eb57600080fd5b50610411611c8d565b348015610a0057600080fd5b5061049b611cee565b348015610a1557600080fd5b5061053460048036036020811015610a2c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611cf4565b348015610a5557600080fd5b5061049b60048036036020811015610a6c57600080fd5b5035611d9c565b348015610a7f57600080fd5b506103e8611e10565b348015610a9457600080fd5b506103e860048036036020811015610aab57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611e19565b348015610ad457600080fd5b5061049b611e44565b348015610ae957600080fd5b50610cbe600480360360a0811015610b0057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235811692602081013590911691810190606081016040820135640100000000811115610b4157600080fd5b820183602082011115610b5357600080fd5b80359060200191846020830284011164010000000083111715610b7557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050640100000000811115610bc557600080fd5b820183602082011115610bd757600080fd5b80359060200191846020830284011164010000000083111715610bf957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050640100000000811115610c4957600080fd5b820183602082011115610c5b57600080fd5b80359060200191846001830284011164010000000083111715610c7d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611e97945050505050565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b348015610cff57600080fd5b5061049b611ec1565b348015610d1457600080fd5b5061053460048036036020811015610d2b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611ec7565b348015610d5457600080fd5b506106b560048036036020811015610d6b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611f28565b348015610d9457600080fd5b506106b560048036036020811015610dab57600080fd5b5035611f2d565b348015610dbe57600080fd5b5061049b611fa1565b348015610dd357600080fd5b5061049b611fa7565b348015610de857600080fd5b5061053460048036036020811015610dff57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611fad565b348015610e2857600080fd5b5061049b60048036036020811015610e3f57600080fd5b503561200e565b348015610e5257600080fd5b5061049b612031565b348015610e6757600080fd5b5061053460048036036020811015610e7e57600080fd5b50351515612084565b348015610e9357600080fd5b5061053460048036036020811015610eaa57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166120b1565b348015610ed357600080fd5b506105346004803603610100811015610eeb57600080fd5b810190602081018135640100000000811115610f0657600080fd5b820183602082011115610f1857600080fd5b80359060200191846001830284011164010000000083111715610f3a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050640100000000811115610f8d57600080fd5b820183602082011115610f9f57600080fd5b80359060200191846001830284011164010000000083111715610fc157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a0013573ffffffffffffffffffffffffffffffffffffffff16612112565b34801561104157600080fd5b506105346004803603606081101561105857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135612232565b34801561109157600080fd5b506105346122c6565b3480156110a657600080fd5b50610534600480360360208110156110bd57600080fd5b5035612356565b3480156110d057600080fd5b506110ee600480360360208110156110e757600080fd5b5035612375565b6040805160ff9092168252519081900360200190f35b34801561111057600080fd5b506105346004803603604081101561112757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561238a565b34801561115657600080fd5b5061049b61241d565b34801561116b57600080fd5b50610cbe600480360360a081101561118257600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359091169160408201359160608101359181019060a0810160808201356401000000008111156111cf57600080fd5b8201836020820111156111e157600080fd5b8035906020019184600183028401116401000000008311171561120357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612423945050505050565b34801561125057600080fd5b5061049b61244d565b34801561126557600080fd5b506112836004803603602081101561127c57600080fd5b5035612453565b6040805173ffffffffffffffffffffffffffffffffffffffff978816815295909616602086015260ff9093168486015260608401919091526080830152151560a082015290519081900360c00190f35b3480156112df57600080fd5b506103e8600480360360208110156112f657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612511565b34801561131f57600080fd5b5061049b61251e565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081526022602052604090205460ff1690565b60088054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156113eb5780601f106113c0576101008083540402835291602001916113eb565b820191906000526020600020905b8154815290600101906020018083116113ce57829003601f168201915b5050505050905090565b600b5490565b600c5490565b604080517f01356b6d00000000000000000000000000000000000000000000000000000000815260006004820181905260248201849052915173__$8228317518e9daeef1bbbb17c026e269fd$__916301356b6d916044808301926020929190829003018186803b15801561147557600080fd5b505af4158015611489573d6000803e3d6000fd5b505050506040513d602081101561149f57600080fd5b505192915050565b604080517fb9f0527400000000000000000000000000000000000000000000000000000000815260006004820181905273ffffffffffffffffffffffffffffffffffffffff808616602484015284166044830152915173__$8228317518e9daeef1bbbb17c026e269fd$__9263b9f052749260648082019391829003018186803b15801561153457600080fd5b505af4158015611548573d6000803e3d6000fd5b505050505050565b604080517f80ca2ba60000000000000000000000000000000000000000000000000000000081526000600482018190526024820185905260448201849052915173__$8228317518e9daeef1bbbb17c026e269fd$__926380ca2ba69260648082019391829003018186803b15801561153457600080fd5b6115d2602082612524565b50565b60006115e160206125f6565b905090565b604080517f88d496a400000000000000000000000000000000000000000000000000000000815260006004820181905273ffffffffffffffffffffffffffffffffffffffff8516602483015260448201849052915173__$8228317518e9daeef1bbbb17c026e269fd$__926388d496a49260648082019391829003018186803b15801561153457600080fd5b604080517fa93ac116000000000000000000000000000000000000000000000000000000008152600060048201819052602482018a905273ffffffffffffffffffffffffffffffffffffffff808a1660448401528816606483015260ff8716608483015260a4820186905260c4820185905283151560e4830152915173__$8228317518e9daeef1bbbb17c026e269fd$__9263a93ac116926101048082019391829003018186803b15801561172657600080fd5b505af415801561173a573d6000803e3d6000fd5b5050505050505050505050565b60165490565b60105460ff1690565b60006117636020836125fd565b92915050565b604080517fafeafd9a00000000000000000000000000000000000000000000000000000000815260006004820181905273ffffffffffffffffffffffffffffffffffffffff861660248301526044820185905260648201849052915173__$8228317518e9daeef1bbbb17c026e269fd$__9263afeafd9a9260848082019391829003018186803b1580156117fc57600080fd5b505af4158015611810573d6000803e3d6000fd5b50505050505050565b604080517f80ca2ba60000000000000000000000000000000000000000000000000000000081526000600482018190526024820184905260016044830152915173__$8228317518e9daeef1bbbb17c026e269fd$__926380ca2ba69260648082019391829003018186803b15801561189057600080fd5b505af41580156118a4573d6000803e3d6000fd5b5050505050565b604080517fd28b935100000000000000000000000000000000000000000000000000000000815260006004820181905273ffffffffffffffffffffffffffffffffffffffff808a1660248401528816604483015260ff871660648301526084820186905260a4820185905283151560c4830152915173__$8228317518e9daeef1bbbb17c026e269fd$__9263d28b93519260e48082019391829003018186803b15801561195757600080fd5b505af415801561196b573d6000803e3d6000fd5b50505050505050505050565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156113eb5780601f106113c0576101008083540402835291602001916113eb565b336000908152601e60205260409020805460ff19166001179055506010805460ff19166001179055565b604080517f96b8b27f00000000000000000000000000000000000000000000000000000000815260006004820181905260248201849052915173__$8228317518e9daeef1bbbb17c026e269fd$__926396b8b27f9260448082019391829003018186803b15801561189057600080fd5b60009081526012602052604090205490565b604080517fecd5244e00000000000000000000000000000000000000000000000000000000815260006004820181905260248201849052915173__$8228317518e9daeef1bbbb17c026e269fd$__9163ecd5244e916044808301926020929190829003018186803b15801561147557600080fd5b60008073__$8228317518e9daeef1bbbb17c026e269fd$__63164cd8c290916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611b4b57600080fd5b505af4158015611b5f573d6000803e3d6000fd5b505050506040513d6020811015611b7557600080fd5b5051905090565b6115d2602082612637565b336000908152601e60205260409020805460ff191660011790558051611bb4906009906020840190612885565b5050565b336000908152601e60205260409020805460ff19166001179055600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b604080517fdc1f0f5300000000000000000000000000000000000000000000000000000000815260006004820181905260248201849052915173__$8228317518e9daeef1bbbb17c026e269fd$__9163dc1f0f53916044808301926020929190829003018186803b15801561147557600080fd5b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156113eb5780601f106113c0576101008083540402835291602001916113eb565b60155490565b336000908152601e602052604090205460ff16151560011480611d1657503033145b611d6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061295d6028913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff166000908152601e60205260409020805460ff19166001179055565b604080517fb94677da00000000000000000000000000000000000000000000000000000000815260006004820181905260248201849052915173__$8228317518e9daeef1bbbb17c026e269fd$__9163b94677da916044808301926020929190829003018186803b15801561147557600080fd5b60065460ff1690565b73ffffffffffffffffffffffffffffffffffffffff166000908152601e602052604090205460ff1690565b60008073__$8228317518e9daeef1bbbb17c026e269fd$__6333c13e0d90916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611b4b57600080fd5b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b600d5490565b336000908152601e60205260409020805460ff19166001179055600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b503090565b604080517f76e455e100000000000000000000000000000000000000000000000000000000815260006004820181905260248201849052915173__$8228317518e9daeef1bbbb17c026e269fd$__916376e455e1916044808301926020929190829003018186803b15801561147557600080fd5b60145490565b600e5490565b336000908152601e60205260409020805460ff19166001179055600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600080601301828154811061201f57fe5b90600052602060002001549050919050565b60008073__$8228317518e9daeef1bbbb17c026e269fd$__63828c7b7290916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611b4b57600080fd5b336000908152601e60205260409020805460ff191660011790556006805460ff1916911515919091179055565b336000908152601e60205260409020805460ff19166001179055600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b336000908152601e602052604090205460ff1615156001148061213457503033145b612189576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061295d6028913960400191505060405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163017905587516121c69060079060208b0190612885565b5086516121da9060089060208a0190612885565b50600a869055600b859055600c849055600d839055600e8290556006805460ff1916600117905573ffffffffffffffffffffffffffffffffffffffff81161561222857612228602082612524565b5050505050505050565b604080517fe5932f4200000000000000000000000000000000000000000000000000000000815260006004820181905273ffffffffffffffffffffffffffffffffffffffff80871660248401528516604483015260648201849052915173__$8228317518e9daeef1bbbb17c026e269fd$__9263e5932f429260848082019391829003018186803b1580156117fc57600080fd5b336000908152601e602052604090205460ff161515600114806122e857503033145b61233d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061295d6028913960400191505060405180910390fd5b336000908152601e60205260409020805460ff19169055565b336000908152601e60205260409020805460ff19166001179055600555565b60009081526011602052604090205460ff1690565b604080517fafeafd9a00000000000000000000000000000000000000000000000000000000815260006004820181905273ffffffffffffffffffffffffffffffffffffffff851660248301526044820184905260016064830152915173__$8228317518e9daeef1bbbb17c026e269fd$__9263afeafd9a9260848082019391829003018186803b15801561153457600080fd5b60055490565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b60135490565b600080600080600080600073__$8228317518e9daeef1bbbb17c026e269fd$__635b68e93c9091896040518363ffffffff1660e01b8152600401808381526020018281526020019250505060c06040518083038186803b1580156124b657600080fd5b505af41580156124ca573d6000803e3d6000fd5b505050506040513d60c08110156124e057600080fd5b508051602082015160408301516060840151608085015160a090950151939c929b5090995097509195509350915050565b6000611763602083612810565b600a5490565b61252e8282612810565b15612584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612985602a913960400191505060405180910390fd5b6001828101805491820181556000818152602080822090930180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff959095169485179055905492815292905260409091206000199091019055565b6001015490565b600082600101828154811061260e57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169392505050565b6126418282612810565b612696576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612933602a913960400191505060405180910390fd5b600060016126a3846125f6565b73ffffffffffffffffffffffffffffffffffffffff841660009081526020869052604090205491900391508082146127d45760008460010183815481106126e657fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1680835290879052604090912083905560018601805491925082918490811061272e57fe5b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9485161790559186168152908690526040812055600185018054600019810190811061279d57fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555061280a565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208590526040812081905561280a906001860190612903565b50505050565b600182015460009061282457506000611763565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260208590526040902054600185018054909190811061285b57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16149392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106128c657805160ff19168380011785556128f3565b828001600101855582156128f3579182015b828111156128f35782518255916020019190600101906128d8565b506128ff92915061291d565b5090565b50805460008255906000526020600020908101906115d291905b5b808211156128ff576000815560010161291e56fe416464726573735365743a206b657920646f6573206e6f7420657869737420696e20746865207365742e436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f6e74726f6c6c6572416464726573735365743a206b657920616c72656164792065786973747320696e20746865207365742ea2646970667358221220229eac68c1a29569ca08334acbd6d26e986246299c2fe1fe526b30a63e7c903164736f6c63430007030033436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f6e74726f6c6c6572a2646970667358221220d737a6f55244bb343f1eb734ed9a0229736527367df1a8162c6c1a58b567888864736f6c63430007030033",
  "libraries": {
    "GovernanceLib": "0x11d4144642F7874Bb4f626802530aFf9e2541233",
    "Strings": "0xe98D76f55e5Dae2DE566CC8Aa1a36282742eabf7",
    "SafeMath": "0x753f0df0a61c5F8A0eB31c6Bf6e7363943Eb225B",
    "AddressSet": "0xe696d6C522A45D46f76E7Dd3D3602afc47854212",
    "UInt256Set": "0xB5e2b27Cf86ba540c54300a9D49264246Da189a1",
    "ProposalsLib": "0xCF3A5C4Bf494cbDA9d2f8FAB54dfAf952aD860c9",
    "Create2": "0x117f8511d54E60dE2F1C63F0Ac1c7C05473cdAa4",
    "ComplexPoolLib": "0xc79FFA1E3b5e834F632aa37be723382bD74d67da"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "addCustomNFTGemPool(address,string,string)": {
        "details": "add an existing gem pool to factory(for migrations)"
      },
      "allNFTGemPools(uint256)": {
        "details": "get the quantized token for this"
      },
      "allNFTGemPoolsLength()": {
        "details": "number of quantized addresses"
      },
      "createCustomNFTGemPool(bytes,string,string)": {
        "details": "deploy a new erc20 token using create2"
      },
      "createNFTGemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)": {
        "details": "deploy a new erc20 token using create2"
      },
      "getNFTGemPool(uint256)": {
        "details": "get the quantized token for this"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "relinquishControl()": {
        "details": "Check if this address is a controller"
      },
      "removeGemPool(uint256)": {
        "details": "remove a gem pool from the list using its symbol hash"
      },
      "removeGemPoolAt(uint256)": {
        "details": "remove a gem pool from the list using its index into pools array"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10169,
        "contract": "src/factories/NFTGemPoolFactory.sol:NFTGemPoolFactory",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10560,
        "contract": "src/factories/NFTGemPoolFactory.sol:NFTGemPoolFactory",
        "label": "operator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10564,
        "contract": "src/factories/NFTGemPoolFactory.sol:NFTGemPoolFactory",
        "label": "_getNFTGemPool",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10567,
        "contract": "src/factories/NFTGemPoolFactory.sol:NFTGemPoolFactory",
        "label": "_allNFTGemPools",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}