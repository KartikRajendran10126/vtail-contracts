{
  "address": "0xaeb86F3860AD5B29aE141c56709835130ecbE0D9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        }
      ],
      "name": "addressOfProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "govAddress",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xbdf536b36d7400c258c25b16264f3572f9c80957b87a3cf354c8661a66b3b5ff",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0xaeb86F3860AD5B29aE141c56709835130ecbE0D9",
    "transactionIndex": 0,
    "gasUsed": "806907",
    "logsBloom": "0x
    "blockHash": "0x0000510d00001607c0c179d01d6c1a10c63084f00bb745a8f6f9534f2cfbb9a5",
    "transactionHash": "0xbdf536b36d7400c258c25b16264f3572f9c80957b87a3cf354c8661a66b3b5ff",
    "logs": [],
    "blockNumber": 11798079,
    "cumulativeGasUsed": "806907",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b06c540bf558ebe1763f6f5fe903171f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"addressOfProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"govAddress\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createPool(address,string,string,uint256,uint256,uint256,uint256,uint256,address)\":{\"details\":\"create a new pool\"},\"createProposalVoteTokens(address,uint256)\":{\"details\":\"create vote tokens to vote on given proposal\"},\"destroyProposalVoteTokens(address,uint256)\":{\"details\":\"destroy the vote tokens for the given proposal\"},\"execute(address,address)\":{\"details\":\"execute craete pool proposal\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/governance/GovernanceLib.sol\":\"GovernanceLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/governance/GovernanceLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolFactory.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/IProposal.sol\\\";\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\nlibrary GovernanceLib {\\n    // calculates the CREATE2 address for the quantized erc20 without making any external calls\\n    function addressOfProposal(\\n        address factory,\\n        address submitter,\\n        string memory title\\n    ) public pure returns (address govAddress) {\\n        govAddress = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(submitter, title)),\\n                            hex\\\"74f827a6bb3b7ed4cd86bd3c09b189a9496bc40d83635649e1e4df1c4e836ebf\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev create vote tokens to vote on given proposal\\n     */\\n    function createProposalVoteTokens(address multitoken, uint256 proposalHash)\\n        external\\n    {\\n        for (\\n            uint256 i = 0;\\n            i < INFTGemMultiToken(multitoken).allTokenHoldersLength(0);\\n            i++\\n        ) {\\n            address holder = INFTGemMultiToken(multitoken).allTokenHolders(\\n                0,\\n                i\\n            );\\n            INFTGemMultiToken(multitoken).mint(\\n                holder,\\n                proposalHash,\\n                IERC1155(multitoken).balanceOf(holder, 0)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev destroy the vote tokens for the given proposal\\n     */\\n    function destroyProposalVoteTokens(address multitoken, uint256 proposalHash)\\n        external\\n    {\\n        for (\\n            uint256 i = 0;\\n            i < INFTGemMultiToken(multitoken).allTokenHoldersLength(0);\\n            i++\\n        ) {\\n            address holder = INFTGemMultiToken(multitoken).allTokenHolders(\\n                0,\\n                i\\n            );\\n            INFTGemMultiToken(multitoken).burn(\\n                holder,\\n                proposalHash,\\n                IERC1155(multitoken).balanceOf(holder, proposalHash)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev execute craete pool proposal\\n     */\\n    function execute(address factory, address proposalAddress)\\n        public\\n        returns (address newPool)\\n    {\\n        // get the data for the new pool from the proposal\\n        address proposalData = IProposal(proposalAddress).proposalData();\\n\\n        (\\n            string memory symbol,\\n            string memory name,\\n            uint256 ethPrice,\\n            uint256 minTime,\\n            uint256 maxTime,\\n            uint256 diffStep,\\n            uint256 maxClaims,\\n            address allowedToken\\n        ) = ICreatePoolProposalData(proposalData).data();\\n\\n        // create the new pool\\n        newPool = createPool(\\n            factory,\\n            symbol,\\n            name,\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffStep,\\n            maxClaims,\\n            allowedToken\\n        );\\n    }\\n\\n    /**\\n     * @dev create a new pool\\n     */\\n    function createPool(\\n        address factory,\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) public returns (address pool) {\\n        pool = INFTGemPoolFactory(factory).createNFTGemPool(\\n            symbol,\\n            name,\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxClaims,\\n            allowedToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x28f0cbc322eb3b056ac1e1751a015697b5d2b642e3ead48486dee6f29c500680\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n    event ControllerRemoved(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2a44548d9ba1bcd73d5734b2265db6c1556c013ccc61df621a6cbd5cca42cfaf\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    enum TokenType {\\n        GOVERNANCE,\\n        CLAIM,\\n        GEM\\n    }\\n\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to mint a claim or a gem\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        TokenType tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        returns (TokenType, address);\\n}\\n\",\"keccak256\":\"0xb871feba8e614aab0f81f26db323a68649f8d1cf6641848984e821a7bc02e7a1\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPoolFactory {\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event NFTGemPoolCreated(\\n        address indexed gemPoolAddress,\\n        string gemSymbol,\\n        string gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    );\\n\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event CustomNFTGemPoolCreated(\\n        address indexed gemPoolAdress,\\n        string gemSymbol,\\n        string gemName\\n    );\\n\\n    function nftGemPools() external view returns (address[] memory);\\n\\n    function getNFTGemPool(uint256 _symbolHash) external view returns (address);\\n\\n    function allNFTGemPools(uint256 idx) external view returns (address);\\n\\n    function allNFTGemPoolsLength() external view returns (uint256);\\n\\n    function createCustomNFTGemPool(\\n        bytes memory bytecode,\\n        string memory gemSymbol,\\n        string memory gemName\\n    ) external returns (address payable);\\n\\n    function createNFTGemPool(\\n        string memory gemSymbol,\\n        string memory gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    ) external returns (address payable);\\n\\n    function addCustomNFTGemPool(\\n        address poolAddress,\\n        string memory gemSymbol,\\n        string memory gemName\\n    ) external returns (address payable);\\n}\\n\",\"keccak256\":\"0xdc9f85316fdb3217ad085e2a985fa51e352e6670a92d55ddaf9a18be84cc53df\",\"license\":\"MIT\"},\"src/interfaces/IProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface IProposal {\\n    enum ProposalType {\\n        CREATE_POOL,\\n        FUND_PROJECT,\\n        CHANGE_FEE,\\n        UPDATE_ALLOWLIST\\n    }\\n\\n    enum ProposalStatus {\\n        NOT_FUNDED,\\n        ACTIVE,\\n        PASSED,\\n        FAILED,\\n        EXECUTED,\\n        CLOSED\\n    }\\n\\n    event ProposalCreated(address creator, address pool, uint256 proposalHash);\\n\\n    event ProposalExecuted(uint256 proposalHash);\\n\\n    event ProposalClosed(uint256 proposalHash);\\n\\n    function creator() external view returns (address);\\n\\n    function title() external view returns (string memory);\\n\\n    function funder() external view returns (address);\\n\\n    function expiration() external view returns (uint256);\\n\\n    function status() external view returns (ProposalStatus);\\n\\n    function proposalData() external view returns (address);\\n\\n    function proposalType() external view returns (ProposalType);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address gov) external;\\n\\n    function fund() external payable;\\n\\n    function execute() external;\\n\\n    function close() external;\\n\\n    function initialize(\\n        address,\\n        string memory,\\n        address,\\n        ProposalType\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9702c6803a4f314e9d670b6507dfa622b5817c519150048629f2d46282446c6b\",\"license\":\"MIT\"},\"src/interfaces/IProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ICreatePoolProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            string memory,\\n            string memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address\\n        );\\n}\\n\\ninterface IChangeFeeProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n}\\n\\ninterface IFundProjectProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            string memory,\\n            uint256\\n        );\\n}\\n\\ninterface IUpdateAllowlistProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0xf0444712cc1c9c63bced1153ecf2ca257b384003b973f65811951b15b26e792d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610daf61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c80638851debd1161005a5780638851debd146100ce578063ba03c4f7146100ee578063d80aea151461010157610071565b80631500cfba1461007657806385efa54c146100ac575b600080fd5b81801561008257600080fd5b50610096610091366004610915565b610121565b6040516100a39190610b89565b60405180910390f35b8180156100b857600080fd5b506100cc6100c73660046109ce565b6101d7565b005b8180156100da57600080fd5b506100cc6100e93660046109ce565b61040b565b6100966100fc3660046108b5565b610639565b81801561010d57600080fd5b5061009661011c36600461087d565b610696565b6040517f4ff8f07e0000000000000000000000000000000000000000000000000000000081526000906001600160a01b038b1690634ff8f07e90610177908c908c908c908c908c908c908c908c90600401610bee565b602060405180830381600087803b15801561019157600080fd5b505af11580156101a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c9919061085a565b9a9950505050505050505050565b60005b6040517ff68ee90e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063f68ee90e9061022090600090600401610bd7565b60206040518083038186803b15801561023857600080fd5b505afa15801561024c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102709190610a9f565b811015610406576040517f740ec99e0000000000000000000000000000000000000000000000000000000081526000906001600160a01b0385169063740ec99e906102c19084908690600401610be0565b60206040518083038186803b1580156102d957600080fd5b505afa1580156102ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610311919061085a565b9050836001600160a01b031663156e29f68285876001600160a01b031662fdd58e8660006040518363ffffffff1660e01b8152600401610352929190610b9d565b60206040518083038186803b15801561036a57600080fd5b505afa15801561037e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a29190610a9f565b6040518463ffffffff1660e01b81526004016103c093929190610bb6565b600060405180830381600087803b1580156103da57600080fd5b505af11580156103ee573d6000803e3d6000fd5b505050505080806103fe90610cd4565b9150506101da565b505050565b60005b6040517ff68ee90e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063f68ee90e9061045490600090600401610bd7565b60206040518083038186803b15801561046c57600080fd5b505afa158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190610a9f565b811015610406576040517f740ec99e0000000000000000000000000000000000000000000000000000000081526000906001600160a01b0385169063740ec99e906104f59084908690600401610be0565b60206040518083038186803b15801561050d57600080fd5b505afa158015610521573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610545919061085a565b9050836001600160a01b031663f5298aca8285876001600160a01b031662fdd58e86896040518363ffffffff1660e01b8152600401610585929190610b9d565b60206040518083038186803b15801561059d57600080fd5b505afa1580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d59190610a9f565b6040518463ffffffff1660e01b81526004016105f393929190610bb6565b600060405180830381600087803b15801561060d57600080fd5b505af1158015610621573d6000803e3d6000fd5b5050505050808061063190610cd4565b91505061040e565b600083838360405160200161064f929190610ae3565b60405160208183030381529060405280519060200120604051602001610676929190610b1b565b60408051601f198184030181529190528051602090910120949350505050565b600080826001600160a01b0316634258292f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106d257600080fd5b505afa1580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070a919061085a565b9050600080600080600080600080886001600160a01b03166373d4a13a6040518163ffffffff1660e01b815260040160006040518083038186803b15801561075157600080fd5b505afa158015610765573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261078d91908101906109f9565b975097509750975097509750975097506107ae8c8989898989898989610121565b9c9b505050505050505050505050565b600082601f8301126107ce578081fd5b81356107e16107dc82610c7c565b610c52565b8181528460208386010111156107f5578283fd5b816020850160208301379081016020019190915292915050565b600082601f83011261081f578081fd5b815161082d6107dc82610c7c565b818152846020838601011115610841578283fd5b610852826020830160208701610ca4565b949350505050565b60006020828403121561086b578081fd5b815161087681610d61565b9392505050565b6000806040838503121561088f578081fd5b823561089a81610d61565b915060208301356108aa81610d61565b809150509250929050565b6000806000606084860312156108c9578081fd5b83356108d481610d61565b925060208401356108e481610d61565b9150604084013567ffffffffffffffff8111156108ff578182fd5b61090b868287016107be565b9150509250925092565b60008060008060008060008060006101208a8c031215610933578485fd5b893561093e81610d61565b985060208a013567ffffffffffffffff8082111561095a578687fd5b6109668d838e016107be565b995060408c013591508082111561097b578687fd5b506109888c828d016107be565b97505060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a013591506101008a01356109bd81610d61565b809150509295985092959850929598565b600080604083850312156109e0578182fd5b82356109eb81610d61565b946020939093013593505050565b600080600080600080600080610100898b031215610a15578384fd5b885167ffffffffffffffff80821115610a2c578586fd5b610a388c838d0161080f565b995060208b0151915080821115610a4d578586fd5b50610a5a8b828c0161080f565b97505060408901519550606089015194506080890151935060a0890151925060c0890151915060e0890151610a8e81610d61565b809150509295985092959890939650565b600060208284031215610ab0578081fd5b5051919050565b60008151808452610acf816020860160208601610ca4565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff198460601b1682528251610b0d816014850160208701610ca4565b919091016014019392505050565b7fff00000000000000000000000000000000000000000000000000000000000000815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f74f827a6bb3b7ed4cd86bd3c09b189a9496bc40d83635649e1e4df1c4e836ebf603582015260550190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b90815260200190565b918252602082015260400190565b6000610100808352610c028184018c610ab7565b90508281036020840152610c16818b610ab7565b604084019990995250506060810195909552608085019390935260a084019190915260c08301526001600160a01b031660e09091015292915050565b60405181810167ffffffffffffffff81118282101715610c7457610c74610d32565b604052919050565b600067ffffffffffffffff821115610c9657610c96610d32565b50601f01601f191660200190565b60005b83811015610cbf578181015183820152602001610ca7565b83811115610cce576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d2b577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b0381168114610d7657600080fd5b5056fea2646970667358221220350bbc2f98feab742e6d3f3a49ef3555214b5742d965f4a4627638c59c5717b264736f6c63430008000033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c80638851debd1161005a5780638851debd146100ce578063ba03c4f7146100ee578063d80aea151461010157610071565b80631500cfba1461007657806385efa54c146100ac575b600080fd5b81801561008257600080fd5b50610096610091366004610915565b610121565b6040516100a39190610b89565b60405180910390f35b8180156100b857600080fd5b506100cc6100c73660046109ce565b6101d7565b005b8180156100da57600080fd5b506100cc6100e93660046109ce565b61040b565b6100966100fc3660046108b5565b610639565b81801561010d57600080fd5b5061009661011c36600461087d565b610696565b6040517f4ff8f07e0000000000000000000000000000000000000000000000000000000081526000906001600160a01b038b1690634ff8f07e90610177908c908c908c908c908c908c908c908c90600401610bee565b602060405180830381600087803b15801561019157600080fd5b505af11580156101a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c9919061085a565b9a9950505050505050505050565b60005b6040517ff68ee90e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063f68ee90e9061022090600090600401610bd7565b60206040518083038186803b15801561023857600080fd5b505afa15801561024c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102709190610a9f565b811015610406576040517f740ec99e0000000000000000000000000000000000000000000000000000000081526000906001600160a01b0385169063740ec99e906102c19084908690600401610be0565b60206040518083038186803b1580156102d957600080fd5b505afa1580156102ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610311919061085a565b9050836001600160a01b031663156e29f68285876001600160a01b031662fdd58e8660006040518363ffffffff1660e01b8152600401610352929190610b9d565b60206040518083038186803b15801561036a57600080fd5b505afa15801561037e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a29190610a9f565b6040518463ffffffff1660e01b81526004016103c093929190610bb6565b600060405180830381600087803b1580156103da57600080fd5b505af11580156103ee573d6000803e3d6000fd5b505050505080806103fe90610cd4565b9150506101da565b505050565b60005b6040517ff68ee90e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063f68ee90e9061045490600090600401610bd7565b60206040518083038186803b15801561046c57600080fd5b505afa158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190610a9f565b811015610406576040517f740ec99e0000000000000000000000000000000000000000000000000000000081526000906001600160a01b0385169063740ec99e906104f59084908690600401610be0565b60206040518083038186803b15801561050d57600080fd5b505afa158015610521573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610545919061085a565b9050836001600160a01b031663f5298aca8285876001600160a01b031662fdd58e86896040518363ffffffff1660e01b8152600401610585929190610b9d565b60206040518083038186803b15801561059d57600080fd5b505afa1580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d59190610a9f565b6040518463ffffffff1660e01b81526004016105f393929190610bb6565b600060405180830381600087803b15801561060d57600080fd5b505af1158015610621573d6000803e3d6000fd5b5050505050808061063190610cd4565b91505061040e565b600083838360405160200161064f929190610ae3565b60405160208183030381529060405280519060200120604051602001610676929190610b1b565b60408051601f198184030181529190528051602090910120949350505050565b600080826001600160a01b0316634258292f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106d257600080fd5b505afa1580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070a919061085a565b9050600080600080600080600080886001600160a01b03166373d4a13a6040518163ffffffff1660e01b815260040160006040518083038186803b15801561075157600080fd5b505afa158015610765573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261078d91908101906109f9565b975097509750975097509750975097506107ae8c8989898989898989610121565b9c9b505050505050505050505050565b600082601f8301126107ce578081fd5b81356107e16107dc82610c7c565b610c52565b8181528460208386010111156107f5578283fd5b816020850160208301379081016020019190915292915050565b600082601f83011261081f578081fd5b815161082d6107dc82610c7c565b818152846020838601011115610841578283fd5b610852826020830160208701610ca4565b949350505050565b60006020828403121561086b578081fd5b815161087681610d61565b9392505050565b6000806040838503121561088f578081fd5b823561089a81610d61565b915060208301356108aa81610d61565b809150509250929050565b6000806000606084860312156108c9578081fd5b83356108d481610d61565b925060208401356108e481610d61565b9150604084013567ffffffffffffffff8111156108ff578182fd5b61090b868287016107be565b9150509250925092565b60008060008060008060008060006101208a8c031215610933578485fd5b893561093e81610d61565b985060208a013567ffffffffffffffff8082111561095a578687fd5b6109668d838e016107be565b995060408c013591508082111561097b578687fd5b506109888c828d016107be565b97505060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a013591506101008a01356109bd81610d61565b809150509295985092959850929598565b600080604083850312156109e0578182fd5b82356109eb81610d61565b946020939093013593505050565b600080600080600080600080610100898b031215610a15578384fd5b885167ffffffffffffffff80821115610a2c578586fd5b610a388c838d0161080f565b995060208b0151915080821115610a4d578586fd5b50610a5a8b828c0161080f565b97505060408901519550606089015194506080890151935060a0890151925060c0890151915060e0890151610a8e81610d61565b809150509295985092959890939650565b600060208284031215610ab0578081fd5b5051919050565b60008151808452610acf816020860160208601610ca4565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff198460601b1682528251610b0d816014850160208701610ca4565b919091016014019392505050565b7fff00000000000000000000000000000000000000000000000000000000000000815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f74f827a6bb3b7ed4cd86bd3c09b189a9496bc40d83635649e1e4df1c4e836ebf603582015260550190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b90815260200190565b918252602082015260400190565b6000610100808352610c028184018c610ab7565b90508281036020840152610c16818b610ab7565b604084019990995250506060810195909552608085019390935260a084019190915260c08301526001600160a01b031660e09091015292915050565b60405181810167ffffffffffffffff81118282101715610c7457610c74610d32565b604052919050565b600067ffffffffffffffff821115610c9657610c96610d32565b50601f01601f191660200190565b60005b83811015610cbf578181015183820152602001610ca7565b83811115610cce576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d2b577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b0381168114610d7657600080fd5b5056fea2646970667358221220350bbc2f98feab742e6d3f3a49ef3555214b5742d965f4a4627638c59c5717b264736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createPool(address,string,string,uint256,uint256,uint256,uint256,uint256,address)": {
        "details": "create a new pool"
      },
      "createProposalVoteTokens(address,uint256)": {
        "details": "create vote tokens to vote on given proposal"
      },
      "destroyProposalVoteTokens(address,uint256)": {
        "details": "destroy the vote tokens for the given proposal"
      },
      "execute(address,address)": {
        "details": "execute craete pool proposal"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}