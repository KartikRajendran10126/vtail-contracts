{
  "address": "0xabbc9A75D8A19A1545EA1D705eBa072D77d29B32",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "addProxyRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "allHeldTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "allHeldTokensLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "allProxyRegistries",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allProxyRegistriesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_token",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "allTokenHolders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_token",
          "type": "uint256"
        }
      ],
      "name": "allTokenHoldersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegistryManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenHash",
          "type": "uint256"
        }
      ],
      "name": "getTokenData",
      "outputs": [
        {
          "internalType": "enum INFTGemMultiToken.TokenType",
          "name": "tokenType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "tokenPool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "heldTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "removeProxyRegistryAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "setRegistryManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenHash",
          "type": "uint256"
        },
        {
          "internalType": "enum INFTGemMultiToken.TokenType",
          "name": "tokenType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "tokenPool",
          "type": "address"
        }
      ],
      "name": "setTokenData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_token",
          "type": "uint256"
        }
      ],
      "name": "tokenHolders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "totalBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        }
      ],
      "name": "unlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "theTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xec7d3b3d67195fa5d08ec572b8bbc9c974b796550c42984805573307da335068",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0xabbc9A75D8A19A1545EA1D705eBa072D77d29B32",
    "transactionIndex": 1,
    "gasUsed": "3494215",
    "logsBloom": "0x
    "blockHash": "0x0000585f00000991c795cd094cac0a29ca363a9e09cd7c60b7f12785f1052a36",
    "transactionHash": "0xec7d3b3d67195fa5d08ec572b8bbc9c974b796550c42984805573307da335068",
    "logs": [],
    "blockNumber": 12646013,
    "cumulativeGasUsed": "4067165",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e35a7d29e13fd466572a988d3f7c62ca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"addProxyRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"allHeldTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"allHeldTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"allProxyRegistries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allProxyRegistriesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"allTokenHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"allTokenHoldersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistryManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenHash\",\"type\":\"uint256\"}],\"name\":\"getTokenData\",\"outputs\":[{\"internalType\":\"enum INFTGemMultiToken.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"heldTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeProxyRegistryAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setRegistryManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenHash\",\"type\":\"uint256\"},{\"internalType\":\"enum INFTGemMultiToken.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenPool\",\"type\":\"address\"}],\"name\":\"setTokenData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"tokenHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"theTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"the primary multitoken contract\",\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"addProxyRegistry(address)\":{\"details\":\"add a proxy registry to the list\"},\"allHeldTokens(address,uint256)\":{\"details\":\"held token at index for token holder\"},\"allHeldTokensLength(address)\":{\"details\":\"Returns the count of held tokens for the token holder\"},\"allProxyRegistries(uint256)\":{\"details\":\"Returns proxy registry at index\"},\"allProxyRegistriesLength()\":{\"details\":\"a count of proxy registries\"},\"allTokenHolders(uint256,uint256)\":{\"details\":\"token holder at index for token id\"},\"allTokenHoldersLength(uint256)\":{\"details\":\"Returns the count of token holders for the held token\"},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burn(address,uint256,uint256)\":{\"details\":\"burn some amount of tokens. Only callable by token owner\"},\"burnBatch(address,uint256[],uint256[])\":{\"details\":\"burn some amount of tokens of multiple token types of account. Only callable by token owner\"},\"constructor\":{\"details\":\"Contract initializer.\"},\"getRegistryManager()\":{\"details\":\"Returns the registyry manager account\"},\"getTokenData(uint256)\":{\"details\":\"get the token data for this token tokenhash\"},\"heldTokens(address)\":{\"details\":\"returns an array of held tokens for the token holder\"},\"isApprovedForAll(address,address)\":{\"details\":\"override base functionality to check proxy registries for approvers\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"lock(uint256,uint256)\":{\"details\":\"timelock the tokens from moving until the given time\"},\"mint(address,uint256,uint256)\":{\"details\":\"mint some amount of tokens. Only callable by token owner\"},\"mintBatch(address,uint256[],uint256[])\":{\"details\":\"mint some amount of tokens to multiple recipients. Only callable by token owner\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"},\"removeProxyRegistryAt(uint256)\":{\"details\":\"remove the proxy registry from the list at index\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setRegistryManager(address)\":{\"details\":\"set the registry manager account\"},\"setTokenData(uint256,uint8,address)\":{\"details\":\"set the data for this tokenhash. points to a token type (1 = claim, 2 = gem) and token pool address\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tokenHolders(uint256)\":{\"details\":\"Returns an array of token holders for the given token id\"},\"totalBalances(uint256)\":{\"details\":\"Returns the total balance minted of this type\"},\"unlockTime(address,uint256)\":{\"details\":\"unlock time for token / id\"},\"uri(uint256)\":{\"details\":\"Returns the metadata URI for this token type\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/NFTGemMultiToken.sol\":\"NFTGemMultiToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2222},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x09c24182fc76ee97a5c604b6ff1a8afb3648535b6ba1820c23b243a40cc792a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4f97aa55fc912e2ef5df98d1155d7fd1e7c0d486ad49b5d983d7fe2739ef7749\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8c578d9e30c8f2bb7ac01d108766df87d42b73d4d3638f01d494a894fe7c1f4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller)\\n        external\\n        override\\n        onlyController\\n    {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address)\\n        external\\n        view\\n        override\\n        returns (bool allowed)\\n    {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Remove the sender address from the list of controllers\\n     */\\n    function relinquishControl() external override onlyController {\\n        delete _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0xa31f752b3b092c788ea06a6dced266db79c4407d69733d78bc15e519f39e1d3f\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n    event ControllerRemoved(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2a44548d9ba1bcd73d5734b2265db6c1556c013ccc61df621a6cbd5cca42cfaf\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    enum TokenType {\\n        CLAIM,\\n        GEM\\n    }\\n\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to mint a claim or a gem\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        TokenType tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        returns (TokenType, address);\\n}\\n\",\"keccak256\":\"0x97eec135f56773ee663df1fbc5543e980c2326e85a38072c3aa2b56c13fefd68\",\"license\":\"MIT\"},\"src/libs/AddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @notice Key sets with enumeration and delete. Uses mappings for random\\n * and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced.\\n * @dev Sets are unordered. Delete operations reorder keys. All operations have a\\n * fixed gas cost at any scale, O(1).\\n * author: Rob Hitchens\\n */\\n\\nlibrary AddressSet {\\n    struct Set {\\n        mapping(address => uint256) keyPointers;\\n        address[] keyList;\\n    }\\n\\n    /**\\n     * @notice insert a key.\\n     * @dev duplicate keys are not permitted.\\n     * @param self storage pointer to a Set.\\n     * @param key value to insert.\\n     */\\n    function insert(Set storage self, address key) internal {\\n        require(\\n            !exists(self, key),\\n            \\\"AddressSet: key already exists in the set.\\\"\\n        );\\n        self.keyList.push(key);\\n        self.keyPointers[key] = self.keyList.length - 1;\\n    }\\n\\n    /**\\n     * @notice remove a key.\\n     * @dev key to remove must exist.\\n     * @param self storage pointer to a Set.\\n     * @param key value to remove.\\n     */\\n    function remove(Set storage self, address key) internal {\\n        // TODO: I commented this out do get a test to pass - need to figure out what is up here\\n        // require(\\n        //     exists(self, key),\\n        //     \\\"AddressSet: key does not exist in the set.\\\"\\n        // );\\n        if (!exists(self, key)) return;\\n        uint256 last = count(self) - 1;\\n        uint256 rowToReplace = self.keyPointers[key];\\n        if (rowToReplace != last) {\\n            address keyToMove = self.keyList[last];\\n            self.keyPointers[keyToMove] = rowToReplace;\\n            self.keyList[rowToReplace] = keyToMove;\\n        }\\n        delete self.keyPointers[key];\\n        delete self.keyList[self.keyList.length - 1];\\n    }\\n\\n    /**\\n     * @notice count the keys.\\n     * @param self storage pointer to a Set.\\n     */\\n    function count(Set storage self) internal view returns (uint256) {\\n        return (self.keyList.length);\\n    }\\n\\n    /**\\n     * @notice check if a key is in the Set.\\n     * @param self storage pointer to a Set.\\n     * @param key value to check.\\n     * @return bool true: Set member, false: not a Set member.\\n     */\\n    function exists(Set storage self, address key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */\\n    function keyAtIndex(Set storage self, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return self.keyList[index];\\n    }\\n}\\n\",\"keccak256\":\"0x8f73e6e90595cf298805436baedbd0123c6e34f453a76f686dc8a0b84a8809b4\",\"license\":\"MIT\"},\"src/libs/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nlibrary Strings {\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c,\\n        string memory _d,\\n        string memory _e\\n    ) internal pure returns (string memory) {\\n        bytes memory _ba = bytes(_a);\\n        bytes memory _bb = bytes(_b);\\n        bytes memory _bc = bytes(_c);\\n        bytes memory _bd = bytes(_d);\\n        bytes memory _be = bytes(_e);\\n        string memory abcde = new string(\\n            _ba.length + _bb.length + _bc.length + _bd.length + _be.length\\n        );\\n        bytes memory babcde = bytes(abcde);\\n        uint256 k = 0;\\n        for (uint256 i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\\n        for (uint256 i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\\n        for (uint256 i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\\n        for (uint256 i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\\n        for (uint256 i = 0; i < _be.length; i++) babcde[k++] = _be[i];\\n        return string(babcde);\\n    }\\n\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c,\\n        string memory _d\\n    ) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, _d, \\\"\\\");\\n    }\\n\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c\\n    ) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, \\\"\\\", \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return strConcat(_a, _b, \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0xde8b9ddc237ca4530f16fccbf61a3df6989984bbf9d1c0da49ea289f8ab0a892\",\"license\":\"MIT\"},\"src/libs/UInt256Set.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @notice Key sets with enumeration and delete. Uses mappings for random\\n * and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced.\\n * @dev Sets are unordered. Delete operations reorder keys. All operations have a\\n * fixed gas cost at any scale, O(1).\\n * author: Rob Hitchens\\n */\\n\\nlibrary UInt256Set {\\n    struct Set {\\n        mapping(uint256 => uint256) keyPointers;\\n        uint256[] keyList;\\n    }\\n\\n    /**\\n     * @notice insert a key.\\n     * @dev duplicate keys are not permitted.\\n     * @param self storage pointer to a Set.\\n     * @param key value to insert.\\n     */\\n    function insert(Set storage self, uint256 key) internal {\\n        require(\\n            !exists(self, key),\\n            \\\"UInt256Set: key already exists in the set.\\\"\\n        );\\n        self.keyList.push(key);\\n        self.keyPointers[key] = self.keyList.length - 1;\\n    }\\n\\n    /**\\n     * @notice remove a key.\\n     * @dev key to remove must exist.\\n     * @param self storage pointer to a Set.\\n     * @param key value to remove.\\n     */\\n    function remove(Set storage self, uint256 key) internal {\\n        // TODO: I commented this out do get a test to pass - need to figure out what is up here\\n        // require(\\n        //     exists(self, key),\\n        //     \\\"UInt256Set: key does not exist in the set.\\\"\\n        // );\\n        if (!exists(self, key)) return;\\n        uint256 last = count(self) - 1;\\n        uint256 rowToReplace = self.keyPointers[key];\\n        if (rowToReplace != last) {\\n            uint256 keyToMove = self.keyList[last];\\n            self.keyPointers[keyToMove] = rowToReplace;\\n            self.keyList[rowToReplace] = keyToMove;\\n        }\\n        delete self.keyPointers[key];\\n        delete self.keyList[self.keyList.length - 1];\\n    }\\n\\n    /**\\n     * @notice count the keys.\\n     * @param self storage pointer to a Set.\\n     */\\n    function count(Set storage self) internal view returns (uint256) {\\n        return (self.keyList.length);\\n    }\\n\\n    /**\\n     * @notice check if a key is in the Set.\\n     * @param self storage pointer to a Set.\\n     * @param key value to check.\\n     * @return bool true: Set member, false: not a Set member.\\n     */\\n    function exists(Set storage self, uint256 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */\\n    function keyAtIndex(Set storage self, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return self.keyList[index];\\n    }\\n}\\n\",\"keccak256\":\"0x0940c4009858e982bacf13c01ac1a1320aa3adf15583a9d0ebb4e10cb642cb18\",\"license\":\"MIT\"},\"src/tokens/NFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\nimport \\\"../libs/Strings.sol\\\";\\nimport \\\"../libs/AddressSet.sol\\\";\\nimport \\\"../libs/UInt256Set.sol\\\";\\n\\nimport \\\"../access/Controllable.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\n\\n/**\\n * @dev ProxyContract placeholder - the proxy delegate\\n */\\ncontract OwnableDelegateProxy {\\n\\n}\\n\\n/**\\n * @dev a registry of proxies\\n */\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\n/**\\n * @dev a mock object for testing\\n */\\ncontract MockProxyRegistry {\\n    function proxies(address input) external pure returns (address) {\\n        return input;\\n    }\\n}\\n\\n/**\\n * @dev the primary multitoken contract\\n */\\ncontract NFTGemMultiToken is\\n    ERC1155Pausable,\\n    ERC1155Holder,\\n    INFTGemMultiToken,\\n    Controllable\\n{\\n    using AddressSet for AddressSet.Set;\\n    using UInt256Set for UInt256Set.Set;\\n\\n    using Strings for string;\\n\\n    // proxy registries for exchanges to enable no-fee trading\\n    AddressSet.Set private proxyRegistries;\\n    address private registryManager;\\n\\n    // total balance per token id\\n    mapping(uint256 => uint256) private _totalBalances;\\n    // time-locked tokens\\n    mapping(address => mapping(uint256 => uint256)) private _tokenLocks;\\n\\n    // lists of held tokens by user\\n    mapping(address => UInt256Set.Set) private _heldTokens;\\n    // list of token holders\\n    mapping(uint256 => AddressSet.Set) private _tokenHolders;\\n\\n    // token types and token pool addresses, to link the multitoken to the tokens created on it\\n    mapping(uint256 => INFTGemMultiToken.TokenType) private _tokenTypes;\\n    mapping(uint256 => address) private _tokenPools;\\n\\n    /**\\n     * @dev Contract initializer.\\n     */\\n    constructor() ERC1155(\\\"https://metadata.nftgem.host/\\\") {\\n        _addController(msg.sender);\\n        registryManager = msg.sender;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155, ERC1155Receiver)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev timelock the tokens from moving until the given time\\n     */\\n    function lock(uint256 token, uint256 timestamp) external override {\\n        require(_tokenLocks[_msgSender()][token] < timestamp, \\\"ALREADY_LOCKED\\\");\\n        _tokenLocks[_msgSender()][token] = timestamp;\\n    }\\n\\n    /**\\n     * @dev unlock time for token / id\\n     */\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        override\\n        returns (uint256 theTime)\\n    {\\n        theTime = _tokenLocks[account][token];\\n    }\\n\\n    /**\\n     * @dev Returns the metadata URI for this token type\\n     */\\n    function uri(uint256 _id)\\n        public\\n        view\\n        override(ERC1155)\\n        returns (string memory)\\n    {\\n        // the URI override is here to support IPFS addresses - we need to do the\\n        // id concat here because IPFS can't do it. This makes this call take a little\\n        // longer but the advantage is that the call returns an already-formed URI\\n        require(\\n            _totalBalances[_id] != 0,\\n            \\\"NFTGemMultiToken#uri: NONEXISTENT_TOKEN\\\"\\n        );\\n        return\\n            Strings.strConcat(\\n                ERC1155Pausable(this).uri(_id),\\n                Strings.uint2str(_id)\\n            );\\n    }\\n\\n    /**\\n     * @dev returns an array of held tokens for the token holder\\n     */\\n    function heldTokens(address holder)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return _heldTokens[holder].keyList;\\n    }\\n\\n    /**\\n     * @dev held token at index for token holder\\n     */\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _heldTokens[holder].keyList[_idx];\\n    }\\n\\n    /**\\n     * @dev Returns the count of held tokens for the token holder\\n     */\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _heldTokens[holder].keyList.length;\\n    }\\n\\n    /**\\n     * @dev Returns an array of token holders for the given token id\\n     */\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return _tokenHolders[_token].keyList;\\n    }\\n\\n    /**\\n     * @dev  token holder at index for token id\\n     */\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return _tokenHolders[_token].keyList[_idx];\\n    }\\n\\n    /**\\n     * @dev Returns the count of token holders for the held token\\n     */\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _tokenHolders[_token].keyList.length;\\n    }\\n\\n    /**\\n     * @dev Returns the total balance minted of this type\\n     */\\n    function totalBalances(uint256 _id)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _totalBalances[_id];\\n    }\\n\\n    /**\\n     * @dev Returns proxy registry at index\\n     */\\n    function allProxyRegistries(uint256 _idx)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return proxyRegistries.keyList[_idx];\\n    }\\n\\n    /**\\n     * @dev Returns the registyry manager account\\n     */\\n    function getRegistryManager() external view override returns (address) {\\n        return registryManager;\\n    }\\n\\n    /**\\n     * @dev set the registry manager account\\n     */\\n    function setRegistryManager(address newManager) external override {\\n        require(msg.sender == registryManager, \\\"UNAUTHORIZED\\\");\\n        require(newManager != address(0), \\\"UNAUTHORIZED\\\");\\n        registryManager = newManager;\\n    }\\n\\n    /**\\n     * @dev a count of proxy registries\\n     */\\n    function allProxyRegistriesLength()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return proxyRegistries.keyList.length;\\n    }\\n\\n    /**\\n     * @dev add a proxy registry to the list\\n     */\\n    function addProxyRegistry(address registry) external override {\\n        require(\\n            msg.sender == registryManager || _controllers[msg.sender] == true,\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n        proxyRegistries.insert(registry);\\n    }\\n\\n    /**\\n     * @dev remove the proxy registry from the list at index\\n     */\\n    function removeProxyRegistryAt(uint256 index) external override {\\n        require(\\n            msg.sender == registryManager || _controllers[msg.sender] == true,\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n        require(index < proxyRegistries.keyList.length, \\\"INVALID_INDEX\\\");\\n        proxyRegistries.remove(proxyRegistries.keyList[index]);\\n    }\\n\\n    /**\\n     * @dev override base functionality to check proxy registries for approvers\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        public\\n        view\\n        override\\n        returns (bool isOperator)\\n    {\\n        // Whitelist OpenSea proxy contract for easy trading.\\n        for (uint256 i = 0; i < proxyRegistries.keyList.length; i++) {\\n            ProxyRegistry proxyRegistry = ProxyRegistry(\\n                proxyRegistries.keyList[i]\\n            );\\n            try proxyRegistry.proxies(_owner) returns (\\n                OwnableDelegateProxy thePr\\n            ) {\\n                if (address(thePr) == _operator) {\\n                    return true;\\n                }\\n            } catch {}\\n        }\\n        return ERC1155.isApprovedForAll(_owner, _operator);\\n    }\\n\\n    /**\\n     * @dev mint some amount of tokens. Only callable by token owner\\n     */\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external override onlyController {\\n        _mint(account, uint256(tokenHash), amount, \\\"0x0\\\");\\n    }\\n\\n    /**\\n     * @dev mint some amount of tokens to multiple recipients. Only callable by token owner\\n     */\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external override onlyController {\\n        _mintBatch(to, ids, amounts, \\\"0x0\\\");\\n    }\\n\\n    /**\\n     * @dev burn some amount of tokens of multiple token types of account. Only callable by token owner\\n     */\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external override onlyController {\\n        _burnBatch(account, ids, amounts);\\n    }\\n\\n    /**\\n     * @dev set the data for this tokenhash. points to a token type (1 = claim, 2 = gem) and token pool address\\n     */\\n    function setTokenData(\\n        uint256 tokenHash,\\n        INFTGemMultiToken.TokenType tokenType,\\n        address tokenPool\\n    ) external override onlyController {\\n        _tokenTypes[tokenHash] = tokenType;\\n        _tokenPools[tokenHash] = tokenPool;\\n    }\\n\\n    /**\\n     * @dev get the token data for this token tokenhash\\n     */\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        override\\n        returns (INFTGemMultiToken.TokenType tokenType, address tokenPool)\\n    {\\n        tokenType = _tokenTypes[tokenHash];\\n        tokenPool = _tokenPools[tokenHash];\\n    }\\n\\n    /**\\n     * @dev internal mint overridden to manage token holders and held tokens lists\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._mint(account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev internal minttbatch should account for managing lists\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._mintBatch(to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev burn some amount of tokens. Only callable by token owner\\n     */\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external override onlyController {\\n        _burn(account, uint256(tokenHash), amount);\\n    }\\n\\n    /**\\n     * @dev internal burn overridden to track lists\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._burn(account, id, amount);\\n    }\\n\\n    /**\\n     * @dev internal burnBatch should account for managing lists\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual override {\\n        super._burnBatch(account, ids, amounts);\\n    }\\n\\n    /**\\n     * @dev we override this method in order to manager the token holder and held token lists\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            // prevent send if tokens are locked\\n            if (from != address(0)) {\\n                require(\\n                    _tokenLocks[from][ids[i]] <= block.timestamp,\\n                    \\\"TOKEN_LOCKED\\\"\\n                );\\n            }\\n\\n            // if this is not a mint then remove the held token id from lists if\\n            // this is the last token if this type the sender owns\\n            if (from != address(0) && balanceOf(from, ids[i]) == amounts[i]) {\\n                // find and delete the token id from the token holders held tokens\\n                _heldTokens[from].remove(ids[i]);\\n                _tokenHolders[ids[i]].remove(from);\\n            }\\n\\n            // if this is not a burn and receiver does not yet own token then\\n            // add that account to the token for that id\\n            if (to != address(0) && balanceOf(to, ids[i]) == 0) {\\n                // insert the token id from the token holders held tokens\\\\\\n                _heldTokens[to].insert(ids[i]);\\n                _tokenHolders[ids[i]].insert(to);\\n            }\\n\\n            // inc and dec balances for each token type\\n            if (from == address(0)) {\\n                _totalBalances[uint256(ids[i])] =\\n                    _totalBalances[uint256(ids[i])] +\\n                    (amounts[i]);\\n            }\\n            if (to == address(0)) {\\n                _totalBalances[uint256(ids[i])] =\\n                    _totalBalances[uint256(ids[i])] -\\n                    (amounts[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa4a208f1254f701233f53e64cb072fcce68d565f8d1daf6eb54c9506dc589299\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060408051808201909152601d81527f68747470733a2f2f6d657461646174612e6e667467656d2e686f73742f000000602082015262000051816200007f565b506003805460ff19169055620000673362000098565b600780546001600160a01b031916331790556200019f565b805162000094906002906020840190620000bc565b5050565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b828054620000ca9062000162565b90600052602060002090601f016020900481019282620000ee576000855562000139565b82601f106200010957805160ff191683800117855562000139565b8280016001018555821562000139579182015b82811115620001395782518255916020019190600101906200011c565b50620001479291506200014b565b5090565b5b808211156200014757600081556001016200014c565b6002810460018216806200017757607f821691505b602082108114156200019957634e487b7160e01b600052602260045260246000fd5b50919050565b613d2780620001af6000396000f3fe608060405234801561001057600080fd5b50600436106102405760003560e01c8063923108d911610145578063de0099a3116100bd578063ef72f2761161008c578063f242432a11610071578063f242432a146104ed578063f5298aca14610500578063f68ee90e1461051357610240565b8063ef72f276146104c7578063f23a6e61146104da57610240565b8063de0099a314610486578063e1c28bef14610499578063e985e9c5146104a1578063ed7aae2b146104b457610240565b8063b09afec111610114578063b59a9128116100f9578063b59a912814610440578063bc197c8114610453578063d81d0a151461047357610240565b8063b09afec11461040c578063b429afeb1461042d57610240565b8063923108d9146103b3578063a0f8c694146103d3578063a22cb465146103e6578063a7fc7a07146103f957610240565b80632eb2c2d6116101d85780636b20c454116101a7578063761604ab1161018c578063761604ab146103855780637c8810761461038d5780638d0335d1146103a057610240565b80636b20c45414610352578063740ec99e1461036557610240565b80632eb2c2d61461030f5780634e1273f4146103225780635401982d146103425780635c975abb1461034a57610240565b80631338736f116102145780631338736f146102c3578063156e29f6146102d657806315aef88a146102e95780632e13e81e146102fc57610240565b8062fdd58e1461024557806301ffc9a71461026e57806302aab0861461028e5780630e89341c146102a3575b600080fd5b610258610253366004612ea3565b610526565b6040516102659190613a79565b60405180910390f35b61028161027c366004612fc2565b610580565b60405161026591906132a6565b6102a161029c366004612c9a565b6105e1565b005b6102b66102b1366004613089565b610660565b6040516102659190613300565b6102a16102d13660046130e5565b610717565b6102a16102e4366004612ece565b6107b9565b6102586102f7366004612ea3565b61083d565b6102a161030a366004613089565b610864565b6102a161031d366004612cee565b610915565b610335610330366004612f02565b610973565b604051610265919061326e565b610258610a93565b610281610a9a565b6102a1610360366004612dff565b610aa3565b6103786103733660046130e5565b610aec565b604051610265919061316c565b610378610b39565b6102a161039b3660046130a1565b610b48565b6103786103ae366004613089565b610c00565b6103c66103c1366004613089565b610c41565b6040516102659190613221565b6102586103e1366004612c9a565b610cb0565b6102a16103f4366004612e72565b610cce565b6102a1610407366004612c9a565b610d9c565b61041f61041a366004613089565b610dfe565b6040516102659291906132c6565b61028161043b366004612c9a565b610e2d565b61025861044e366004612ea3565b610e4b565b610466610461366004612cee565b610e99565b60405161026591906132b1565b6102a1610481366004612dff565b610eaa565b610335610494366004612c9a565b610f29565b6102a1610f97565b6102816104af366004612cb6565b610fee565b6102586104c2366004613089565b611115565b6102a16104d5366004612c9a565b611127565b6104666104e8366004612d98565b61117b565b6102a16104fb366004612d98565b61118c565b6102a161050e366004612ece565b6111e3565b610258610521366004613089565b61122c565b60006001600160a01b0383166105575760405162461bcd60e51b815260040161054e906133cd565b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b031982167fd9b67a260000000000000000000000000000000000000000000000000000000014806105ca57506001600160e01b031982166303a24d0760e21b145b806105d957506105d982611241565b90505b919050565b6007546001600160a01b0316331461060b5760405162461bcd60e51b815260040161054e9061342a565b6001600160a01b0381166106315760405162461bcd60e51b815260040161054e9061342a565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60008181526008602052604090205460609061068e5760405162461bcd60e51b815260040161054e906137b7565b6040516303a24d0760e21b81526105d9903090630e89341c906106b5908690600401613a79565b60006040518083038186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107099190810190613016565b6107128461127f565b6113cc565b8060096000610724611408565b6001600160a01b03166001600160a01b03168152602001908152602001600020600084815260200190815260200160002054106107735760405162461bcd60e51b815260040161054e906136c6565b8060096000610780611408565b6001600160a01b03166001600160a01b031681526020019081526020016000206000848152602001908152602001600020819055505050565b3360009081526004602052604090205460ff161515600114806107db57503033145b6107f75760405162461bcd60e51b815260040161054e90613814565b6108388383836040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525061140c565b505050565b6001600160a01b039091166000908152600960209081526040808320938352929052205490565b6007546001600160a01b031633148061089157503360009081526004602052604090205460ff1615156001145b6108ad5760405162461bcd60e51b815260040161054e9061342a565b60065481106108ce5760405162461bcd60e51b815260040161054e90613578565b610912600560010182815481106108f557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546005906001600160a01b031661141e565b50565b61091d611408565b6001600160a01b0316856001600160a01b031614806109435750610943856104af611408565b61095f5760405162461bcd60e51b815260040161054e90613669565b61096c8585858585611585565b5050505050565b606081518351146109965760405162461bcd60e51b815260040161054e90613905565b6000835167ffffffffffffffff8111156109c057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109e9578160200160208202803683370190505b50905060005b8451811015610a8b57610a50858281518110610a1b57634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610a4357634e487b7160e01b600052603260045260246000fd5b6020026020010151610526565b828281518110610a7057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610a8481613b8c565b90506109ef565b509392505050565b6006545b90565b60035460ff1690565b3360009081526004602052604090205460ff16151560011480610ac557503033145b610ae15760405162461bcd60e51b815260040161054e90613814565b610838838383611756565b6000828152600b60205260408120600101805483908110610b1d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169392505050565b6007546001600160a01b031690565b3360009081526004602052604090205460ff16151560011480610b6a57503033145b610b865760405162461bcd60e51b815260040161054e90613814565b6000838152600c60205260409020805483919060ff191660018381811115610bbe57634e487b7160e01b600052602160045260246000fd5b02179055506000928352600d6020526040909220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039093169290921790915550565b600060056001018281548110610c2657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b6000818152600b6020908152604091829020600101805483518184028101840190945280845260609392830182828015610ca457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c86575b50505050509050919050565b6001600160a01b03166000908152600a602052604090206001015490565b816001600160a01b0316610ce0611408565b6001600160a01b03161415610d075760405162461bcd60e51b815260040161054e906138a8565b8060016000610d14611408565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610d58611408565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610d9091906132a6565b60405180910390a35050565b3360009081526004602052604090205460ff16151560011480610dbe57503033145b610dda5760405162461bcd60e51b815260040161054e90613814565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b6000908152600c6020908152604080832054600d9092529091205460ff909116916001600160a01b0390911690565b6001600160a01b031660009081526004602052604090205460ff1690565b6001600160a01b0382166000908152600a60205260408120600101805483908110610e8657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b63bc197c8160e01b95945050505050565b3360009081526004602052604090205460ff16151560011480610ecc57503033145b610ee85760405162461bcd60e51b815260040161054e90613814565b6108388383836040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250611761565b6001600160a01b0381166000908152600a6020908152604091829020600101805483518184028101840190945280845260609392830182828015610ca457602002820191906000526020600020905b815481526020019060010190808311610f785750505050509050919050565b3360009081526004602052604090205460ff16151560011480610fb957503033145b610fd55760405162461bcd60e51b815260040161054e90613814565b336000908152600460205260409020805460ff19169055565b6000805b6006548110156111035760006005600101828154811061102257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040517fc45527910000000000000000000000000000000000000000000000000000000081526001600160a01b039091169150819063c45527919061107790889060040161316c565b60206040518083038186803b15801561108f57600080fd5b505afa9250505080156110bf575060408051601f3d908101601f191682019092526110bc91810190612ffa565b60015b6110c8576110f0565b846001600160a01b0316816001600160a01b031614156110ee576001935050505061057a565b505b50806110fb81613b8c565b915050610ff2565b5061110e838361176d565b9392505050565b60009081526008602052604090205490565b6007546001600160a01b031633148061115457503360009081526004602052604090205460ff1615156001145b6111705760405162461bcd60e51b815260040161054e9061342a565b61091260058261179b565b63f23a6e6160e01b95945050505050565b611194611408565b6001600160a01b0316856001600160a01b031614806111ba57506111ba856104af611408565b6111d65760405162461bcd60e51b815260040161054e9061351b565b61096c8585858585611827565b3360009081526004602052604090205460ff1615156001148061120557503033145b6112215760405162461bcd60e51b815260040161054e90613814565b61083883838361196a565b6000908152600b602052604090206001015490565b60006001600160e01b031982167f4e2312e00000000000000000000000000000000000000000000000000000000014806105d957506105d982611975565b6060816112c0575060408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201526105dc565b8160005b81156112ea57806112d481613b8c565b91506112e39050600a83613b1e565b91506112c4565b60008167ffffffffffffffff81111561131357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561133d576020820181803683370190505b509050600061134d600184613b32565b90505b85156113c357611361600a87613ba7565b61136c906030613b06565b60f81b828261137a81613b75565b93508151811061139a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506113bc600a87613b1e565b9550611350565b50949350505050565b606061110e83836040518060200160405280600081525060405180602001604052806000815250604051806020016040528060008152506119ce565b3390565b61141884848484611dc5565b50505050565b6114288282611ea5565b61143157611581565b6000600161143e84611f14565b6114489190613b32565b6001600160a01b03831660009081526020859052604090205490915080821461150f57600084600101838154811061149057634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168083529087905260409091208390556001860180549192508291849081106114df57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b6001600160a01b03831660009081526020859052604081205560018085018054909161153a91613b32565b8154811061155857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916905550505b5050565b81518351146115a65760405162461bcd60e51b815260040161054e90613962565b6001600160a01b0384166115cc5760405162461bcd60e51b815260040161054e9061360c565b60006115d6611408565b90506115e6818787878787611f1b565b60005b84518110156116e857600085828151811061161457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061164057634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156116905760405162461bcd60e51b815260040161054e9061375a565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906116cd908490613b06565b92505081905550505050806116e190613b8c565b90506115e9565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611738929190613281565b60405180910390a461174e818787878787612334565b505050505050565b610838838383612442565b611418848484846125f3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6117a58282611ea5565b156117c25760405162461bcd60e51b815260040161054e90613a1c565b60018281018054808301825560008281526020902001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055546118099190613b32565b6001600160a01b039091166000908152602092909252604090912055565b6001600160a01b03841661184d5760405162461bcd60e51b815260040161054e9061360c565b6000611857611408565b905061187781878761186888612774565b61187188612774565b87611f1b565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156118b85760405162461bcd60e51b815260040161054e9061375a565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906118f5908490613b06565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161194b929190613a82565b60405180910390a46119618288888888886127cd565b50505050505050565b61083883838361289e565b60006001600160e01b031982167fd9b67a260000000000000000000000000000000000000000000000000000000014806119bf57506001600160e01b031982166303a24d0760e21b145b806105d957506105d9826129ad565b805182518451865188516060948a948a948a948a948a946000949093909290916119f89190613b06565b611a029190613b06565b611a0c9190613b06565b611a169190613b06565b67ffffffffffffffff811115611a3c57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a66576020820181803683370190505b509050806000805b8851811015611b1257888181518110611a9757634e487b7160e01b600052603260045260246000fd5b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383611ac981613b8c565b945081518110611ae957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611b0a81613b8c565b915050611a6e565b5060005b8751811015611bba57878181518110611b3f57634e487b7160e01b600052603260045260246000fd5b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383611b7181613b8c565b945081518110611b9157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611bb281613b8c565b915050611b16565b5060005b8651811015611c6257868181518110611be757634e487b7160e01b600052603260045260246000fd5b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383611c1981613b8c565b945081518110611c3957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611c5a81613b8c565b915050611bbe565b5060005b8551811015611d0a57858181518110611c8f57634e487b7160e01b600052603260045260246000fd5b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383611cc181613b8c565b945081518110611ce157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611d0281613b8c565b915050611c66565b5060005b8451811015611db257848181518110611d3757634e487b7160e01b600052603260045260246000fd5b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383611d6981613b8c565b945081518110611d8957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611daa81613b8c565b915050611d0e565b50909d9c50505050505050505050505050565b6001600160a01b038416611deb5760405162461bcd60e51b815260040161054e906139bf565b6000611df5611408565b9050611e078160008761186888612774565b6000848152602081815260408083206001600160a01b038916845290915281208054859290611e37908490613b06565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051611e8e929190613a82565b60405180910390a461096c816000878787876127cd565b6001820154600090611eb95750600061057a565b6001600160a01b0382166000818152602085905260409020546001850180549091908110611ef757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316149392505050565b6001015490565b611f298686868686866129df565b60005b8351811015611961576001600160a01b03861615611fb6576001600160a01b03861660009081526009602052604081208551429290879085908110611f8157634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020541115611fb65760405162461bcd60e51b815260040161054e90613871565b6001600160a01b038616158015906120175750828181518110611fe957634e487b7160e01b600052603260045260246000fd5b602002602001015161201587868481518110610a4357634e487b7160e01b600052603260045260246000fd5b145b156120c65761207a84828151811061203f57634e487b7160e01b600052603260045260246000fd5b6020026020010151600a6000896001600160a01b03166001600160a01b03168152602001908152602001600020612a1290919063ffffffff16565b6120c686600b60008785815181106120a257634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002061141e90919063ffffffff16565b6001600160a01b038516158015906120ff57506120fd85858381518110610a4357634e487b7160e01b600052603260045260246000fd5b155b156121ae5761216284828151811061212757634e487b7160e01b600052603260045260246000fd5b6020026020010151600a6000886001600160a01b03166001600160a01b03168152602001908152602001600020612b2390919063ffffffff16565b6121ae85600b600087858151811061218a57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002061179b90919063ffffffff16565b6001600160a01b038616612268578281815181106121dc57634e487b7160e01b600052603260045260246000fd5b60200260200101516008600086848151811061220857634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020546122299190613b06565b6008600086848151811061224d57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020819055505b6001600160a01b0385166123225782818151811061229657634e487b7160e01b600052603260045260246000fd5b6020026020010151600860008684815181106122c257634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020546122e39190613b32565b6008600086848151811061230757634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020819055505b8061232c81613b8c565b915050611f2c565b612346846001600160a01b0316612b80565b1561174e5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061237f9089908990889088908890600401613180565b602060405180830381600087803b15801561239957600080fd5b505af19250505080156123c9575060408051601f3d908101601f191682019092526123c691810190612fde565b60015b612412576123d5613c03565b806123e057506123fa565b8060405162461bcd60e51b815260040161054e9190613300565b60405162461bcd60e51b815260040161054e90613313565b6001600160e01b0319811663bc197c8160e01b146119615760405162461bcd60e51b815260040161054e90613370565b6001600160a01b0383166124685760405162461bcd60e51b815260040161054e906136fd565b80518251146124895760405162461bcd60e51b815260040161054e90613962565b6000612493611408565b90506124b381856000868660405180602001604052806000815250611f1b565b60005b83518110156125945760008482815181106124e157634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061250d57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038c16835290935291909120549091508181101561255d5760405162461bcd60e51b815260040161054e90613461565b6000928352602083815260408085206001600160a01b038b168652909152909220910390558061258c81613b8c565b9150506124b6565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516125e5929190613281565b60405180910390a450505050565b6001600160a01b0384166126195760405162461bcd60e51b815260040161054e906139bf565b815183511461263a5760405162461bcd60e51b815260040161054e90613962565b6000612644611408565b905061265581600087878787611f1b565b60005b845181101561270c5783818151811061268157634e487b7160e01b600052603260045260246000fd5b60200260200101516000808784815181106126ac57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546126f49190613b06565b9091555081905061270481613b8c565b915050612658565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161275d929190613281565b60405180910390a461096c81600087878787612334565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106127bc57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6127df846001600160a01b0316612b80565b1561174e5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061281890899089908890889088906004016131de565b602060405180830381600087803b15801561283257600080fd5b505af1925050508015612862575060408051601f3d908101601f1916820190925261285f91810190612fde565b60015b61286e576123d5613c03565b6001600160e01b0319811663f23a6e6160e01b146119615760405162461bcd60e51b815260040161054e90613370565b6001600160a01b0383166128c45760405162461bcd60e51b815260040161054e906136fd565b60006128ce611408565b90506128fe818560006128e087612774565b6128e987612774565b60405180602001604052806000815250611f1b565b6000838152602081815260408083206001600160a01b03881684529091529020548281101561293f5760405162461bcd60e51b815260040161054e90613461565b6000848152602081815260408083206001600160a01b03808a16808652919093528184208786039055905190918516907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629061299e9089908990613a82565b60405180910390a45050505050565b6001600160e01b031981167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b6129ed86868686868661174e565b6129f5610a9a565b1561174e5760405162461bcd60e51b815260040161054e906134be565b612a1c8282612b86565b612a2557611581565b60006001612a3284611f14565b612a3c9190613b32565b600083815260208590526040902054909150808214612ad3576000846001018381548110612a7a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050818560000160008381526020019081526020016000208190555080856001018381548110612ac557634e487b7160e01b600052603260045260246000fd5b600091825260209091200155505b600083815260208590526040812055600180850180549091612af491613b32565b81548110612b1257634e487b7160e01b600052603260045260246000fd5b600091825260208220015550505050565b612b2d8282612b86565b15612b4a5760405162461bcd60e51b815260040161054e906135af565b6001808301805480830182556000828152602090200183905554612b6e9190613b32565b60009182526020929092526040902055565b3b151590565b6001820154600090612b9a5750600061057a565b6000828152602084905260409020546001840180548492908110612bce57634e487b7160e01b600052603260045260246000fd5b906000526020600020015414905092915050565b600082601f830112612bf2578081fd5b81356020612c07612c0283613aba565b613a90565b8281528181019085830183850287018401881015612c23578586fd5b855b85811015612c4157813584529284019290840190600101612c25565b5090979650505050505050565b600082601f830112612c5e578081fd5b8135612c6c612c0282613ade565b818152846020838601011115612c80578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612cab578081fd5b813561110e81613cc6565b60008060408385031215612cc8578081fd5b8235612cd381613cc6565b91506020830135612ce381613cc6565b809150509250929050565b600080600080600060a08688031215612d05578081fd5b8535612d1081613cc6565b94506020860135612d2081613cc6565b9350604086013567ffffffffffffffff80821115612d3c578283fd5b612d4889838a01612be2565b94506060880135915080821115612d5d578283fd5b612d6989838a01612be2565b93506080880135915080821115612d7e578283fd5b50612d8b88828901612c4e565b9150509295509295909350565b600080600080600060a08688031215612daf578081fd5b8535612dba81613cc6565b94506020860135612dca81613cc6565b93506040860135925060608601359150608086013567ffffffffffffffff811115612df3578182fd5b612d8b88828901612c4e565b600080600060608486031215612e13578283fd5b8335612e1e81613cc6565b9250602084013567ffffffffffffffff80821115612e3a578384fd5b612e4687838801612be2565b93506040860135915080821115612e5b578283fd5b50612e6886828701612be2565b9150509250925092565b60008060408385031215612e84578182fd5b8235612e8f81613cc6565b915060208301358015158114612ce3578182fd5b60008060408385031215612eb5578182fd5b8235612ec081613cc6565b946020939093013593505050565b600080600060608486031215612ee2578081fd5b8335612eed81613cc6565b95602085013595506040909401359392505050565b60008060408385031215612f14578182fd5b823567ffffffffffffffff80821115612f2b578384fd5b818501915085601f830112612f3e578384fd5b81356020612f4e612c0283613aba565b82815281810190858301838502870184018b1015612f6a578889fd5b8896505b84871015612f95578035612f8181613cc6565b835260019690960195918301918301612f6e565b5096505086013592505080821115612fab578283fd5b50612fb885828601612be2565b9150509250929050565b600060208284031215612fd3578081fd5b813561110e81613cdb565b600060208284031215612fef578081fd5b815161110e81613cdb565b60006020828403121561300b578081fd5b815161110e81613cc6565b600060208284031215613027578081fd5b815167ffffffffffffffff81111561303d578182fd5b8201601f8101841361304d578182fd5b805161305b612c0282613ade565b81815285602083850101111561306f578384fd5b613080826020830160208601613b49565b95945050505050565b60006020828403121561309a578081fd5b5035919050565b6000806000606084860312156130b5578081fd5b833592506020840135600281106130ca578182fd5b915060408401356130da81613cc6565b809150509250925092565b600080604083850312156130f7578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b8381101561313557815187529582019590820190600101613119565b509495945050505050565b60008151808452613158816020860160208601613b49565b601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b60006001600160a01b03808816835280871660208401525060a060408301526131ac60a0830186613106565b82810360608401526131be8186613106565b905082810360808401526131d28185613140565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261321660a0830184613140565b979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156132625783516001600160a01b03168352928401929184019160010161323d565b50909695505050505050565b60006020825261110e6020830184613106565b6000604082526132946040830185613106565b82810360208401526130808185613106565b901515815260200190565b6001600160e01b031991909116815260200190565b60408101600284106132e857634e487b7160e01b600052602160045260246000fd5b9281526001600160a01b039190911660209091015290565b60006020825261110e6020830184613140565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560408201527f526563656976657220696d706c656d656e746572000000000000000000000000606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a6563746560408201527f6420746f6b656e73000000000000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201527f65726f2061646472657373000000000000000000000000000000000000000000606082015260800190565b6020808252600c908201527f554e415554484f52495a45440000000000000000000000000000000000000000604082015260600190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60408201527f616e636500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060408201527f7768696c65207061757365640000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201527f20617070726f7665640000000000000000000000000000000000000000000000606082015260800190565b6020808252600d908201527f494e56414c49445f494e44455800000000000000000000000000000000000000604082015260600190565b6020808252602a908201527f55496e743235365365743a206b657920616c726561647920657869737473206960408201527f6e20746865207365742e00000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526032908201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060408201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000606082015260800190565b6020808252600e908201527f414c52454144595f4c4f434b4544000000000000000000000000000000000000604082015260600190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201527f72207472616e7366657200000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f4e465447656d4d756c7469546f6b656e237572693a204e4f4e4558495354454e60408201527f545f544f4b454e00000000000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b6020808252600c908201527f544f4b454e5f4c4f434b45440000000000000000000000000000000000000000604082015260600190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360408201527f20666f722073656c660000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860408201527f206d69736d617463680000000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060408201527f6d69736d61746368000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f416464726573735365743a206b657920616c726561647920657869737473206960408201527f6e20746865207365742e00000000000000000000000000000000000000000000606082015260800190565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715613ab257613ab2613be7565b604052919050565b600067ffffffffffffffff821115613ad457613ad4613be7565b5060209081020190565b600067ffffffffffffffff821115613af857613af8613be7565b50601f01601f191660200190565b60008219821115613b1957613b19613bbb565b500190565b600082613b2d57613b2d613bd1565b500490565b600082821015613b4457613b44613bbb565b500390565b60005b83811015613b64578181015183820152602001613b4c565b838111156114185750506000910152565b600081613b8457613b84613bbb565b506000190190565b6000600019821415613ba057613ba0613bbb565b5060010190565b600082613bb657613bb6613bd1565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d1015613c1357610a97565b600481823e6308c379a0613c278251613bfd565b14613c3157610a97565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d016004823e80513d67ffffffffffffffff8160248401118184111715613c7f5750505050610a97565b82840192508251915080821115613c995750505050610a97565b503d83016020828401011115613cb157505050610a97565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461091257600080fd5b6001600160e01b03198116811461091257600080fdfea26469706673582212205858de2db9a06e507cc1b95a629b3d69a92c4af8accb784d93d6a395065f3a1564736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102405760003560e01c8063923108d911610145578063de0099a3116100bd578063ef72f2761161008c578063f242432a11610071578063f242432a146104ed578063f5298aca14610500578063f68ee90e1461051357610240565b8063ef72f276146104c7578063f23a6e61146104da57610240565b8063de0099a314610486578063e1c28bef14610499578063e985e9c5146104a1578063ed7aae2b146104b457610240565b8063b09afec111610114578063b59a9128116100f9578063b59a912814610440578063bc197c8114610453578063d81d0a151461047357610240565b8063b09afec11461040c578063b429afeb1461042d57610240565b8063923108d9146103b3578063a0f8c694146103d3578063a22cb465146103e6578063a7fc7a07146103f957610240565b80632eb2c2d6116101d85780636b20c454116101a7578063761604ab1161018c578063761604ab146103855780637c8810761461038d5780638d0335d1146103a057610240565b80636b20c45414610352578063740ec99e1461036557610240565b80632eb2c2d61461030f5780634e1273f4146103225780635401982d146103425780635c975abb1461034a57610240565b80631338736f116102145780631338736f146102c3578063156e29f6146102d657806315aef88a146102e95780632e13e81e146102fc57610240565b8062fdd58e1461024557806301ffc9a71461026e57806302aab0861461028e5780630e89341c146102a3575b600080fd5b610258610253366004612ea3565b610526565b6040516102659190613a79565b60405180910390f35b61028161027c366004612fc2565b610580565b60405161026591906132a6565b6102a161029c366004612c9a565b6105e1565b005b6102b66102b1366004613089565b610660565b6040516102659190613300565b6102a16102d13660046130e5565b610717565b6102a16102e4366004612ece565b6107b9565b6102586102f7366004612ea3565b61083d565b6102a161030a366004613089565b610864565b6102a161031d366004612cee565b610915565b610335610330366004612f02565b610973565b604051610265919061326e565b610258610a93565b610281610a9a565b6102a1610360366004612dff565b610aa3565b6103786103733660046130e5565b610aec565b604051610265919061316c565b610378610b39565b6102a161039b3660046130a1565b610b48565b6103786103ae366004613089565b610c00565b6103c66103c1366004613089565b610c41565b6040516102659190613221565b6102586103e1366004612c9a565b610cb0565b6102a16103f4366004612e72565b610cce565b6102a1610407366004612c9a565b610d9c565b61041f61041a366004613089565b610dfe565b6040516102659291906132c6565b61028161043b366004612c9a565b610e2d565b61025861044e366004612ea3565b610e4b565b610466610461366004612cee565b610e99565b60405161026591906132b1565b6102a1610481366004612dff565b610eaa565b610335610494366004612c9a565b610f29565b6102a1610f97565b6102816104af366004612cb6565b610fee565b6102586104c2366004613089565b611115565b6102a16104d5366004612c9a565b611127565b6104666104e8366004612d98565b61117b565b6102a16104fb366004612d98565b61118c565b6102a161050e366004612ece565b6111e3565b610258610521366004613089565b61122c565b60006001600160a01b0383166105575760405162461bcd60e51b815260040161054e906133cd565b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b031982167fd9b67a260000000000000000000000000000000000000000000000000000000014806105ca57506001600160e01b031982166303a24d0760e21b145b806105d957506105d982611241565b90505b919050565b6007546001600160a01b0316331461060b5760405162461bcd60e51b815260040161054e9061342a565b6001600160a01b0381166106315760405162461bcd60e51b815260040161054e9061342a565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60008181526008602052604090205460609061068e5760405162461bcd60e51b815260040161054e906137b7565b6040516303a24d0760e21b81526105d9903090630e89341c906106b5908690600401613a79565b60006040518083038186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107099190810190613016565b6107128461127f565b6113cc565b8060096000610724611408565b6001600160a01b03166001600160a01b03168152602001908152602001600020600084815260200190815260200160002054106107735760405162461bcd60e51b815260040161054e906136c6565b8060096000610780611408565b6001600160a01b03166001600160a01b031681526020019081526020016000206000848152602001908152602001600020819055505050565b3360009081526004602052604090205460ff161515600114806107db57503033145b6107f75760405162461bcd60e51b815260040161054e90613814565b6108388383836040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525061140c565b505050565b6001600160a01b039091166000908152600960209081526040808320938352929052205490565b6007546001600160a01b031633148061089157503360009081526004602052604090205460ff1615156001145b6108ad5760405162461bcd60e51b815260040161054e9061342a565b60065481106108ce5760405162461bcd60e51b815260040161054e90613578565b610912600560010182815481106108f557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546005906001600160a01b031661141e565b50565b61091d611408565b6001600160a01b0316856001600160a01b031614806109435750610943856104af611408565b61095f5760405162461bcd60e51b815260040161054e90613669565b61096c8585858585611585565b5050505050565b606081518351146109965760405162461bcd60e51b815260040161054e90613905565b6000835167ffffffffffffffff8111156109c057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109e9578160200160208202803683370190505b50905060005b8451811015610a8b57610a50858281518110610a1b57634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610a4357634e487b7160e01b600052603260045260246000fd5b6020026020010151610526565b828281518110610a7057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610a8481613b8c565b90506109ef565b509392505050565b6006545b90565b60035460ff1690565b3360009081526004602052604090205460ff16151560011480610ac557503033145b610ae15760405162461bcd60e51b815260040161054e90613814565b610838838383611756565b6000828152600b60205260408120600101805483908110610b1d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169392505050565b6007546001600160a01b031690565b3360009081526004602052604090205460ff16151560011480610b6a57503033145b610b865760405162461bcd60e51b815260040161054e90613814565b6000838152600c60205260409020805483919060ff191660018381811115610bbe57634e487b7160e01b600052602160045260246000fd5b02179055506000928352600d6020526040909220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039093169290921790915550565b600060056001018281548110610c2657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b6000818152600b6020908152604091829020600101805483518184028101840190945280845260609392830182828015610ca457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c86575b50505050509050919050565b6001600160a01b03166000908152600a602052604090206001015490565b816001600160a01b0316610ce0611408565b6001600160a01b03161415610d075760405162461bcd60e51b815260040161054e906138a8565b8060016000610d14611408565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610d58611408565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610d9091906132a6565b60405180910390a35050565b3360009081526004602052604090205460ff16151560011480610dbe57503033145b610dda5760405162461bcd60e51b815260040161054e90613814565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b6000908152600c6020908152604080832054600d9092529091205460ff909116916001600160a01b0390911690565b6001600160a01b031660009081526004602052604090205460ff1690565b6001600160a01b0382166000908152600a60205260408120600101805483908110610e8657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b63bc197c8160e01b95945050505050565b3360009081526004602052604090205460ff16151560011480610ecc57503033145b610ee85760405162461bcd60e51b815260040161054e90613814565b6108388383836040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250611761565b6001600160a01b0381166000908152600a6020908152604091829020600101805483518184028101840190945280845260609392830182828015610ca457602002820191906000526020600020905b815481526020019060010190808311610f785750505050509050919050565b3360009081526004602052604090205460ff16151560011480610fb957503033145b610fd55760405162461bcd60e51b815260040161054e90613814565b336000908152600460205260409020805460ff19169055565b6000805b6006548110156111035760006005600101828154811061102257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040517fc45527910000000000000000000000000000000000000000000000000000000081526001600160a01b039091169150819063c45527919061107790889060040161316c565b60206040518083038186803b15801561108f57600080fd5b505afa9250505080156110bf575060408051601f3d908101601f191682019092526110bc91810190612ffa565b60015b6110c8576110f0565b846001600160a01b0316816001600160a01b031614156110ee576001935050505061057a565b505b50806110fb81613b8c565b915050610ff2565b5061110e838361176d565b9392505050565b60009081526008602052604090205490565b6007546001600160a01b031633148061115457503360009081526004602052604090205460ff1615156001145b6111705760405162461bcd60e51b815260040161054e9061342a565b61091260058261179b565b63f23a6e6160e01b95945050505050565b611194611408565b6001600160a01b0316856001600160a01b031614806111ba57506111ba856104af611408565b6111d65760405162461bcd60e51b815260040161054e9061351b565b61096c8585858585611827565b3360009081526004602052604090205460ff1615156001148061120557503033145b6112215760405162461bcd60e51b815260040161054e90613814565b61083883838361196a565b6000908152600b602052604090206001015490565b60006001600160e01b031982167f4e2312e00000000000000000000000000000000000000000000000000000000014806105d957506105d982611975565b6060816112c0575060408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201526105dc565b8160005b81156112ea57806112d481613b8c565b91506112e39050600a83613b1e565b91506112c4565b60008167ffffffffffffffff81111561131357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561133d576020820181803683370190505b509050600061134d600184613b32565b90505b85156113c357611361600a87613ba7565b61136c906030613b06565b60f81b828261137a81613b75565b93508151811061139a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506113bc600a87613b1e565b9550611350565b50949350505050565b606061110e83836040518060200160405280600081525060405180602001604052806000815250604051806020016040528060008152506119ce565b3390565b61141884848484611dc5565b50505050565b6114288282611ea5565b61143157611581565b6000600161143e84611f14565b6114489190613b32565b6001600160a01b03831660009081526020859052604090205490915080821461150f57600084600101838154811061149057634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168083529087905260409091208390556001860180549192508291849081106114df57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b6001600160a01b03831660009081526020859052604081205560018085018054909161153a91613b32565b8154811061155857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916905550505b5050565b81518351146115a65760405162461bcd60e51b815260040161054e90613962565b6001600160a01b0384166115cc5760405162461bcd60e51b815260040161054e9061360c565b60006115d6611408565b90506115e6818787878787611f1b565b60005b84518110156116e857600085828151811061161457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061164057634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156116905760405162461bcd60e51b815260040161054e9061375a565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906116cd908490613b06565b92505081905550505050806116e190613b8c565b90506115e9565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611738929190613281565b60405180910390a461174e818787878787612334565b505050505050565b610838838383612442565b611418848484846125f3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6117a58282611ea5565b156117c25760405162461bcd60e51b815260040161054e90613a1c565b60018281018054808301825560008281526020902001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055546118099190613b32565b6001600160a01b039091166000908152602092909252604090912055565b6001600160a01b03841661184d5760405162461bcd60e51b815260040161054e9061360c565b6000611857611408565b905061187781878761186888612774565b61187188612774565b87611f1b565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156118b85760405162461bcd60e51b815260040161054e9061375a565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906118f5908490613b06565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161194b929190613a82565b60405180910390a46119618288888888886127cd565b50505050505050565b61083883838361289e565b60006001600160e01b031982167fd9b67a260000000000000000000000000000000000000000000000000000000014806119bf57506001600160e01b031982166303a24d0760e21b145b806105d957506105d9826129ad565b805182518451865188516060948a948a948a948a948a946000949093909290916119f89190613b06565b611a029190613b06565b611a0c9190613b06565b611a169190613b06565b67ffffffffffffffff811115611a3c57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a66576020820181803683370190505b509050806000805b8851811015611b1257888181518110611a9757634e487b7160e01b600052603260045260246000fd5b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383611ac981613b8c565b945081518110611ae957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611b0a81613b8c565b915050611a6e565b5060005b8751811015611bba57878181518110611b3f57634e487b7160e01b600052603260045260246000fd5b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383611b7181613b8c565b945081518110611b9157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611bb281613b8c565b915050611b16565b5060005b8651811015611c6257868181518110611be757634e487b7160e01b600052603260045260246000fd5b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383611c1981613b8c565b945081518110611c3957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611c5a81613b8c565b915050611bbe565b5060005b8551811015611d0a57858181518110611c8f57634e487b7160e01b600052603260045260246000fd5b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383611cc181613b8c565b945081518110611ce157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611d0281613b8c565b915050611c66565b5060005b8451811015611db257848181518110611d3757634e487b7160e01b600052603260045260246000fd5b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383611d6981613b8c565b945081518110611d8957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611daa81613b8c565b915050611d0e565b50909d9c50505050505050505050505050565b6001600160a01b038416611deb5760405162461bcd60e51b815260040161054e906139bf565b6000611df5611408565b9050611e078160008761186888612774565b6000848152602081815260408083206001600160a01b038916845290915281208054859290611e37908490613b06565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051611e8e929190613a82565b60405180910390a461096c816000878787876127cd565b6001820154600090611eb95750600061057a565b6001600160a01b0382166000818152602085905260409020546001850180549091908110611ef757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316149392505050565b6001015490565b611f298686868686866129df565b60005b8351811015611961576001600160a01b03861615611fb6576001600160a01b03861660009081526009602052604081208551429290879085908110611f8157634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020541115611fb65760405162461bcd60e51b815260040161054e90613871565b6001600160a01b038616158015906120175750828181518110611fe957634e487b7160e01b600052603260045260246000fd5b602002602001015161201587868481518110610a4357634e487b7160e01b600052603260045260246000fd5b145b156120c65761207a84828151811061203f57634e487b7160e01b600052603260045260246000fd5b6020026020010151600a6000896001600160a01b03166001600160a01b03168152602001908152602001600020612a1290919063ffffffff16565b6120c686600b60008785815181106120a257634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002061141e90919063ffffffff16565b6001600160a01b038516158015906120ff57506120fd85858381518110610a4357634e487b7160e01b600052603260045260246000fd5b155b156121ae5761216284828151811061212757634e487b7160e01b600052603260045260246000fd5b6020026020010151600a6000886001600160a01b03166001600160a01b03168152602001908152602001600020612b2390919063ffffffff16565b6121ae85600b600087858151811061218a57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002061179b90919063ffffffff16565b6001600160a01b038616612268578281815181106121dc57634e487b7160e01b600052603260045260246000fd5b60200260200101516008600086848151811061220857634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020546122299190613b06565b6008600086848151811061224d57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020819055505b6001600160a01b0385166123225782818151811061229657634e487b7160e01b600052603260045260246000fd5b6020026020010151600860008684815181106122c257634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020546122e39190613b32565b6008600086848151811061230757634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020819055505b8061232c81613b8c565b915050611f2c565b612346846001600160a01b0316612b80565b1561174e5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061237f9089908990889088908890600401613180565b602060405180830381600087803b15801561239957600080fd5b505af19250505080156123c9575060408051601f3d908101601f191682019092526123c691810190612fde565b60015b612412576123d5613c03565b806123e057506123fa565b8060405162461bcd60e51b815260040161054e9190613300565b60405162461bcd60e51b815260040161054e90613313565b6001600160e01b0319811663bc197c8160e01b146119615760405162461bcd60e51b815260040161054e90613370565b6001600160a01b0383166124685760405162461bcd60e51b815260040161054e906136fd565b80518251146124895760405162461bcd60e51b815260040161054e90613962565b6000612493611408565b90506124b381856000868660405180602001604052806000815250611f1b565b60005b83518110156125945760008482815181106124e157634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061250d57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038c16835290935291909120549091508181101561255d5760405162461bcd60e51b815260040161054e90613461565b6000928352602083815260408085206001600160a01b038b168652909152909220910390558061258c81613b8c565b9150506124b6565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516125e5929190613281565b60405180910390a450505050565b6001600160a01b0384166126195760405162461bcd60e51b815260040161054e906139bf565b815183511461263a5760405162461bcd60e51b815260040161054e90613962565b6000612644611408565b905061265581600087878787611f1b565b60005b845181101561270c5783818151811061268157634e487b7160e01b600052603260045260246000fd5b60200260200101516000808784815181106126ac57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546126f49190613b06565b9091555081905061270481613b8c565b915050612658565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161275d929190613281565b60405180910390a461096c81600087878787612334565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106127bc57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6127df846001600160a01b0316612b80565b1561174e5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061281890899089908890889088906004016131de565b602060405180830381600087803b15801561283257600080fd5b505af1925050508015612862575060408051601f3d908101601f1916820190925261285f91810190612fde565b60015b61286e576123d5613c03565b6001600160e01b0319811663f23a6e6160e01b146119615760405162461bcd60e51b815260040161054e90613370565b6001600160a01b0383166128c45760405162461bcd60e51b815260040161054e906136fd565b60006128ce611408565b90506128fe818560006128e087612774565b6128e987612774565b60405180602001604052806000815250611f1b565b6000838152602081815260408083206001600160a01b03881684529091529020548281101561293f5760405162461bcd60e51b815260040161054e90613461565b6000848152602081815260408083206001600160a01b03808a16808652919093528184208786039055905190918516907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629061299e9089908990613a82565b60405180910390a45050505050565b6001600160e01b031981167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b6129ed86868686868661174e565b6129f5610a9a565b1561174e5760405162461bcd60e51b815260040161054e906134be565b612a1c8282612b86565b612a2557611581565b60006001612a3284611f14565b612a3c9190613b32565b600083815260208590526040902054909150808214612ad3576000846001018381548110612a7a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050818560000160008381526020019081526020016000208190555080856001018381548110612ac557634e487b7160e01b600052603260045260246000fd5b600091825260209091200155505b600083815260208590526040812055600180850180549091612af491613b32565b81548110612b1257634e487b7160e01b600052603260045260246000fd5b600091825260208220015550505050565b612b2d8282612b86565b15612b4a5760405162461bcd60e51b815260040161054e906135af565b6001808301805480830182556000828152602090200183905554612b6e9190613b32565b60009182526020929092526040902055565b3b151590565b6001820154600090612b9a5750600061057a565b6000828152602084905260409020546001840180548492908110612bce57634e487b7160e01b600052603260045260246000fd5b906000526020600020015414905092915050565b600082601f830112612bf2578081fd5b81356020612c07612c0283613aba565b613a90565b8281528181019085830183850287018401881015612c23578586fd5b855b85811015612c4157813584529284019290840190600101612c25565b5090979650505050505050565b600082601f830112612c5e578081fd5b8135612c6c612c0282613ade565b818152846020838601011115612c80578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612cab578081fd5b813561110e81613cc6565b60008060408385031215612cc8578081fd5b8235612cd381613cc6565b91506020830135612ce381613cc6565b809150509250929050565b600080600080600060a08688031215612d05578081fd5b8535612d1081613cc6565b94506020860135612d2081613cc6565b9350604086013567ffffffffffffffff80821115612d3c578283fd5b612d4889838a01612be2565b94506060880135915080821115612d5d578283fd5b612d6989838a01612be2565b93506080880135915080821115612d7e578283fd5b50612d8b88828901612c4e565b9150509295509295909350565b600080600080600060a08688031215612daf578081fd5b8535612dba81613cc6565b94506020860135612dca81613cc6565b93506040860135925060608601359150608086013567ffffffffffffffff811115612df3578182fd5b612d8b88828901612c4e565b600080600060608486031215612e13578283fd5b8335612e1e81613cc6565b9250602084013567ffffffffffffffff80821115612e3a578384fd5b612e4687838801612be2565b93506040860135915080821115612e5b578283fd5b50612e6886828701612be2565b9150509250925092565b60008060408385031215612e84578182fd5b8235612e8f81613cc6565b915060208301358015158114612ce3578182fd5b60008060408385031215612eb5578182fd5b8235612ec081613cc6565b946020939093013593505050565b600080600060608486031215612ee2578081fd5b8335612eed81613cc6565b95602085013595506040909401359392505050565b60008060408385031215612f14578182fd5b823567ffffffffffffffff80821115612f2b578384fd5b818501915085601f830112612f3e578384fd5b81356020612f4e612c0283613aba565b82815281810190858301838502870184018b1015612f6a578889fd5b8896505b84871015612f95578035612f8181613cc6565b835260019690960195918301918301612f6e565b5096505086013592505080821115612fab578283fd5b50612fb885828601612be2565b9150509250929050565b600060208284031215612fd3578081fd5b813561110e81613cdb565b600060208284031215612fef578081fd5b815161110e81613cdb565b60006020828403121561300b578081fd5b815161110e81613cc6565b600060208284031215613027578081fd5b815167ffffffffffffffff81111561303d578182fd5b8201601f8101841361304d578182fd5b805161305b612c0282613ade565b81815285602083850101111561306f578384fd5b613080826020830160208601613b49565b95945050505050565b60006020828403121561309a578081fd5b5035919050565b6000806000606084860312156130b5578081fd5b833592506020840135600281106130ca578182fd5b915060408401356130da81613cc6565b809150509250925092565b600080604083850312156130f7578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b8381101561313557815187529582019590820190600101613119565b509495945050505050565b60008151808452613158816020860160208601613b49565b601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b60006001600160a01b03808816835280871660208401525060a060408301526131ac60a0830186613106565b82810360608401526131be8186613106565b905082810360808401526131d28185613140565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261321660a0830184613140565b979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156132625783516001600160a01b03168352928401929184019160010161323d565b50909695505050505050565b60006020825261110e6020830184613106565b6000604082526132946040830185613106565b82810360208401526130808185613106565b901515815260200190565b6001600160e01b031991909116815260200190565b60408101600284106132e857634e487b7160e01b600052602160045260246000fd5b9281526001600160a01b039190911660209091015290565b60006020825261110e6020830184613140565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560408201527f526563656976657220696d706c656d656e746572000000000000000000000000606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a6563746560408201527f6420746f6b656e73000000000000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201527f65726f2061646472657373000000000000000000000000000000000000000000606082015260800190565b6020808252600c908201527f554e415554484f52495a45440000000000000000000000000000000000000000604082015260600190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60408201527f616e636500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060408201527f7768696c65207061757365640000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201527f20617070726f7665640000000000000000000000000000000000000000000000606082015260800190565b6020808252600d908201527f494e56414c49445f494e44455800000000000000000000000000000000000000604082015260600190565b6020808252602a908201527f55496e743235365365743a206b657920616c726561647920657869737473206960408201527f6e20746865207365742e00000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526032908201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060408201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000606082015260800190565b6020808252600e908201527f414c52454144595f4c4f434b4544000000000000000000000000000000000000604082015260600190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201527f72207472616e7366657200000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f4e465447656d4d756c7469546f6b656e237572693a204e4f4e4558495354454e60408201527f545f544f4b454e00000000000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b6020808252600c908201527f544f4b454e5f4c4f434b45440000000000000000000000000000000000000000604082015260600190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360408201527f20666f722073656c660000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860408201527f206d69736d617463680000000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060408201527f6d69736d61746368000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f416464726573735365743a206b657920616c726561647920657869737473206960408201527f6e20746865207365742e00000000000000000000000000000000000000000000606082015260800190565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715613ab257613ab2613be7565b604052919050565b600067ffffffffffffffff821115613ad457613ad4613be7565b5060209081020190565b600067ffffffffffffffff821115613af857613af8613be7565b50601f01601f191660200190565b60008219821115613b1957613b19613bbb565b500190565b600082613b2d57613b2d613bd1565b500490565b600082821015613b4457613b44613bbb565b500390565b60005b83811015613b64578181015183820152602001613b4c565b838111156114185750506000910152565b600081613b8457613b84613bbb565b506000190190565b6000600019821415613ba057613ba0613bbb565b5060010190565b600082613bb657613bb6613bd1565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d1015613c1357610a97565b600481823e6308c379a0613c278251613bfd565b14613c3157610a97565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d016004823e80513d67ffffffffffffffff8160248401118184111715613c7f5750505050610a97565b82840192508251915080821115613c995750505050610a97565b503d83016020828401011115613cb157505050610a97565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461091257600080fd5b6001600160e01b03198116811461091257600080fdfea26469706673582212205858de2db9a06e507cc1b95a629b3d69a92c4af8accb784d93d6a395065f3a1564736f6c63430008000033",
  "libraries": {
    "Strings": "0xeB3E79099663eC952e02E608E00d463F36b4Fb75",
    "AddressSet": "0xe46E1A13694B72eC89126303d65247856bb0833e",
    "UInt256Set": "0x8B6893DB13b55d4952a51d5188215e2a470515a9",
    "Create2": "0xBa85d3e8E0F9e48F5c21649d33f6d0f9Af12E3f5",
    "WrappedTokenLib": "0x95055e748915AB4930a1c2597fB84b1a9b9B7A51",
    "ComplexPoolLib": "0x59CAEC5c5BDE430F834d77C6dF1e689CEE5Da318"
  },
  "devdoc": {
    "details": "the primary multitoken contract",
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "addProxyRegistry(address)": {
        "details": "add a proxy registry to the list"
      },
      "allHeldTokens(address,uint256)": {
        "details": "held token at index for token holder"
      },
      "allHeldTokensLength(address)": {
        "details": "Returns the count of held tokens for the token holder"
      },
      "allProxyRegistries(uint256)": {
        "details": "Returns proxy registry at index"
      },
      "allProxyRegistriesLength()": {
        "details": "a count of proxy registries"
      },
      "allTokenHolders(uint256,uint256)": {
        "details": "token holder at index for token id"
      },
      "allTokenHoldersLength(uint256)": {
        "details": "Returns the count of token holders for the held token"
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burn(address,uint256,uint256)": {
        "details": "burn some amount of tokens. Only callable by token owner"
      },
      "burnBatch(address,uint256[],uint256[])": {
        "details": "burn some amount of tokens of multiple token types of account. Only callable by token owner"
      },
      "constructor": {
        "details": "Contract initializer."
      },
      "getRegistryManager()": {
        "details": "Returns the registyry manager account"
      },
      "getTokenData(uint256)": {
        "details": "get the token data for this token tokenhash"
      },
      "heldTokens(address)": {
        "details": "returns an array of held tokens for the token holder"
      },
      "isApprovedForAll(address,address)": {
        "details": "override base functionality to check proxy registries for approvers"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "lock(uint256,uint256)": {
        "details": "timelock the tokens from moving until the given time"
      },
      "mint(address,uint256,uint256)": {
        "details": "mint some amount of tokens. Only callable by token owner"
      },
      "mintBatch(address,uint256[],uint256[])": {
        "details": "mint some amount of tokens to multiple recipients. Only callable by token owner"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "relinquishControl()": {
        "details": "Remove the sender address from the list of controllers"
      },
      "removeProxyRegistryAt(uint256)": {
        "details": "remove the proxy registry from the list at index"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setRegistryManager(address)": {
        "details": "set the registry manager account"
      },
      "setTokenData(uint256,uint8,address)": {
        "details": "set the data for this tokenhash. points to a token type (1 = claim, 2 = gem) and token pool address"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "tokenHolders(uint256)": {
        "details": "Returns an array of token holders for the given token id"
      },
      "totalBalances(uint256)": {
        "details": "Returns the total balance minted of this type"
      },
      "unlockTime(address,uint256)": {
        "details": "unlock time for token / id"
      },
      "uri(uint256)": {
        "details": "Returns the metadata URI for this token type"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 163,
        "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 169,
        "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 171,
        "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 63,
        "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 4752,
        "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
        "label": "_controllers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18937,
        "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
        "label": "proxyRegistries",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Set)8520_storage"
      },
      {
        "astId": 18939,
        "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
        "label": "registryManager",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 18943,
        "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
        "label": "_totalBalances",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 18949,
        "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
        "label": "_tokenLocks",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 18954,
        "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
        "label": "_heldTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(Set)9043_storage)"
      },
      {
        "astId": 18959,
        "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
        "label": "_tokenHolders",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Set)8520_storage)"
      },
      {
        "astId": 18964,
        "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
        "label": "_tokenTypes",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_enum(TokenType)8012)"
      },
      {
        "astId": 18968,
        "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
        "label": "_tokenPools",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(TokenType)8012": {
        "encoding": "inplace",
        "label": "enum INFTGemMultiToken.TokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Set)9043_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UInt256Set.Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Set)9043_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_enum(TokenType)8012)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum INFTGemMultiToken.TokenType)",
        "numberOfBytes": "32",
        "value": "t_enum(TokenType)8012"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Set)8520_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AddressSet.Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Set)8520_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Set)8520_storage": {
        "encoding": "inplace",
        "label": "struct AddressSet.Set",
        "members": [
          {
            "astId": 8516,
            "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
            "label": "keyPointers",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 8519,
            "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
            "label": "keyList",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)9043_storage": {
        "encoding": "inplace",
        "label": "struct UInt256Set.Set",
        "members": [
          {
            "astId": 9039,
            "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
            "label": "keyPointers",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 9042,
            "contract": "src/tokens/NFTGemMultiToken.sol:NFTGemMultiToken",
            "label": "keyList",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}