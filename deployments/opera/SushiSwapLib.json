{
  "address": "0xd2B06A9541Ec5B54e979c4Aac1411C8438ca0f41",
  "abi": [
    {
      "inputs": [],
      "name": "UNISWAP_ROUTER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "ethQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethereum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethReserve",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "fac",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPathForETHToToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "hasPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xa069d22e58735955e88528db777e7c2473c9cf5eaeebbe77f7a7376c371246ea",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0xd2B06A9541Ec5B54e979c4Aac1411C8438ca0f41",
    "transactionIndex": 0,
    "gasUsed": "861871",
    "logsBloom": "0x
    "blockHash": "0x0000585d000012a92352f3ec5bb73e621541632cbe3a4ba4bfcc06063347f326",
    "transactionHash": "0xa069d22e58735955e88528db777e7c2473c9cf5eaeebbe77f7a7376c371246ea",
    "logs": [],
    "blockNumber": 12644923,
    "cumulativeGasUsed": "861871",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "183dbc8930094d8ed6d22f239093adf7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"UNISWAP_ROUTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ethQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethereum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fac\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPathForETHToToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"hasPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Uniswap helpers\",\"kind\":\"dev\",\"methods\":{\"WETH()\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"ethQuote(address,uint256)\":{\"details\":\"Get a quote in Ethereum for the given ERC20 token / token amount\"},\"factory()\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"getPair(address,address,address)\":{\"details\":\"looks for a pool vs weth\"},\"getPathForETHToToken(address)\":{\"details\":\"Get a path for ethereum to the given token\"},\"getReserves(address)\":{\"details\":\"Get the pair reserves given two erc20 tokens\"},\"hasPool(address)\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"pairFor(address,address,address)\":{\"details\":\"calculate pair address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/swap/sushiswap/SushiSwapLib.sol\":\"SushiSwapLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2222},\"remappings\":[]},\"sources\":{\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"src/swap/sushiswap/SushiSwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\n/**\\n * @dev Uniswap helpers\\n */\\nlibrary SushiSwapLib {\\n    address public constant UNISWAP_ROUTER_ADDRESS =\\n        0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;\\n\\n    /**\\n     * @dev Get a quote in Ethereum for the given ERC20 token / token amount\\n     */\\n    function ethQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256 ethereum,\\n            uint256 tokenReserve,\\n            uint256 ethReserve\\n        )\\n    {\\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(\\n            UNISWAP_ROUTER_ADDRESS\\n        );\\n        address _factory = uniswapRouter.factory();\\n        address _WETH = uniswapRouter.WETH();\\n        address _pair = IUniswapV2Factory(_factory).getPair(token, _WETH);\\n        (tokenReserve, ethReserve, ) = IUniswapV2Pair(_pair).getReserves();\\n        ethereum = quote(tokenAmount, tokenReserve, ethReserve);\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function factory() external pure returns (address fac) {\\n        fac = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS).factory();\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function WETH() external pure returns (address weth) {\\n        weth = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS).WETH();\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function hasPool(address token) external view returns (bool) {\\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(\\n            UNISWAP_ROUTER_ADDRESS\\n        );\\n        address _factory = uniswapRouter.factory();\\n        address _WETH = uniswapRouter.WETH();\\n        address _pair = IUniswapV2Factory(_factory).getPair(token, _WETH);\\n        return _pair != address(0);\\n    }\\n\\n    /**\\n     * @dev looks for a pool vs weth\\n     */\\n    function getPair(\\n        address _factory,\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair) {\\n        require(_factory != address(0), \\\"INVALID_TOKENS\\\");\\n        require(tokenA != address(0) && tokenB != address(0), \\\"INVALID_TOKENS\\\");\\n        pair = IUniswapV2Factory(_factory).getPair(tokenA, tokenB);\\n    }\\n\\n    /**\\n     * @dev Get the pair reserves given two erc20 tokens\\n     */\\n    function getReserves(address pair)\\n        external\\n        view\\n        returns (uint256 reserveA, uint256 reserveB)\\n    {\\n        (reserveA, reserveB, ) = IUniswapV2Pair(pair).getReserves();\\n    }\\n\\n    /**\\n     * @dev calculate pair address\\n     */\\n    function pairFor(\\n        address _factory,\\n        address tokenA,\\n        address tokenB\\n    ) external pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            _factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Get a path for ethereum to the given token\\n     */\\n    function getPathForETHToToken(address token)\\n        external\\n        pure\\n        returns (address[] memory)\\n    {\\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(\\n            UNISWAP_ROUTER_ADDRESS\\n        );\\n        address[] memory path = new address[](2);\\n        path[0] = token;\\n        path[1] = uniswapRouter.WETH();\\n        return path;\\n    }\\n\\n    /**\\n     * @dev given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n     */\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"Price: Price\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"Price: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = (amountA * (reserveB)) / reserveA;\\n    }\\n\\n    /**\\n     * @dev returns sorted token addresses, used to handle return values from pairs sorted in this order\\n     */\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"Price: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Price: ZERO_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xca5bf80325d759c3576c0a9b50a630b9d12325f0e19994966fcaea33179aa624\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610ea661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c80636d91c0e2116100805780637dddfe9f116100655780637dddfe9f14610159578063ad5c464814610179578063c45a015514610181576100ad565b80636d91c0e21461013e57806379b3694314610151576100ad565b80631246dbf5146100b25780631874f0a9146100db5780633e99c1e4146100fd57806361e0b77f1461011e575b600080fd5b6100c56100c0366004610aa6565b610189565b6040516100d29190610cad565b60405180910390f35b6100ee6100e9366004610b2f565b610324565b6040516100d293929190610dd9565b61011061010b366004610aa6565b61054e565b6040516100d2929190610dcb565b61013161012c366004610ae5565b6105df565b6040516100d29190610c32565b61013161014c366004610ae5565b6106eb565b610131610779565b61016c610167366004610aa6565b610791565b6040516100d29190610c60565b6101316108c1565b61013161094d565b600080731b02da8cb0d097eb8d57a175b88c7d8b4799750690506000816001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156101de57600080fd5b505afa1580156101f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102169190610ac9565b90506000826001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561025357600080fd5b505afa158015610267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028b9190610ac9565b90506000826001600160a01b031663e6a4390587846040518363ffffffff1660e01b81526004016102bd929190610c46565b60206040518083038186803b1580156102d557600080fd5b505afa1580156102e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030d9190610ac9565b6001600160a01b031615159450505050505b919050565b600080600080731b02da8cb0d097eb8d57a175b88c7d8b4799750690506000816001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561037c57600080fd5b505afa158015610390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b49190610ac9565b90506000826001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156103f157600080fd5b505afa158015610405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104299190610ac9565b90506000826001600160a01b031663e6a439058a846040518363ffffffff1660e01b815260040161045b929190610c46565b60206040518083038186803b15801561047357600080fd5b505afa158015610487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ab9190610ac9565b9050806001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156104e657600080fd5b505afa1580156104fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051e9190610b5a565b506dffffffffffffffffffffffffffff918216975016945061054188878761099c565b9650505050509250925092565b600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561058a57600080fd5b505afa15801561059e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c29190610b5a565b506dffffffffffffffffffffffffffff9182169591169350915050565b60006001600160a01b0384166106105760405162461bcd60e51b815260040161060790610d5d565b60405180910390fd5b6001600160a01b0383161580159061063057506001600160a01b03821615155b61064c5760405162461bcd60e51b815260040161060790610d5d565b6040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063e6a43905906106939086908690600401610c46565b60206040518083038186803b1580156106ab57600080fd5b505afa1580156106bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e39190610ac9565b949350505050565b60008060006106fa85856109fe565b91509150858282604051602001610712929190610b9d565b60405160208183030381529060405280519060200120604051602001610739929190610bc4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209695505050505050565b731b02da8cb0d097eb8d57a175b88c7d8b4799750681565b6040805160028082526060828101909352731b02da8cb0d097eb8d57a175b88c7d8b479975069160009181602001602082028036833701905050905083816000815181106107ef57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050816001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561084857600080fd5b505afa15801561085c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108809190610ac9565b816001815181106108a157634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152915050919050565b6000731b02da8cb0d097eb8d57a175b88c7d8b479975066001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561091057600080fd5b505afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109489190610ac9565b905090565b6000731b02da8cb0d097eb8d57a175b88c7d8b479975066001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561091057600080fd5b60008084116109bd5760405162461bcd60e51b815260040161060790610cef565b6000831180156109cd5750600082115b6109e95760405162461bcd60e51b815260040161060790610d94565b826109f48386610e0f565b6106e39190610def565b600080826001600160a01b0316846001600160a01b03161415610a335760405162461bcd60e51b815260040161060790610cb8565b826001600160a01b0316846001600160a01b031610610a53578284610a56565b83835b90925090506001600160a01b038216610a815760405162461bcd60e51b815260040161060790610d26565b9250929050565b80516dffffffffffffffffffffffffffff8116811461031f57600080fd5b600060208284031215610ab7578081fd5b8135610ac281610e58565b9392505050565b600060208284031215610ada578081fd5b8151610ac281610e58565b600080600060608486031215610af9578182fd5b8335610b0481610e58565b92506020840135610b1481610e58565b91506040840135610b2481610e58565b809150509250925092565b60008060408385031215610b41578182fd5b8235610b4c81610e58565b946020939093013593505050565b600080600060608486031215610b6e578283fd5b610b7784610a88565b9250610b8560208501610a88565b9150604084015163ffffffff81168114610b24578182fd5b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b7fff00000000000000000000000000000000000000000000000000000000000000815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015610ca15783516001600160a01b031683529284019291840191600101610c7c565b50909695505050505050565b901515815260200190565b6020808252601a908201527f50726963653a204944454e544943414c5f414444524553534553000000000000604082015260600190565b6020808252600c908201527f50726963653a2050726963650000000000000000000000000000000000000000604082015260600190565b60208082526013908201527f50726963653a205a45524f5f4144445245535300000000000000000000000000604082015260600190565b6020808252600e908201527f494e56414c49445f544f4b454e53000000000000000000000000000000000000604082015260600190565b6020808252601d908201527f50726963653a20494e53554646494349454e545f4c4951554944495459000000604082015260600190565b918252602082015260400190565b9283526020830191909152604082015260600190565b600082610e0a57634e487b7160e01b81526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e5357634e487b7160e01b81526011600452602481fd5b500290565b6001600160a01b0381168114610e6d57600080fd5b5056fea2646970667358221220ad8b0754f70495f1fedcc83e8d1beaa2e7c1955eeb35348967728bb8f4a238d664736f6c63430008000033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c80636d91c0e2116100805780637dddfe9f116100655780637dddfe9f14610159578063ad5c464814610179578063c45a015514610181576100ad565b80636d91c0e21461013e57806379b3694314610151576100ad565b80631246dbf5146100b25780631874f0a9146100db5780633e99c1e4146100fd57806361e0b77f1461011e575b600080fd5b6100c56100c0366004610aa6565b610189565b6040516100d29190610cad565b60405180910390f35b6100ee6100e9366004610b2f565b610324565b6040516100d293929190610dd9565b61011061010b366004610aa6565b61054e565b6040516100d2929190610dcb565b61013161012c366004610ae5565b6105df565b6040516100d29190610c32565b61013161014c366004610ae5565b6106eb565b610131610779565b61016c610167366004610aa6565b610791565b6040516100d29190610c60565b6101316108c1565b61013161094d565b600080731b02da8cb0d097eb8d57a175b88c7d8b4799750690506000816001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156101de57600080fd5b505afa1580156101f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102169190610ac9565b90506000826001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561025357600080fd5b505afa158015610267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028b9190610ac9565b90506000826001600160a01b031663e6a4390587846040518363ffffffff1660e01b81526004016102bd929190610c46565b60206040518083038186803b1580156102d557600080fd5b505afa1580156102e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030d9190610ac9565b6001600160a01b031615159450505050505b919050565b600080600080731b02da8cb0d097eb8d57a175b88c7d8b4799750690506000816001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561037c57600080fd5b505afa158015610390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b49190610ac9565b90506000826001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156103f157600080fd5b505afa158015610405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104299190610ac9565b90506000826001600160a01b031663e6a439058a846040518363ffffffff1660e01b815260040161045b929190610c46565b60206040518083038186803b15801561047357600080fd5b505afa158015610487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ab9190610ac9565b9050806001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156104e657600080fd5b505afa1580156104fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051e9190610b5a565b506dffffffffffffffffffffffffffff918216975016945061054188878761099c565b9650505050509250925092565b600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561058a57600080fd5b505afa15801561059e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c29190610b5a565b506dffffffffffffffffffffffffffff9182169591169350915050565b60006001600160a01b0384166106105760405162461bcd60e51b815260040161060790610d5d565b60405180910390fd5b6001600160a01b0383161580159061063057506001600160a01b03821615155b61064c5760405162461bcd60e51b815260040161060790610d5d565b6040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063e6a43905906106939086908690600401610c46565b60206040518083038186803b1580156106ab57600080fd5b505afa1580156106bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e39190610ac9565b949350505050565b60008060006106fa85856109fe565b91509150858282604051602001610712929190610b9d565b60405160208183030381529060405280519060200120604051602001610739929190610bc4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209695505050505050565b731b02da8cb0d097eb8d57a175b88c7d8b4799750681565b6040805160028082526060828101909352731b02da8cb0d097eb8d57a175b88c7d8b479975069160009181602001602082028036833701905050905083816000815181106107ef57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050816001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561084857600080fd5b505afa15801561085c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108809190610ac9565b816001815181106108a157634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152915050919050565b6000731b02da8cb0d097eb8d57a175b88c7d8b479975066001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561091057600080fd5b505afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109489190610ac9565b905090565b6000731b02da8cb0d097eb8d57a175b88c7d8b479975066001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561091057600080fd5b60008084116109bd5760405162461bcd60e51b815260040161060790610cef565b6000831180156109cd5750600082115b6109e95760405162461bcd60e51b815260040161060790610d94565b826109f48386610e0f565b6106e39190610def565b600080826001600160a01b0316846001600160a01b03161415610a335760405162461bcd60e51b815260040161060790610cb8565b826001600160a01b0316846001600160a01b031610610a53578284610a56565b83835b90925090506001600160a01b038216610a815760405162461bcd60e51b815260040161060790610d26565b9250929050565b80516dffffffffffffffffffffffffffff8116811461031f57600080fd5b600060208284031215610ab7578081fd5b8135610ac281610e58565b9392505050565b600060208284031215610ada578081fd5b8151610ac281610e58565b600080600060608486031215610af9578182fd5b8335610b0481610e58565b92506020840135610b1481610e58565b91506040840135610b2481610e58565b809150509250925092565b60008060408385031215610b41578182fd5b8235610b4c81610e58565b946020939093013593505050565b600080600060608486031215610b6e578283fd5b610b7784610a88565b9250610b8560208501610a88565b9150604084015163ffffffff81168114610b24578182fd5b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b7fff00000000000000000000000000000000000000000000000000000000000000815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015610ca15783516001600160a01b031683529284019291840191600101610c7c565b50909695505050505050565b901515815260200190565b6020808252601a908201527f50726963653a204944454e544943414c5f414444524553534553000000000000604082015260600190565b6020808252600c908201527f50726963653a2050726963650000000000000000000000000000000000000000604082015260600190565b60208082526013908201527f50726963653a205a45524f5f4144445245535300000000000000000000000000604082015260600190565b6020808252600e908201527f494e56414c49445f544f4b454e53000000000000000000000000000000000000604082015260600190565b6020808252601d908201527f50726963653a20494e53554646494349454e545f4c4951554944495459000000604082015260600190565b918252602082015260400190565b9283526020830191909152604082015260600190565b600082610e0a57634e487b7160e01b81526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e5357634e487b7160e01b81526011600452602481fd5b500290565b6001600160a01b0381168114610e6d57600080fd5b5056fea2646970667358221220ad8b0754f70495f1fedcc83e8d1beaa2e7c1955eeb35348967728bb8f4a238d664736f6c63430008000033",
  "devdoc": {
    "details": "Uniswap helpers",
    "kind": "dev",
    "methods": {
      "WETH()": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "ethQuote(address,uint256)": {
        "details": "Get a quote in Ethereum for the given ERC20 token / token amount"
      },
      "factory()": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "getPair(address,address,address)": {
        "details": "looks for a pool vs weth"
      },
      "getPathForETHToToken(address)": {
        "details": "Get a path for ethereum to the given token"
      },
      "getReserves(address)": {
        "details": "Get the pair reserves given two erc20 tokens"
      },
      "hasPool(address)": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "pairFor(address,address,address)": {
        "details": "calculate pair address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}