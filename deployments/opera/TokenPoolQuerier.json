{
  "address": "0xB219D6DeA05C21eF03b5417c22EDa92a9D2DA094",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gemPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multitoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getOwnedTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "claims",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "gems",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcda6faaaf8122520af908a4319a086af142400ef391b1ef3745103edba77f72f",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0xB219D6DeA05C21eF03b5417c22EDa92a9D2DA094",
    "transactionIndex": 0,
    "gasUsed": "439483",
    "logsBloom": "0x
    "blockHash": "0x0000510e00001ff7fba9530d9d6f16507a80e40b371f662881e9af22c4e93e6e",
    "transactionHash": "0xcda6faaaf8122520af908a4319a086af142400ef391b1ef3745103edba77f72f",
    "logs": [],
    "blockNumber": 11798854,
    "cumulativeGasUsed": "439483",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4c5de0bd1389c2a6a8628846aa492eb5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multitoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getOwnedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"claims\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gems\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/diagnostics/TokenPoolQuerier.sol\":\"TokenPoolQuerier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/diagnostics/TokenPoolQuerier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"../interfaces/ITokenPoolQuerier.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPoolData.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\n\\ncontract TokenPoolQuerier is ITokenPoolQuerier {\\n    function getOwnedTokens(\\n        address gemPool,\\n        address multitoken,\\n        address account,\\n        uint256 page,\\n        uint256 count\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256[] memory claims, uint256[] memory gems)\\n    {\\n        uint256 allTokenHashesLength = INFTComplexGemPoolData(gemPool)\\n        .allTokenHashesLength();\\n        require((page * count) <= allTokenHashesLength, \\\"OUT_OF_RANGE\\\");\\n\\n        uint256 claimLen = 0;\\n        uint256 gemLen = 0;\\n\\n        claims = new uint256[](count);\\n        gems = new uint256[](count);\\n\\n        for (uint256 i = page * count; i < (page * count) + count; i++) {\\n            if (i >= allTokenHashesLength) {\\n                break;\\n            }\\n            uint256 claimHash = INFTComplexGemPoolData(gemPool).allTokenHashes(\\n                i\\n            );\\n            INFTGemMultiToken.TokenType tokenType = INFTComplexGemPoolData(\\n                gemPool\\n            ).tokenType(claimHash);\\n            uint256 bal = IERC1155(multitoken).balanceOf(account, claimHash);\\n            if (bal == 0 || claimHash == 0 || claimHash == 1) continue;\\n            else if (tokenType == INFTGemMultiToken.TokenType.CLAIM)\\n                claims[claimLen++] = claimHash;\\n            else if (tokenType == INFTGemMultiToken.TokenType.GEM)\\n                gems[gemLen++] = claimHash;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6cd958f17054caf340b4c5e0947dee6800df344ab706ec7c1fb52c6b1c05dd8b\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTComplexGemPool {\\n    enum RequirementType {\\n        ERC20,\\n        ERC1155,\\n        POOL\\n    }\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 amountPaid,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 gemHash,\\n        uint256 quantity\\n    );\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external;\\n\\n    function collectClaim(uint256 claimHash, bool requireMature) external;\\n\\n    function purchaseGems(uint256 count) external payable;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0x82c44e3e50944c227762a26043a1307be6c51ce8621153fe0a69b0633abe0a73\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./INFTGemMultiToken.sol\\\";\\nimport \\\"./INFTComplexGemPool.sol\\\";\\n\\ninterface INFTComplexGemPoolData {\\n    enum PriceIncrementType {\\n        COMPOUND,\\n        INVERSELOG,\\n        NONE\\n    }\\n\\n    /**\\n     * @dev Event generated when an NFT claim is imported from a legacy contract\\n     */\\n    event NFTGemImported(\\n        address indexed converter,\\n        address indexed pool,\\n        address oldPool,\\n        address oldToken,\\n        uint256 indexed gemHash,\\n        uint256 quantity\\n    );\\n\\n    function addInputRequirement(\\n        address theToken,\\n        address pool,\\n        INFTComplexGemPool.RequirementType inputType,\\n        uint256 theTokenId,\\n        uint256 minAmount,\\n        bool takeCustody,\\n        bool burn\\n    ) external;\\n\\n    function updateInputRequirement(\\n        uint256 ndx,\\n        address theToken,\\n        address pool,\\n        INFTComplexGemPool.RequirementType inputType,\\n        uint256 tid,\\n        uint256 minAmount,\\n        bool takeCustody,\\n        bool burn\\n    ) external;\\n\\n    function allInputRequirementsLength() external returns (uint256);\\n\\n    function allInputRequirements(uint256 ndx)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            INFTComplexGemPool.RequirementType,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool\\n        );\\n\\n    function settings()\\n        external\\n        view\\n        returns (\\n            string memory settingsSymbol,\\n            string memory settingsName,\\n            string memory settingsDescription,\\n            uint256 settingsCategory,\\n            uint256 settingsEthPrice,\\n            uint256 settingsMinTime,\\n            uint256 settingsMaxTime,\\n            uint256 settingsDiffStep,\\n            uint256 settingsMacClaims,\\n            uint256 settingsMaxQuantityPerClaim,\\n            uint256 settingsMaxClaimsPerAccount\\n        );\\n\\n    function stats()\\n        external\\n        view\\n        returns (\\n            bool statsVisible,\\n            uint256 statsClaimedCount,\\n            uint256 statsMintedCount,\\n            uint256 statsTotalStakedEth,\\n            uint256 statsNextClaimHash,\\n            uint256 statsNextGemHash,\\n            uint256 statsNextClaimId,\\n            uint256 statsNextGemId\\n        );\\n\\n    function claim(uint256 claimHash)\\n        external\\n        view\\n        returns (\\n            uint256 claimClaimAmount,\\n            uint256 claimClaimQuantity,\\n            uint256 claimClaimUnlockTime,\\n            uint256 claimClaimTokenAmount,\\n            address claimStakedToken,\\n            uint256 claimNextClaimId\\n        );\\n\\n    function token(uint256 tokenHash)\\n        external\\n        view\\n        returns (\\n            INFTGemMultiToken.TokenType tokenTokenType,\\n            uint256 tokenTokenId,\\n            address tokenTokenSource\\n        );\\n\\n    function addAllowedTokenSource(address allowedToken) external;\\n\\n    function removeAllowedTokenSource(address allowedToken) external;\\n\\n    function allowedTokenSources() external view returns (address[] memory);\\n\\n    function importLegacyGem(\\n        address pool,\\n        address legacyToken,\\n        uint256 tokenHash,\\n        address recipient\\n    ) external;\\n\\n    function isLegacyGemImported(uint256 tokenhash)\\n        external\\n        view\\n        returns (bool);\\n\\n    function setNextIds(uint256 _nextClaimId, uint256 _nextGemId) external;\\n\\n    function tokenHashes() external view returns (uint256[] memory);\\n\\n    function setTokenHashes(uint256[] memory inTokenHashes) external;\\n\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n\\n    function ethPrice() external view returns (uint256);\\n\\n    function setVisible(bool isVisible) external;\\n\\n    function visible() external view returns (bool);\\n\\n    function setCategory(uint256 theCategory) external;\\n\\n    function category() external view returns (uint256);\\n\\n    function setDescription(string memory desc) external;\\n\\n    function description() external view returns (string memory);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n\\n    function claimQuantity(uint256 claimId) external view returns (uint256);\\n\\n    function maxQuantityPerClaim() external view returns (uint256);\\n\\n    function maxClaimsPerAccount() external view returns (uint256);\\n\\n    function setMaxQuantityPerClaim(uint256 claimId) external;\\n\\n    function setMaxClaimsPerAccount(uint256 claimId) external;\\n\\n    function mintedCount() external view returns (uint256);\\n\\n    function totalStakedEth() external view returns (uint256);\\n\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n\\n    function tokenType(uint256 tokenHash)\\n        external\\n        view\\n        returns (INFTGemMultiToken.TokenType);\\n\\n    function allTokenHashesLength() external view returns (uint256);\\n\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n\\n    function nextClaimHash() external view returns (uint256);\\n\\n    function nextGemHash() external view returns (uint256);\\n\\n    function nextGemId() external view returns (uint256);\\n\\n    function nextClaimId() external view returns (uint256);\\n\\n    function setValidateErc20(bool) external;\\n\\n    function validateErc20() external view returns (bool);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n\\n    function gemClaimHash(uint256 gemHash) external view returns (uint256);\\n\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n\\n    function allowedTokens(uint256 idx) external view returns (address);\\n\\n    function isTokenAllowed(address tkn) external view returns (bool);\\n\\n    function addAllowedToken(address tkn) external;\\n\\n    function removeAllowedToken(address tkn) external;\\n\\n    function allowPurchase() external view returns (bool);\\n\\n    function setAllowPurchase(bool allow) external;\\n\\n    function enabled() external view returns (bool);\\n\\n    function setEnabled(bool enable) external;\\n\\n    function priceIncrementType() external view returns (PriceIncrementType);\\n\\n    function setPriceIncrementType(PriceIncrementType incrementType) external;\\n}\\n\",\"keccak256\":\"0xdb7e97f054516df8991c1cdbbbe85cbe9a494d25d8ca2ac5ae3e48ea61d251b1\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    enum TokenType {\\n        GOVERNANCE,\\n        CLAIM,\\n        GEM\\n    }\\n\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to mint a claim or a gem\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        TokenType tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        returns (TokenType, address);\\n}\\n\",\"keccak256\":\"0xb871feba8e614aab0f81f26db323a68649f8d1cf6641848984e821a7bc02e7a1\",\"license\":\"MIT\"},\"src/interfaces/ITokenPoolQuerier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ITokenPoolQuerier {\\n    function getOwnedTokens(\\n        address gemPool,\\n        address multitoken,\\n        address account,\\n        uint256 page,\\n        uint256 count\\n    ) external view returns (uint256[] memory claims, uint256[] memory gems);\\n}\\n\",\"keccak256\":\"0x5f059728b8d1e229382e8cd5d273f409310b0233871cee69e661b27c31979572\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610701806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806374a552c914610030575b600080fd5b61004361003e366004610503565b61005a565b6040516100519291906105f5565b60405180910390f35b60608060008773ffffffffffffffffffffffffffffffffffffffff1663f4fde0d36040518163ffffffff1660e01b815260040160206040518083038186803b1580156100a557600080fd5b505afa1580156100b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100dd919061057d565b9050806100ea858761067b565b111561012b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012290610623565b60405180910390fd5b6000808567ffffffffffffffff81111561015557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561017e578160200160208202803683370190505b5094508567ffffffffffffffff8111156101a857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156101d1578160200160208202803683370190505b50935060006101e0878961067b565b90505b866101ee818a61067b565b6101f89190610663565b8110156104cc5783811061020b576104cc565b6040517fd31674db00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8d169063d31674db9061026090859060040161065a565b60206040518083038186803b15801561027857600080fd5b505afa15801561028c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b0919061057d565b905060008c73ffffffffffffffffffffffffffffffffffffffff1663e6c3b1f6836040518263ffffffff1660e01b81526004016102ed919061065a565b60206040518083038186803b15801561030557600080fd5b505afa158015610319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033d9190610557565b905060008c73ffffffffffffffffffffffffffffffffffffffff1662fdd58e8d856040518363ffffffff1660e01b815260040161037b9291906105cf565b60206040518083038186803b15801561039357600080fd5b505afa1580156103a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cb919061057d565b90508015806103d8575082155b806103e35750826001145b156103f0575050506104ba565b600182600281111561041257634e487b7160e01b600052602160045260246000fd5b1415610455578289876104248161069a565b98508151811061044457634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506104b6565b600282600281111561047757634e487b7160e01b600052602160045260246000fd5b14156104b6578288866104898161069a565b9750815181106104a957634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b5050505b806104c48161069a565b9150506101e3565b505050509550959350505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146104fe57600080fd5b919050565b600080600080600060a0868803121561051a578081fd5b610523866104da565b9450610531602087016104da565b935061053f604087016104da565b94979396509394606081013594506080013592915050565b600060208284031215610568578081fd5b815160038110610576578182fd5b9392505050565b60006020828403121561058e578081fd5b5051919050565b6000815180845260208085019450808401835b838110156105c4578151875295820195908201906001016105a8565b509495945050505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000604082526106086040830185610595565b828103602084015261061a8185610595565b95945050505050565b6020808252600c908201527f4f55545f4f465f52414e47450000000000000000000000000000000000000000604082015260600190565b90815260200190565b60008219821115610676576106766106b5565b500190565b6000816000190483118215151615610695576106956106b5565b500290565b60006000198214156106ae576106ae6106b5565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220936940017449242e219c5ac8fad0ab9790f14780f1fe88c795c1fde8dbf3594864736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806374a552c914610030575b600080fd5b61004361003e366004610503565b61005a565b6040516100519291906105f5565b60405180910390f35b60608060008773ffffffffffffffffffffffffffffffffffffffff1663f4fde0d36040518163ffffffff1660e01b815260040160206040518083038186803b1580156100a557600080fd5b505afa1580156100b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100dd919061057d565b9050806100ea858761067b565b111561012b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012290610623565b60405180910390fd5b6000808567ffffffffffffffff81111561015557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561017e578160200160208202803683370190505b5094508567ffffffffffffffff8111156101a857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156101d1578160200160208202803683370190505b50935060006101e0878961067b565b90505b866101ee818a61067b565b6101f89190610663565b8110156104cc5783811061020b576104cc565b6040517fd31674db00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8d169063d31674db9061026090859060040161065a565b60206040518083038186803b15801561027857600080fd5b505afa15801561028c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b0919061057d565b905060008c73ffffffffffffffffffffffffffffffffffffffff1663e6c3b1f6836040518263ffffffff1660e01b81526004016102ed919061065a565b60206040518083038186803b15801561030557600080fd5b505afa158015610319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033d9190610557565b905060008c73ffffffffffffffffffffffffffffffffffffffff1662fdd58e8d856040518363ffffffff1660e01b815260040161037b9291906105cf565b60206040518083038186803b15801561039357600080fd5b505afa1580156103a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cb919061057d565b90508015806103d8575082155b806103e35750826001145b156103f0575050506104ba565b600182600281111561041257634e487b7160e01b600052602160045260246000fd5b1415610455578289876104248161069a565b98508151811061044457634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506104b6565b600282600281111561047757634e487b7160e01b600052602160045260246000fd5b14156104b6578288866104898161069a565b9750815181106104a957634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b5050505b806104c48161069a565b9150506101e3565b505050509550959350505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146104fe57600080fd5b919050565b600080600080600060a0868803121561051a578081fd5b610523866104da565b9450610531602087016104da565b935061053f604087016104da565b94979396509394606081013594506080013592915050565b600060208284031215610568578081fd5b815160038110610576578182fd5b9392505050565b60006020828403121561058e578081fd5b5051919050565b6000815180845260208085019450808401835b838110156105c4578151875295820195908201906001016105a8565b509495945050505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000604082526106086040830185610595565b828103602084015261061a8185610595565b95945050505050565b6020808252600c908201527f4f55545f4f465f52414e47450000000000000000000000000000000000000000604082015260600190565b90815260200190565b60008219821115610676576106766106b5565b500190565b6000816000190483118215151615610695576106956106b5565b500290565b60006000198214156106ae576106ae6106b5565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220936940017449242e219c5ac8fad0ab9790f14780f1fe88c795c1fde8dbf3594864736f6c63430008000033",
  "libraries": {
    "GovernanceLib": "0xaeb86F3860AD5B29aE141c56709835130ecbE0D9",
    "Strings": "0xAaCc702df0e464b2f2896aEe801241eEA6DBdba1",
    "AddressSet": "0x2521688f2bdf04bd785D477C05d5240634E63708",
    "UInt256Set": "0xE519B631E93BE6Df760b3872dE88344Dd969370a",
    "Create2": "0xe83DEBccfFF96a5113Bd485967a643D60C4487fd",
    "ProposalsLib": "0xd98B1717903B2Ff81b08F680372887a8c35174c2",
    "ComplexPoolLib": "0x9aCda89A5C672c5f74bf71C723D9fAad285167C2",
    "WrappedTokenLib": "0x9c2C592C7C6D3f7A58aD74ddCf31D0dE2f8807a5"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}