{
  "address": "0xC9900e474ec9D64678DC66980DBFcD6490a6bE90",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "ProposalClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalHash",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expDate",
          "type": "uint256"
        }
      ],
      "name": "ProposalFunded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "allProposals",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allProposalsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "proposalData",
          "type": "address"
        },
        {
          "internalType": "enum IProposal.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        }
      ],
      "name": "createProposal",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "proposal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_symbolHash",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0389cf17b81264ba0b11ea8436b8a3fde0ce8140c5dfd7368bc971c1c0e7a453",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0xC9900e474ec9D64678DC66980DBFcD6490a6bE90",
    "transactionIndex": 7,
    "gasUsed": "1733578",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0000510d00001be47972aa050f987775b60b0c8d20ffcf41860b90353215bd96",
    "transactionHash": "0x0389cf17b81264ba0b11ea8436b8a3fde0ce8140c5dfd7368bc971c1c0e7a453",
    "logs": [],
    "blockNumber": 11798191,
    "cumulativeGasUsed": "2760593",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b06c540bf558ebe1763f6f5fe903171f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"ProposalClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalHash\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expDate\",\"type\":\"uint256\"}],\"name\":\"ProposalFunded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"allProposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allProposalsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proposalData\",\"type\":\"address\"},{\"internalType\":\"enum IProposal.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"proposal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_symbolHash\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allProposals(uint256)\":{\"details\":\"get the proposal for this\"},\"allProposalsLength()\":{\"details\":\"number of quantized addresses\"},\"createProposal(address,string,address,uint8)\":{\"details\":\"deploy a new proposal using create2\"},\"getProposal(uint256)\":{\"details\":\"get the proposal for this\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/factories/ProposalFactory.sol\":\"ProposalFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8c578d9e30c8f2bb7ac01d108766df87d42b73d4d3638f01d494a894fe7c1f4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x27f9465d84949f059ed37b23c82f4a9fc16c1b8d6fbd69837a0f920875e2af83\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/factories/ProposalFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport \\\"../interfaces/IProposal.sol\\\";\\nimport \\\"../interfaces/IProposalFactory.sol\\\";\\n\\nimport \\\"../governance/GovernanceLib.sol\\\";\\nimport \\\"../governance/Proposal.sol\\\";\\n\\ncontract ProposalFactory is IProposalFactory {\\n    mapping(uint256 => address) private _getProposal;\\n    address[] private _allProposals;\\n\\n    /**\\n     * @dev get the proposal for this\\n     */\\n    function getProposal(uint256 _symbolHash)\\n        external\\n        view\\n        override\\n        returns (address proposal)\\n    {\\n        proposal = _getProposal[_symbolHash];\\n    }\\n\\n    /**\\n     * @dev get the proposal for this\\n     */\\n    function allProposals(uint256 idx)\\n        external\\n        view\\n        override\\n        returns (address proposal)\\n    {\\n        proposal = _allProposals[idx];\\n    }\\n\\n    /**\\n     * @dev number of quantized addresses\\n     */\\n    function allProposalsLength()\\n        external\\n        view\\n        override\\n        returns (uint256 proposal)\\n    {\\n        proposal = _allProposals.length;\\n    }\\n\\n    /**\\n     * @dev deploy a new proposal using create2\\n     */\\n    function createProposal(\\n        address submitter,\\n        string memory title,\\n        address proposalData,\\n        IProposal.ProposalType proposalType\\n    ) external override returns (address payable proposal) {\\n        // make sure this proposal doesnt already exist\\n        bytes32 salt = keccak256(abi.encodePacked(submitter, title));\\n        require(_getProposal[uint256(salt)] == address(0), \\\"PROPOSAL_EXISTS\\\"); // single check is sufficient\\n\\n        // create the quantized erc20 token using create2, which lets us determine the\\n        // quantized erc20 address of a token without interacting with the contract itself\\n        bytes memory bytecode = type(Proposal).creationCode;\\n\\n        // use create2 to deploy the quantized erc20 contract\\n        proposal = payable(Create2.deploy(0, salt, bytecode));\\n\\n        // initialize  the proposal with submitter, proposal type, and proposal data\\n        Proposal(proposal).initialize(\\n            submitter,\\n            title,\\n            proposalData,\\n            IProposal.ProposalType(proposalType)\\n        );\\n\\n        // add teh new proposal to our lists for management\\n        _getProposal[uint256(salt)] = proposal;\\n        _allProposals.push(proposal);\\n\\n        // emit an event about the new proposal being created\\n        emit ProposalCreated(submitter, uint256(proposalType), proposal);\\n    }\\n}\\n\",\"keccak256\":\"0x9537109bea0153f8092066df640697991a09c8fd8e5b3bbcfc2bc1f49165d152\",\"license\":\"MIT\"},\"src/governance/GovernanceLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolFactory.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/IProposal.sol\\\";\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\nlibrary GovernanceLib {\\n    // calculates the CREATE2 address for the quantized erc20 without making any external calls\\n    function addressOfProposal(\\n        address factory,\\n        address submitter,\\n        string memory title\\n    ) public pure returns (address govAddress) {\\n        govAddress = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(submitter, title)),\\n                            hex\\\"74f827a6bb3b7ed4cd86bd3c09b189a9496bc40d83635649e1e4df1c4e836ebf\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev create vote tokens to vote on given proposal\\n     */\\n    function createProposalVoteTokens(address multitoken, uint256 proposalHash)\\n        external\\n    {\\n        for (\\n            uint256 i = 0;\\n            i < INFTGemMultiToken(multitoken).allTokenHoldersLength(0);\\n            i++\\n        ) {\\n            address holder = INFTGemMultiToken(multitoken).allTokenHolders(\\n                0,\\n                i\\n            );\\n            INFTGemMultiToken(multitoken).mint(\\n                holder,\\n                proposalHash,\\n                IERC1155(multitoken).balanceOf(holder, 0)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev destroy the vote tokens for the given proposal\\n     */\\n    function destroyProposalVoteTokens(address multitoken, uint256 proposalHash)\\n        external\\n    {\\n        for (\\n            uint256 i = 0;\\n            i < INFTGemMultiToken(multitoken).allTokenHoldersLength(0);\\n            i++\\n        ) {\\n            address holder = INFTGemMultiToken(multitoken).allTokenHolders(\\n                0,\\n                i\\n            );\\n            INFTGemMultiToken(multitoken).burn(\\n                holder,\\n                proposalHash,\\n                IERC1155(multitoken).balanceOf(holder, proposalHash)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev execute craete pool proposal\\n     */\\n    function execute(address factory, address proposalAddress)\\n        public\\n        returns (address newPool)\\n    {\\n        // get the data for the new pool from the proposal\\n        address proposalData = IProposal(proposalAddress).proposalData();\\n\\n        (\\n            string memory symbol,\\n            string memory name,\\n            uint256 ethPrice,\\n            uint256 minTime,\\n            uint256 maxTime,\\n            uint256 diffStep,\\n            uint256 maxClaims,\\n            address allowedToken\\n        ) = ICreatePoolProposalData(proposalData).data();\\n\\n        // create the new pool\\n        newPool = createPool(\\n            factory,\\n            symbol,\\n            name,\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffStep,\\n            maxClaims,\\n            allowedToken\\n        );\\n    }\\n\\n    /**\\n     * @dev create a new pool\\n     */\\n    function createPool(\\n        address factory,\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) public returns (address pool) {\\n        pool = INFTGemPoolFactory(factory).createNFTGemPool(\\n            symbol,\\n            name,\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxClaims,\\n            allowedToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x28f0cbc322eb3b056ac1e1751a015697b5d2b642e3ead48486dee6f29c500680\",\"license\":\"MIT\"},\"src/governance/Proposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/IProposal.sol\\\";\\nimport \\\"../interfaces/IProposalFactory.sol\\\";\\n\\ncontract Proposal is Initializable, ERC1155Holder, IProposal {\\n    uint256 private constant MONTH = 2592000;\\n    uint256 private constant PROPOSAL_COST = 1 ether;\\n\\n    string private _title;\\n    address private _creator;\\n    address private _funder;\\n    address private _multitoken;\\n    address private _governor;\\n    uint256 private _expiration;\\n\\n    address private _proposalData;\\n    ProposalType private _proposalType;\\n\\n    bool private _funded;\\n    bool private _executed;\\n    bool private _closed;\\n\\n    function initialize(\\n        address __creator,\\n        string memory __title,\\n        address __proposalData,\\n        ProposalType __proposalType\\n    ) external override initializer {\\n        _title = __title;\\n        _creator = __creator;\\n        _proposalData = __proposalData;\\n        _proposalType = __proposalType;\\n    }\\n\\n    function setMultiToken(address token) external override {\\n        require(_multitoken == address(0), \\\"IMMUTABLE\\\");\\n        _multitoken = token;\\n    }\\n\\n    function setGovernor(address gov) external override {\\n        require(_governor == address(0), \\\"IMMUTABLE\\\");\\n        _governor = gov;\\n    }\\n\\n    function title() external view override returns (string memory) {\\n        return _title;\\n    }\\n\\n    function creator() external view override returns (address) {\\n        return _creator;\\n    }\\n\\n    function funder() external view override returns (address) {\\n        return _creator;\\n    }\\n\\n    function expiration() external view override returns (uint256) {\\n        return _expiration;\\n    }\\n\\n    function _status() internal view returns (ProposalStatus curCtatus) {\\n        curCtatus = ProposalStatus.ACTIVE;\\n        if (!_funded) {\\n            curCtatus = ProposalStatus.NOT_FUNDED;\\n        } else if (_executed) {\\n            curCtatus = ProposalStatus.EXECUTED;\\n        } else if (_closed) {\\n            curCtatus = ProposalStatus.CLOSED;\\n        } else {\\n            uint256 totalVotesSupply = INFTGemMultiToken(_multitoken)\\n            .totalBalances(uint256(uint160(address(this))));\\n            uint256 totalVotesInFavor = IERC1155(_multitoken).balanceOf(\\n                address(this),\\n                uint256(uint160(address(this)))\\n            );\\n            uint256 votesToPass = totalVotesSupply / (2) + (1);\\n            curCtatus = totalVotesInFavor >= votesToPass\\n                ? ProposalStatus.PASSED\\n                : ProposalStatus.ACTIVE;\\n            if (block.timestamp > _expiration) {\\n                curCtatus = totalVotesInFavor >= votesToPass\\n                    ? ProposalStatus.PASSED\\n                    : ProposalStatus.FAILED;\\n            }\\n        }\\n    }\\n\\n    function status()\\n        external\\n        view\\n        override\\n        returns (ProposalStatus curCtatus)\\n    {\\n        curCtatus = _status();\\n    }\\n\\n    function proposalData() external view override returns (address) {\\n        return _proposalData;\\n    }\\n\\n    function proposalType() external view override returns (ProposalType) {\\n        return _proposalType;\\n    }\\n\\n    function fund() external payable override {\\n        // ensure we cannot fund while in an invalid state\\n        require(!_funded, \\\"ALREADY_FUNDED\\\");\\n        require(!_closed, \\\"ALREADY_CLOSED\\\");\\n        require(!_executed, \\\"ALREADY_EXECUTED\\\");\\n        require(msg.value >= PROPOSAL_COST, \\\"MISSING_FEE\\\");\\n\\n        // proposal is now funded and clock starts ticking\\n        _funded = true;\\n        _expiration = block.timestamp + MONTH;\\n        _funder = msg.sender;\\n\\n        // create the vote tokens that will be used to vote on the proposal.\\n        INFTGemGovernor(_governor).createProposalVoteTokens(\\n            uint256(uint160(address(this)))\\n        );\\n\\n        // check for overpayment and if found then return remainder to user\\n        uint256 overpayAmount = msg.value - (PROPOSAL_COST);\\n        if (overpayAmount > 0) {\\n            (bool success, ) = payable(msg.sender).call{value: overpayAmount}(\\n                \\\"\\\"\\n            );\\n            require(success, \\\"REFUND_FAILED\\\");\\n        }\\n    }\\n\\n    function execute() external override {\\n        // ensure we are funded and open and not executed\\n        require(_funded, \\\"NOT_FUNDED\\\");\\n        require(!_closed, \\\"IS_CLOSED\\\");\\n        require(!_executed, \\\"IS_EXECUTED\\\");\\n        require(_status() == ProposalStatus.PASSED, \\\"IS_FAILED\\\");\\n\\n        // create the vote tokens that will be used to vote on the proposal.\\n        INFTGemGovernor(_governor).executeProposal(address(this));\\n\\n        // this proposal is now executed\\n        _executed = true;\\n\\n        // dewstroy the now-useless vote tokens used to vote for this proposal\\n        INFTGemGovernor(_governor).destroyProposalVoteTokens(\\n            uint256(uint160(address(this)))\\n        );\\n\\n        // refurn the filing fee to the funder of the proposal\\n        (bool success, ) = _funder.call{value: PROPOSAL_COST}(\\\"\\\");\\n        require(success, \\\"EXECUTE_FAILED\\\");\\n    }\\n\\n    function close() external override {\\n        // ensure we are funded and open and not executed\\n        require(_funded, \\\"NOT_FUNDED\\\");\\n        require(!_closed, \\\"IS_CLOSED\\\");\\n        require(!_executed, \\\"IS_EXECUTED\\\");\\n        require(block.timestamp > _expiration, \\\"IS_ACTIVE\\\");\\n        require(_status() == ProposalStatus.FAILED, \\\"IS_PASSED\\\");\\n\\n        // this proposal is now closed - no action was taken\\n        _closed = true;\\n\\n        // destroy the now-useless vote tokens used to vote for this proposal\\n        INFTGemGovernor(_governor).destroyProposalVoteTokens(\\n            uint256(uint160(address(this)))\\n        );\\n\\n        // send the proposal funder their filing fee back\\n        (bool success, ) = _funder.call{value: PROPOSAL_COST}(\\\"\\\");\\n        require(success, \\\"EXECUTE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x90763fd5043275861e22002772d2cafc99b83f68a19c87cc374af856e856587f\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n    event ControllerRemoved(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2a44548d9ba1bcd73d5734b2265db6c1556c013ccc61df621a6cbd5cca42cfaf\",\"license\":\"MIT\"},\"src/interfaces/INFTGemGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemGovernor {\\n    event GovernanceTokenIssued(address indexed receiver, uint256 amount);\\n    event FeeUpdated(\\n        address indexed proposal,\\n        address indexed token,\\n        uint256 newFee\\n    );\\n    event AllowList(\\n        address indexed proposal,\\n        address indexed token,\\n        bool isBanned\\n    );\\n    event ProjectFunded(\\n        address indexed proposal,\\n        address indexed receiver,\\n        uint256 received\\n    );\\n    event StakingPoolCreated(\\n        address indexed proposal,\\n        address indexed pool,\\n        string symbol,\\n        string name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffStep,\\n        uint256 maxClaims,\\n        address alllowedToken\\n    );\\n\\n    function initialize(\\n        address _multitoken,\\n        address _factory,\\n        address _feeTracker,\\n        address _proposalFactory,\\n        address _swapHelper\\n    ) external;\\n\\n    function initialized() external returns (bool);\\n\\n    function createProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function destroyProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function executeProposal(address propAddress) external;\\n\\n    function issueInitialGovernanceTokens(address receiver) external;\\n\\n    function createPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createChangeFeeProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (address);\\n\\n    function createFundProjectProposal(\\n        address,\\n        string memory,\\n        address,\\n        string memory,\\n        uint256\\n    ) external returns (address);\\n\\n    function createUpdateAllowlistProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        bool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x41ae78ffebe5292e371bb92acf89fbf9d0686dff6b6e10e027204894dc1f3fca\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    enum TokenType {\\n        GOVERNANCE,\\n        CLAIM,\\n        GEM\\n    }\\n\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to mint a claim or a gem\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        TokenType tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        returns (TokenType, address);\\n}\\n\",\"keccak256\":\"0xb871feba8e614aab0f81f26db323a68649f8d1cf6641848984e821a7bc02e7a1\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPoolFactory {\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event NFTGemPoolCreated(\\n        address indexed gemPoolAddress,\\n        string gemSymbol,\\n        string gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    );\\n\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event CustomNFTGemPoolCreated(\\n        address indexed gemPoolAdress,\\n        string gemSymbol,\\n        string gemName\\n    );\\n\\n    function nftGemPools() external view returns (address[] memory);\\n\\n    function getNFTGemPool(uint256 _symbolHash) external view returns (address);\\n\\n    function allNFTGemPools(uint256 idx) external view returns (address);\\n\\n    function allNFTGemPoolsLength() external view returns (uint256);\\n\\n    function createCustomNFTGemPool(\\n        bytes memory bytecode,\\n        string memory gemSymbol,\\n        string memory gemName\\n    ) external returns (address payable);\\n\\n    function createNFTGemPool(\\n        string memory gemSymbol,\\n        string memory gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    ) external returns (address payable);\\n\\n    function addCustomNFTGemPool(\\n        address poolAddress,\\n        string memory gemSymbol,\\n        string memory gemName\\n    ) external returns (address payable);\\n}\\n\",\"keccak256\":\"0xdc9f85316fdb3217ad085e2a985fa51e352e6670a92d55ddaf9a18be84cc53df\",\"license\":\"MIT\"},\"src/interfaces/IProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface IProposal {\\n    enum ProposalType {\\n        CREATE_POOL,\\n        FUND_PROJECT,\\n        CHANGE_FEE,\\n        UPDATE_ALLOWLIST\\n    }\\n\\n    enum ProposalStatus {\\n        NOT_FUNDED,\\n        ACTIVE,\\n        PASSED,\\n        FAILED,\\n        EXECUTED,\\n        CLOSED\\n    }\\n\\n    event ProposalCreated(address creator, address pool, uint256 proposalHash);\\n\\n    event ProposalExecuted(uint256 proposalHash);\\n\\n    event ProposalClosed(uint256 proposalHash);\\n\\n    function creator() external view returns (address);\\n\\n    function title() external view returns (string memory);\\n\\n    function funder() external view returns (address);\\n\\n    function expiration() external view returns (uint256);\\n\\n    function status() external view returns (ProposalStatus);\\n\\n    function proposalData() external view returns (address);\\n\\n    function proposalType() external view returns (ProposalType);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address gov) external;\\n\\n    function fund() external payable;\\n\\n    function execute() external;\\n\\n    function close() external;\\n\\n    function initialize(\\n        address,\\n        string memory,\\n        address,\\n        ProposalType\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9702c6803a4f314e9d670b6507dfa622b5817c519150048629f2d46282446c6b\",\"license\":\"MIT\"},\"src/interfaces/IProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ICreatePoolProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            string memory,\\n            string memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address\\n        );\\n}\\n\\ninterface IChangeFeeProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n}\\n\\ninterface IFundProjectProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            string memory,\\n            uint256\\n        );\\n}\\n\\ninterface IUpdateAllowlistProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0xf0444712cc1c9c63bced1153ecf2ca257b384003b973f65811951b15b26e792d\",\"license\":\"MIT\"},\"src/interfaces/IProposalFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IProposal.sol\\\";\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface IProposalFactory {\\n    /**\\n     * @dev emitted when a new gem pool proposal has been added to the system\\n     */\\n    event ProposalCreated(\\n        address creator,\\n        uint256 proposalType,\\n        address proposal\\n    );\\n\\n    event ProposalFunded(\\n        uint256 indexed proposalHash,\\n        address indexed funder,\\n        uint256 expDate\\n    );\\n\\n    event ProposalExecuted(uint256 indexed proposalHash, address pool);\\n\\n    event ProposalClosed(uint256 indexed proposalHash, address pool);\\n\\n    function getProposal(uint256 _symbolHash) external view returns (address);\\n\\n    function allProposals(uint256 idx) external view returns (address);\\n\\n    function allProposalsLength() external view returns (uint256);\\n\\n    function createProposal(\\n        address submitter,\\n        string memory title,\\n        address proposalData,\\n        IProposal.ProposalType proposalType\\n    ) external returns (address payable);\\n}\\n\",\"keccak256\":\"0xa4549e8638f205daff2bfcd299222a0eb5623763a77a7a8127375572c050ee19\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80634c30007614610051578063938351b81461007a578063c7f758a81461008d578063de8431e6146100a0575b600080fd5b61006461005f3660046103c3565b6100b5565b60405161007191906104f9565b60405180910390f35b610064610088366004610496565b6102b2565b61006461009b366004610496565b6102f0565b6100a861030b565b604051610071919061067c565b60008085856040516020016100cb9291906104ae565b60408051601f1981840301815291815281516020928301206000818152928390529120549091506001600160a01b0316156101215760405162461bcd60e51b8152600401610118906105d7565b60405180910390fd5b6000604051806020016101339061038b565b601f1982820381018352601f90910116604052905061015460008383610311565b6040517f113805ed0000000000000000000000000000000000000000000000000000000081529093506001600160a01b0384169063113805ed906101a2908a908a908a908a9060040161050d565b600060405180830381600087803b1580156101bc57600080fd5b505af11580156101d0573d6000803e3d6000fd5b505050600083815260208190526040812080546001600160a01b0387167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216811790925560018054808201825593527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69092018054909216179055507fe669ca381c47a2c25df06ebbe580c111183f1e92460fd3ab51050d2306b340278785600381111561029057634e487b7160e01b600052602160045260246000fd5b856040516102a09392919061057f565b60405180910390a15050949350505050565b6000600182815481106102d557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b6000908152602081905260409020546001600160a01b031690565b60015490565b600080844710156103345760405162461bcd60e51b815260040161011890610645565b82516103525760405162461bcd60e51b8152600401610118906105a2565b8383516020850187f590506001600160a01b0381166103835760405162461bcd60e51b81526004016101189061060e565b949350505050565b611791806106cc83390190565b80356001600160a01b03811681146103af57600080fd5b919050565b8035600481106103af57600080fd5b600080600080608085870312156103d8578384fd5b6103e185610398565b935060208086013567ffffffffffffffff808211156103fe578586fd5b818801915088601f830112610411578586fd5b813581811115610423576104236106b5565b60405184601f19601f8401168201018181108482111715610446576104466106b5565b60405281815283820185018b101561045c578788fd5b81858501868301379081019093019590955250925061047d60408601610398565b915061048b606086016103b4565b905092959194509250565b6000602082840312156104a7578081fd5b5035919050565b60007fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b16825282516104eb816014850160208701610685565b919091016014019392505050565b6001600160a01b0391909116815260200190565b60006001600160a01b03808716835260806020840152855180608085015261053c8160a0860160208a01610685565b9085166040840152601f01601f1916820160a00190506004831061057057634e487b7160e01b600052602160045260246000fd5b82606083015295945050505050565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b6020808252600f908201527f50524f504f53414c5f4558495354530000000000000000000000000000000000604082015260600190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b90815260200190565b60005b838110156106a0578181015183820152602001610688565b838111156106af576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfe608060405234801561001057600080fd5b50611771806100206000396000f3fe6080604052600436106100f35760003560e01c80634665096d1161008a578063bc197c8111610059578063bc197c8114610241578063c42cf5351461026e578063d104f8f51461028e578063f23a6e61146102ae576100f3565b80634665096d146101e05780634a79d50c146102025780636146195414610224578063b60d428814610239576100f3565b8063200d2ed2116100c6578063200d2ed214610172578063351d9f96146101945780634258292f146101b657806343d726d6146101cb576100f3565b806301ffc9a7146100f857806302d05d3f1461012e578063041ae8801461012e578063113805ed14610150575b600080fd5b34801561010457600080fd5b506101186101133660046111d6565b6102ce565b604051610125919061125b565b60405180910390f35b34801561013a57600080fd5b5061014361032c565b604051610125919061122e565b34801561015c57600080fd5b5061017061016b366004611151565b61033c565b005b34801561017e57600080fd5b5061018761048e565b6040516101259190611293565b3480156101a057600080fd5b506101a961049d565b60405161012591906112ad565b3480156101c257600080fd5b506101436104be565b3480156101d757600080fd5b506101706104cd565b3480156101ec57600080fd5b506101f56106e8565b604051610125919061163c565b34801561020e57600080fd5b506102176106ee565b60405161012591906112c1565b34801561023057600080fd5b50610170610780565b610170610935565b34801561024d57600080fd5b5061026161025c366004611048565b610b52565b6040516101259190611266565b34801561027a57600080fd5b5061017061028936600461102e565b610b7c565b34801561029a57600080fd5b506101706102a936600461102e565b610bd4565b3480156102ba57600080fd5b506102616102c93660046110ee565b610c2c565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e0000000000000000000000000000000000000000000000000000000001480610324575061032482610c56565b90505b919050565b6002546001600160a01b03165b90565b600054610100900460ff1680610355575060005460ff16155b61037a5760405162461bcd60e51b815260040161037190611427565b60405180910390fd5b600054610100900460ff161580156103c357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0061ff0019909116610100171660011790555b83516103d6906001906020870190610e7e565b50600280546001600160a01b0380881673ffffffffffffffffffffffffffffffffffffffff19928316179092556007805492861692909116919091178082558391907fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000083600381111561047057634e487b7160e01b600052602160045260246000fd5b02179055508015610487576000805461ff00191690555b5050505050565b6000610498610ca0565b905090565b60075474010000000000000000000000000000000000000000900460ff1690565b6007546001600160a01b031690565b600754600160a81b900460ff166104f65760405162461bcd60e51b815260040161037190611597565b600754600160b81b900460ff16156105205760405162461bcd60e51b8152600401610371906113b9565b600754600160b01b900460ff161561054a5760405162461bcd60e51b815260040161037190611382565b600654421161056b5760405162461bcd60e51b815260040161037190611560565b6003610575610ca0565b600581111561059457634e487b7160e01b600052602160045260246000fd5b146105b15760405162461bcd60e51b8152600401610371906115ce565b600780547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff16600160b81b1790556005546040517fdac7f24d0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063dac7f24d9061062890309060040161163c565b600060405180830381600087803b15801561064257600080fd5b505af1158015610656573d6000803e3d6000fd5b5050600354604051600093506001600160a01b039091169150670de0b6b3a76400009061068290610339565b60006040518083038185875af1925050503d80600081146106bf576040519150601f19603f3d011682016040523d82523d6000602084013e6106c4565b606091505b50509050806106e55760405162461bcd60e51b815260040161037190611529565b50565b60065490565b6060600180546106fd906116be565b80601f0160208091040260200160405190810160405280929190818152602001828054610729906116be565b80156107765780601f1061074b57610100808354040283529160200191610776565b820191906000526020600020905b81548152906001019060200180831161075957829003601f168201915b5050505050905090565b600754600160a81b900460ff166107a95760405162461bcd60e51b815260040161037190611597565b600754600160b81b900460ff16156107d35760405162461bcd60e51b8152600401610371906113b9565b600754600160b01b900460ff16156107fd5760405162461bcd60e51b815260040161037190611382565b6002610807610ca0565b600581111561082657634e487b7160e01b600052602160045260246000fd5b146108435760405162461bcd60e51b81526004016103719061134b565b6005546040517fa67a03ab0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063a67a03ab9061088c90309060040161122e565b600060405180830381600087803b1580156108a657600080fd5b505af11580156108ba573d6000803e3d6000fd5b5050600780547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b17905550506005546040517fdac7f24d0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063dac7f24d9061062890309060040161163c565b600754600160a81b900460ff161561095f5760405162461bcd60e51b8152600401610371906113f0565b600754600160b81b900460ff16156109895760405162461bcd60e51b8152600401610371906114f2565b600754600160b01b900460ff16156109b35760405162461bcd60e51b815260040161037190611605565b670de0b6b3a76400003410156109db5760405162461bcd60e51b815260040161037190611314565b600780547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b179055610a1662278d004261166f565b6006556003805473ffffffffffffffffffffffffffffffffffffffff1916331790556005546040517f1e4ad6a20000000000000000000000000000000000000000000000000000000081526001600160a01b039190911690631e4ad6a290610a8290309060040161163c565b600060405180830381600087803b158015610a9c57600080fd5b505af1158015610ab0573d6000803e3d6000fd5b505050506000670de0b6b3a764000034610aca91906116a7565b905080156106e5576000336001600160a01b031682604051610aeb90610339565b60006040518083038185875af1925050503d8060008114610b28576040519150601f19603f3d011682016040523d82523d6000602084013e610b2d565b606091505b5050905080610b4e5760405162461bcd60e51b815260040161037190611484565b5050565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6005546001600160a01b031615610ba55760405162461bcd60e51b8152600401610371906114bb565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6004546001600160a01b031615610bfd5760405162461bcd60e51b8152600401610371906114bb565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b600754600190600160a81b900460ff16610cbc57506000610339565b600754600160b01b900460ff1615610cd657506004610339565b600754600160b81b900460ff1615610cf057506005610339565b600480546040517fed7aae2b0000000000000000000000000000000000000000000000000000000081526000926001600160a01b039092169163ed7aae2b91610d3b9130910161163c565b60206040518083038186803b158015610d5357600080fd5b505afa158015610d67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8b9190611216565b600480546040517efdd58e0000000000000000000000000000000000000000000000000000000081529293506000926001600160a01b039091169162fdd58e91610dd9913091829101611242565b60206040518083038186803b158015610df157600080fd5b505afa158015610e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e299190611216565b90506000610e38600284611687565b610e4390600161166f565b905080821015610e54576001610e57565b60025b9350600654421115610e785780821015610e72576003610e75565b60025b93505b50505090565b828054610e8a906116be565b90600052602060002090601f016020900481019282610eac5760008555610ef2565b82601f10610ec557805160ff1916838001178555610ef2565b82800160010185558215610ef2579182015b82811115610ef2578251825591602001919060010190610ed7565b50610efe929150610f02565b5090565b5b80821115610efe5760008155600101610f03565b600067ffffffffffffffff831115610f3157610f31611725565b610f446020601f19601f86011601611645565b9050828152838383011115610f5857600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461032757600080fd5b600082601f830112610f96578081fd5b8135602067ffffffffffffffff821115610fb257610fb2611725565b808202610fc0828201611645565b838152828101908684018388018501891015610fda578687fd5b8693505b85841015610ffc578035835260019390930192918401918401610fde565b50979650505050505050565b600082601f830112611018578081fd5b61102783833560208501610f17565b9392505050565b60006020828403121561103f578081fd5b61102782610f6f565b600080600080600060a0868803121561105f578081fd5b61106886610f6f565b945061107660208701610f6f565b9350604086013567ffffffffffffffff80821115611092578283fd5b61109e89838a01610f86565b945060608801359150808211156110b3578283fd5b6110bf89838a01610f86565b935060808801359150808211156110d4578283fd5b506110e188828901611008565b9150509295509295909350565b600080600080600060a08688031215611105578081fd5b61110e86610f6f565b945061111c60208701610f6f565b93506040860135925060608601359150608086013567ffffffffffffffff811115611145578182fd5b6110e188828901611008565b60008060008060808587031215611166578384fd5b61116f85610f6f565b9350602085013567ffffffffffffffff81111561118a578384fd5b8501601f8101871361119a578384fd5b6111a987823560208401610f17565b9350506111b860408601610f6f565b91506060850135600481106111cb578182fd5b939692955090935050565b6000602082840312156111e7578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611027578182fd5b600060208284031215611227578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60208101600683106112a7576112a761170f565b91905290565b60208101600483106112a7576112a761170f565b6000602080835283518082850152825b818110156112ed578581018301518582016040015282016112d1565b818111156112fe5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252600b908201527f4d495353494e475f464545000000000000000000000000000000000000000000604082015260600190565b60208082526009908201527f49535f4641494c45440000000000000000000000000000000000000000000000604082015260600190565b6020808252600b908201527f49535f4558454355544544000000000000000000000000000000000000000000604082015260600190565b60208082526009908201527f49535f434c4f5345440000000000000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f414c52454144595f46554e444544000000000000000000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b6020808252600d908201527f524546554e445f4641494c454400000000000000000000000000000000000000604082015260600190565b60208082526009908201527f494d4d555441424c450000000000000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f414c52454144595f434c4f534544000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f455845435554455f4641494c4544000000000000000000000000000000000000604082015260600190565b60208082526009908201527f49535f4143544956450000000000000000000000000000000000000000000000604082015260600190565b6020808252600a908201527f4e4f545f46554e44454400000000000000000000000000000000000000000000604082015260600190565b60208082526009908201527f49535f5041535345440000000000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f414c52454144595f455845435554454400000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561166757611667611725565b604052919050565b60008219821115611682576116826116f9565b500190565b6000826116a257634e487b7160e01b81526012600452602481fd5b500490565b6000828210156116b9576116b96116f9565b500390565b6002810460018216806116d257607f821691505b602082108114156116f357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212206031e8e86be250ee16fd83f9941a236a313d72f055088ddd40d2a26a4447bda664736f6c63430008000033a2646970667358221220861cccf1894cb5d9343584847efffb71628768630063b84f2a96d702c7a5d60564736f6c63430008000033",
  "libraries": {
    "GovernanceLib": "0xaeb86F3860AD5B29aE141c56709835130ecbE0D9",
    "Strings": "0xAaCc702df0e464b2f2896aEe801241eEA6DBdba1",
    "AddressSet": "0x2521688f2bdf04bd785D477C05d5240634E63708",
    "UInt256Set": "0xE519B631E93BE6Df760b3872dE88344Dd969370a",
    "Create2": "0xe83DEBccfFF96a5113Bd485967a643D60C4487fd",
    "ProposalsLib": "0xd98B1717903B2Ff81b08F680372887a8c35174c2",
    "ComplexPoolLib": "0x9aCda89A5C672c5f74bf71C723D9fAad285167C2",
    "WrappedTokenLib": "0x9c2C592C7C6D3f7A58aD74ddCf31D0dE2f8807a5"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allProposals(uint256)": {
        "details": "get the proposal for this"
      },
      "allProposalsLength()": {
        "details": "number of quantized addresses"
      },
      "createProposal(address,string,address,uint8)": {
        "details": "deploy a new proposal using create2"
      },
      "getProposal(uint256)": {
        "details": "get the proposal for this"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5531,
        "contract": "src/factories/ProposalFactory.sol:ProposalFactory",
        "label": "_getProposal",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5534,
        "contract": "src/factories/ProposalFactory.sol:ProposalFactory",
        "label": "_allProposals",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}