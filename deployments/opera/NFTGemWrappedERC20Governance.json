{
  "address": "0xC3A105501BC1d86d809df3BB0ce46B37Aac4bC49",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "erc1155Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "Unwrap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "Wrap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "unwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "wrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaebd0f5f894afa67b626871a0ebebb97d90e4d29abe86c486a92107e7f2d5d54",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0xC3A105501BC1d86d809df3BB0ce46B37Aac4bC49",
    "transactionIndex": 0,
    "gasUsed": "1664063",
    "logsBloom": "0x
    "blockHash": "0x0000510e000000f65cdb536f1edefff38ea84a20241602cd01ec76c02b57df5c",
    "transactionHash": "0xaebd0f5f894afa67b626871a0ebebb97d90e4d29abe86c486a92107e7f2d5d54",
    "logs": [],
    "blockNumber": 11798273,
    "cumulativeGasUsed": "1664063",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "NFTGem Governance",
    "NFTGG",
    "0xf66c1591A31cD25C0f4281B32b3594005F58f99A",
    "0x8f01B92dD7979908A0CD1E64a39626C3193Fb665"
  ],
  "solcInputHash": "b06c540bf558ebe1763f6f5fe903171f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"erc1155Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"Unwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"Wrap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"wraps governance (token id 0)\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"create contract\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getReserves()\":{\"details\":\"get reserves held in wrapper\"},\"getTokenAddress()\":{\"details\":\"get the token address this wrapper is bound to\"},\"getTokenId()\":{\"details\":\"get the token id this wrapper is bound to\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(string,string,address,address,uint8,address)\":{\"details\":\"initialize is a stub because this class is deployed by us with constructor params\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"unwrap(uint256)\":{\"details\":\"unwrap tokens - transfer erc1155 to contract, mintt erc20\"},\"wrap(uint256)\":{\"details\":\"wrap tokens - transfer erc1155 to contract, mintt erc20\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/NFTGemERC20Governance.sol\":\"NFTGemWrappedERC20Governance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8c578d9e30c8f2bb7ac01d108766df87d42b73d4d3638f01d494a894fe7c1f4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/interfaces/IERC20WrappedERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20WrappedERC1155 {\\n    function wrap(uint256 quantity) external;\\n\\n    function unwrap(uint256 quantity) external;\\n\\n    function getReserves() external returns (uint256);\\n\\n    function getTokenAddress() external returns (address);\\n\\n    function getTokenId() external returns (uint256);\\n\\n    event Wrap(address indexed account, uint256 quantity);\\n    event Unwrap(address indexed account, uint256 quantity);\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        address,\\n        address,\\n        uint8,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe9595249c0e81c9ed39bbc161d9a57c9fa27ce586e71ee29ab6c84b1eaa4c31c\",\"license\":\"MIT\"},\"src/interfaces/IERC20WrappedGem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IERC20WrappedERC1155.sol\\\";\\n\\n/**\\n * @dev A wrapped gem is an erc20 wrapper around an erc1155 token type\\n */\\ninterface IERC20WrappedGem is IERC20WrappedERC1155 {\\n\\n}\\n\",\"keccak256\":\"0xbbf91193b75bf0e8ec351d240b77327ff6126f2547819e7b101faa243bbd1525\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTComplexGemPool {\\n    enum RequirementType {\\n        ERC20,\\n        ERC1155,\\n        POOL\\n    }\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 amountPaid,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 gemHash,\\n        uint256 quantity\\n    );\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external;\\n\\n    function collectClaim(uint256 claimHash, bool requireMature) external;\\n\\n    function purchaseGems(uint256 count) external payable;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0x82c44e3e50944c227762a26043a1307be6c51ce8621153fe0a69b0633abe0a73\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./INFTGemMultiToken.sol\\\";\\nimport \\\"./INFTComplexGemPool.sol\\\";\\n\\ninterface INFTComplexGemPoolData {\\n    enum PriceIncrementType {\\n        COMPOUND,\\n        INVERSELOG,\\n        NONE\\n    }\\n\\n    /**\\n     * @dev Event generated when an NFT claim is imported from a legacy contract\\n     */\\n    event NFTGemImported(\\n        address indexed converter,\\n        address indexed pool,\\n        address oldPool,\\n        address oldToken,\\n        uint256 indexed gemHash,\\n        uint256 quantity\\n    );\\n\\n    function addInputRequirement(\\n        address theToken,\\n        address pool,\\n        INFTComplexGemPool.RequirementType inputType,\\n        uint256 theTokenId,\\n        uint256 minAmount,\\n        bool takeCustody,\\n        bool burn\\n    ) external;\\n\\n    function updateInputRequirement(\\n        uint256 ndx,\\n        address theToken,\\n        address pool,\\n        INFTComplexGemPool.RequirementType inputType,\\n        uint256 tid,\\n        uint256 minAmount,\\n        bool takeCustody,\\n        bool burn\\n    ) external;\\n\\n    function allInputRequirementsLength() external returns (uint256);\\n\\n    function allInputRequirements(uint256 ndx)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            INFTComplexGemPool.RequirementType,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool\\n        );\\n\\n    function settings()\\n        external\\n        view\\n        returns (\\n            string memory settingsSymbol,\\n            string memory settingsName,\\n            string memory settingsDescription,\\n            uint256 settingsCategory,\\n            uint256 settingsEthPrice,\\n            uint256 settingsMinTime,\\n            uint256 settingsMaxTime,\\n            uint256 settingsDiffStep,\\n            uint256 settingsMacClaims,\\n            uint256 settingsMaxQuantityPerClaim,\\n            uint256 settingsMaxClaimsPerAccount\\n        );\\n\\n    function stats()\\n        external\\n        view\\n        returns (\\n            bool statsVisible,\\n            uint256 statsClaimedCount,\\n            uint256 statsMintedCount,\\n            uint256 statsTotalStakedEth,\\n            uint256 statsNextClaimHash,\\n            uint256 statsNextGemHash,\\n            uint256 statsNextClaimId,\\n            uint256 statsNextGemId\\n        );\\n\\n    function claim(uint256 claimHash)\\n        external\\n        view\\n        returns (\\n            uint256 claimClaimAmount,\\n            uint256 claimClaimQuantity,\\n            uint256 claimClaimUnlockTime,\\n            uint256 claimClaimTokenAmount,\\n            address claimStakedToken,\\n            uint256 claimNextClaimId\\n        );\\n\\n    function token(uint256 tokenHash)\\n        external\\n        view\\n        returns (\\n            INFTGemMultiToken.TokenType tokenTokenType,\\n            uint256 tokenTokenId,\\n            address tokenTokenSource\\n        );\\n\\n    function addAllowedTokenSource(address allowedToken) external;\\n\\n    function removeAllowedTokenSource(address allowedToken) external;\\n\\n    function allowedTokenSources() external view returns (address[] memory);\\n\\n    function importLegacyGem(\\n        address pool,\\n        address legacyToken,\\n        uint256 tokenHash,\\n        address recipient\\n    ) external;\\n\\n    function isLegacyGemImported(uint256 tokenhash)\\n        external\\n        view\\n        returns (bool);\\n\\n    function setNextIds(uint256 _nextClaimId, uint256 _nextGemId) external;\\n\\n    function tokenHashes() external view returns (uint256[] memory);\\n\\n    function setTokenHashes(uint256[] memory inTokenHashes) external;\\n\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n\\n    function ethPrice() external view returns (uint256);\\n\\n    function setVisible(bool isVisible) external;\\n\\n    function visible() external view returns (bool);\\n\\n    function setCategory(uint256 theCategory) external;\\n\\n    function category() external view returns (uint256);\\n\\n    function setDescription(string memory desc) external;\\n\\n    function description() external view returns (string memory);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n\\n    function claimQuantity(uint256 claimId) external view returns (uint256);\\n\\n    function maxQuantityPerClaim() external view returns (uint256);\\n\\n    function maxClaimsPerAccount() external view returns (uint256);\\n\\n    function setMaxQuantityPerClaim(uint256 claimId) external;\\n\\n    function setMaxClaimsPerAccount(uint256 claimId) external;\\n\\n    function mintedCount() external view returns (uint256);\\n\\n    function totalStakedEth() external view returns (uint256);\\n\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n\\n    function tokenType(uint256 tokenHash)\\n        external\\n        view\\n        returns (INFTGemMultiToken.TokenType);\\n\\n    function allTokenHashesLength() external view returns (uint256);\\n\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n\\n    function nextClaimHash() external view returns (uint256);\\n\\n    function nextGemHash() external view returns (uint256);\\n\\n    function nextGemId() external view returns (uint256);\\n\\n    function nextClaimId() external view returns (uint256);\\n\\n    function setValidateErc20(bool) external;\\n\\n    function validateErc20() external view returns (bool);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n\\n    function gemClaimHash(uint256 gemHash) external view returns (uint256);\\n\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n\\n    function allowedTokens(uint256 idx) external view returns (address);\\n\\n    function isTokenAllowed(address tkn) external view returns (bool);\\n\\n    function addAllowedToken(address tkn) external;\\n\\n    function removeAllowedToken(address tkn) external;\\n\\n    function allowPurchase() external view returns (bool);\\n\\n    function setAllowPurchase(bool allow) external;\\n\\n    function enabled() external view returns (bool);\\n\\n    function setEnabled(bool enable) external;\\n\\n    function priceIncrementType() external view returns (PriceIncrementType);\\n\\n    function setPriceIncrementType(PriceIncrementType incrementType) external;\\n}\\n\",\"keccak256\":\"0xdb7e97f054516df8991c1cdbbbe85cbe9a494d25d8ca2ac5ae3e48ea61d251b1\",\"license\":\"MIT\"},\"src/interfaces/INFTGemFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface INFTGemFeeManager {\\n    event DefaultFeeDivisorChanged(\\n        address indexed operator,\\n        uint256 oldValue,\\n        uint256 value\\n    );\\n    event FeeDivisorChanged(\\n        address indexed operator,\\n        address indexed token,\\n        uint256 oldValue,\\n        uint256 value\\n    );\\n    event ETHReceived(address indexed manager, address sender, uint256 value);\\n    event LiquidityChanged(\\n        address indexed manager,\\n        uint256 oldValue,\\n        uint256 value\\n    );\\n\\n    function liquidity(address token) external view returns (uint256);\\n\\n    function defaultLiquidity() external view returns (uint256);\\n\\n    function setDefaultLiquidity(uint256 _liquidityMult)\\n        external\\n        returns (uint256);\\n\\n    function feeDivisor(address token) external view returns (uint256);\\n\\n    function defaultFeeDivisor() external view returns (uint256);\\n\\n    function setFeeDivisor(address token, uint256 _feeDivisor)\\n        external\\n        returns (uint256);\\n\\n    function setDefaultFeeDivisor(uint256 _feeDivisor)\\n        external\\n        returns (uint256);\\n\\n    function ethBalanceOf() external view returns (uint256);\\n\\n    function balanceOf(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8ea1f501e09a68d5723eacd4a7d8baa87f6f35d8577449ab41347b4de14b3877\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    enum TokenType {\\n        GOVERNANCE,\\n        CLAIM,\\n        GEM\\n    }\\n\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to mint a claim or a gem\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        TokenType tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        returns (TokenType, address);\\n}\\n\",\"keccak256\":\"0xb871feba8e614aab0f81f26db323a68649f8d1cf6641848984e821a7bc02e7a1\",\"license\":\"MIT\"},\"src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev sets the decimal value\\n     */\\n    function _setupDecimals(uint8 _value) internal {\\n        _decimals = _value;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xf59acbbeeaacea93d00e01b40cb8a1c7449b22558425b3bd6d2c3a0bc937a457\",\"license\":\"MIT\"},\"src/tokens/ERC20WrappedERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\nimport \\\"../interfaces/IERC20WrappedERC1155.sol\\\";\\nimport \\\"./WrappedTokenLib.sol\\\";\\n\\n/**\\n * @dev Wrap a single ERC1155 token hash into an ERC20 token.\\n */\\ncontract ERC20WrappedERC1155 is ERC20, ERC1155Holder, IERC20WrappedERC1155 {\\n    using WrappedTokenLib for WrappedTokenLib.WrappedTokenData;\\n\\n    WrappedTokenLib.WrappedTokenData internal tokenData;\\n\\n    /**\\n     * @dev constructor sets up token parameters.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address erc1155Token,\\n        uint256 tokenIndex,\\n        uint256 exchangeRate\\n    ) ERC20(name, symbol) {\\n        tokenData.erc1155token = erc1155Token;\\n        tokenData.tokenPool = address(0);\\n        tokenData.index = tokenIndex;\\n        tokenData.tokenType = INFTGemMultiToken.TokenType.GOVERNANCE;\\n        tokenData.rate = exchangeRate;\\n        _setupDecimals(decimals);\\n    }\\n\\n    /**\\n     * @dev initialize is a stub because this class is deployed by us with constructor params\\n     */\\n    function initialize(\\n        string memory,\\n        string memory,\\n        address,\\n        address,\\n        uint8,\\n        address\\n    ) external override {\\n        tokenData.erc20token = address(this);\\n    }\\n\\n    /**\\n     * @dev wrap a quantity of tokens by transferring ERC1155 to this contract and minting ERC20 token\\n     */\\n    function _wrap(uint256 quantity) internal {\\n        require(quantity != 0, \\\"ZERO_QUANTITY\\\");\\n        require(\\n            IERC1155(tokenData.erc1155token).balanceOf(\\n                msg.sender,\\n                tokenData.index\\n            ) >= quantity,\\n            \\\"INSUFFICIENT_ERC1155_BALANCE\\\"\\n        );\\n        IERC1155(tokenData.erc1155token).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenData.index,\\n            quantity,\\n            \\\"\\\"\\n        );\\n        _mint(msg.sender, quantity * (tokenData.rate * 10**decimals()));\\n    }\\n\\n    /**\\n     * @dev wrap a quantity of erc1155 governance to erc20\\n     */\\n    function wrap(uint256 quantity) external virtual override {\\n        _wrap(quantity);\\n    }\\n\\n    /**\\n     * @dev unwrap a quantity of wrapped erc20 governance to erc1155\\n     */\\n    function _unwrap(uint256 quantity) internal {\\n        require(quantity != 0, \\\"ZERO_QUANTITY\\\");\\n        require(\\n            IERC1155(tokenData.erc1155token).balanceOf(\\n                address(this),\\n                tokenData.index\\n            ) >= quantity,\\n            \\\"INSUFFICIENT_RESERVES\\\"\\n        );\\n        require(\\n            balanceOf(msg.sender) >=\\n                quantity * (tokenData.rate * 10**decimals()),\\n            \\\"INSUFFICIENT_ERC20_BALANCE\\\"\\n        );\\n        _burn(msg.sender, quantity * (tokenData.rate * 10**decimals()));\\n        IERC1155(tokenData.erc1155token).safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            tokenData.index,\\n            quantity,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev unwrap a quantity of wrapped erc20 governance to erc1155\\n     */\\n    function unwrap(uint256 quantity) external virtual override {\\n        _unwrap(quantity);\\n    }\\n\\n    /**\\n     * @dev get reserves held in wrapper\\n     */\\n    function getReserves() external view override returns (uint256) {\\n        return\\n            IERC1155(tokenData.erc1155token).balanceOf(\\n                address(this),\\n                tokenData.index\\n            );\\n    }\\n\\n    /**\\n     * @dev get the token address this wrapper is bound to\\n     */\\n    function getTokenAddress() external view override returns (address) {\\n        return tokenData.erc1155token;\\n    }\\n\\n    /**\\n     * @dev get the token id this wrapper is bound to\\n     */\\n    function getTokenId() external view override returns (uint256) {\\n        return tokenData.index;\\n    }\\n}\\n\",\"keccak256\":\"0xeb6ef881cbec039f57e5a6e01a5190538f42737343ed9c114421f03224527509\",\"license\":\"MIT\"},\"src/tokens/NFTGemERC20Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\n\\nimport \\\"./ERC20WrappedERC1155.sol\\\";\\n\\n/**\\n * @dev wraps governance (token id 0)\\n */\\ncontract NFTGemWrappedERC20Governance is ERC20WrappedERC1155 {\\n    address internal _feeManager;\\n\\n    /**\\n     * @dev create contract\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address erc1155Token,\\n        address feeManager\\n    ) ERC20WrappedERC1155(name, symbol, 18, erc1155Token, 0, 1) {\\n        _feeManager = feeManager;\\n    }\\n\\n    /**\\n     * @dev wrap tokens - transfer erc1155 to contract, mintt erc20\\n     */\\n    function wrap(uint256 quantity) external override {\\n        require(quantity != 0, \\\"ZERO_QUANTITY\\\");\\n        require(\\n            IERC1155(tokenData.erc1155token).balanceOf(\\n                msg.sender,\\n                tokenData.index\\n            ) >= quantity,\\n            \\\"INSUFFICIENT_ERC1155_BALANCE\\\"\\n        );\\n        uint256 tq = quantity * (tokenData.rate * 10**decimals());\\n        uint256 fd = INFTGemFeeManager(_feeManager).feeDivisor(address(this));\\n        uint256 fee = fd != 0 ? tq / (fd) : 0;\\n        uint256 userQty = tq - (fee);\\n        IERC1155(tokenData.erc1155token).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenData.index,\\n            quantity,\\n            \\\"\\\"\\n        );\\n        _mint(msg.sender, userQty);\\n        _mint(_feeManager, fee);\\n    }\\n\\n    /**\\n     * @dev unwrap tokens - transfer erc1155 to contract, mintt erc20\\n     */\\n    function unwrap(uint256 quantity) external override {\\n        _unwrap(quantity);\\n    }\\n}\\n\",\"keccak256\":\"0xa3e1f16ba47d81c444067e2a93249525134271aa7a3d4a0205ca510a7ee21328\",\"license\":\"MIT\"},\"src/tokens/WrappedTokenLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IERC20WrappedGem.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPoolData.sol\\\";\\n\\n/**\\n * @dev wrapped token library\\n */\\nlibrary WrappedTokenLib {\\n    event Wrap(address indexed account, uint256 quantity);\\n    event Unwrap(address indexed account, uint256 quantity);\\n\\n    /**\\n     * @dev data struct for wrapped token\\n     */\\n    struct WrappedTokenData {\\n        address erc1155token;\\n        address erc20token;\\n        address tokenPool;\\n        uint256 index;\\n        INFTGemMultiToken.TokenType tokenType;\\n        uint256 rate;\\n        uint256 wrappedBalance;\\n        mapping(address => uint256[]) ids;\\n        mapping(address => uint256[]) amounts;\\n    }\\n\\n    /**\\n     * @dev get pool balance (number of minted claims or gems) for given token pool, token type, for account\\n     */\\n    function getPoolTypeBalance(\\n        address erc1155token,\\n        address tokenPool,\\n        INFTGemMultiToken.TokenType tokenType,\\n        address account\\n    ) public view returns (uint256 tq) {\\n        uint256[] memory ht = INFTGemMultiToken(erc1155token).heldTokens(\\n            account\\n        );\\n        for (uint256 i = ht.length - 1; i >= 0; i = i - 1) {\\n            uint256 tokenHash = ht[i];\\n            (\\n                INFTGemMultiToken.TokenType _tokenType,\\n                address _tokenPool\\n            ) = INFTGemMultiToken(erc1155token).getTokenData(tokenHash);\\n            if (_tokenType == tokenType && _tokenPool == tokenPool) {\\n                uint256 oq = IERC1155(erc1155token).balanceOf(\\n                    account,\\n                    tokenHash\\n                );\\n                tq = tq + oq;\\n            }\\n            if (i == 0) break;\\n        }\\n    }\\n\\n    /**\\n     * @dev transfer a given number of claims / gems from account to recipient\\n     */\\n    function transferPoolTypesFrom(\\n        WrappedTokenData storage self,\\n        address from,\\n        address to,\\n        uint256 quantity\\n    ) public {\\n        uint256 tq = quantity;\\n        delete self.ids[to];\\n        delete self.amounts[to];\\n\\n        uint256[] memory ht = INFTGemMultiToken(self.erc1155token).heldTokens(\\n            from\\n        );\\n        for (uint256 i = ht.length - 1; i >= 0 && tq > 0; i = i - 1) {\\n            uint256 tokenHash = ht[i];\\n            (\\n                INFTGemMultiToken.TokenType _tokenType,\\n                address _tokenPool\\n            ) = INFTGemMultiToken(self.erc1155token).getTokenData(tokenHash);\\n            if (_tokenType == self.tokenType && _tokenPool == self.tokenPool) {\\n                uint256 oq = IERC1155(self.erc1155token).balanceOf(\\n                    from,\\n                    tokenHash\\n                );\\n                uint256 toTransfer = oq > tq ? tq : oq;\\n                self.ids[to].push(tokenHash);\\n                self.amounts[to].push(toTransfer);\\n                tq = tq - toTransfer;\\n            }\\n            if (i == 0) break;\\n        }\\n\\n        require(tq == 0, \\\"INSUFFICIENT_GEMS\\\");\\n\\n        IERC1155(self.erc1155token).safeBatchTransferFrom(\\n            from,\\n            to,\\n            self.ids[to],\\n            self.amounts[to],\\n            \\\"\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4bd96cdc76a1acd559d868c102ab030b45fbce921e9933141d72cc0413914b4d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001e0538038062001e0583398101604081905262000034916200027a565b83836012846000600185858160039080519060200190620000579291906200010c565b5080516200006d9060049060208401906200010c565b505060058054601260ff1991821617909155600680546001600160a01b03199081166001600160a01b038816179091556008805490911690556009849055600a8054909116905550600b819055620000c584620000f6565b5050600f80546001600160a01b0319166001600160a01b039690961695909517909455506200035995505050505050565b6005805460ff191660ff92909216919091179055565b8280546200011a9062000306565b90600052602060002090601f0160209004810192826200013e576000855562000189565b82601f106200015957805160ff191683800117855562000189565b8280016001018555821562000189579182015b82811115620001895782518255916020019190600101906200016c565b50620001979291506200019b565b5090565b5b808211156200019757600081556001016200019c565b80516001600160a01b0381168114620001ca57600080fd5b919050565b600082601f830112620001e0578081fd5b81516001600160401b0380821115620001fd57620001fd62000343565b6040516020601f8401601f191682018101838111838210171562000225576200022562000343565b60405283825285840181018710156200023c578485fd5b8492505b838310156200025f578583018101518284018201529182019162000240565b838311156200027057848185840101525b5095945050505050565b6000806000806080858703121562000290578384fd5b84516001600160401b0380821115620002a7578586fd5b620002b588838901620001cf565b95506020870151915080821115620002cb578485fd5b50620002da87828801620001cf565b935050620002eb60408601620001b2565b9150620002fb60608601620001b2565b905092959194509250565b6002810460018216806200031b57607f821691505b602082108114156200033d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611a9c80620003696000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c806339509351116100cd578063bc197c8111610081578063de0e9a3e11610066578063de0e9a3e146102c0578063ea598cb0146102d3578063f23a6e61146102e65761016c565b8063bc197c811461028d578063dd62ed3e146102ad5761016c565b806395d89b41116100b257806395d89b411461025f578063a457c2d714610267578063a9059cbb1461027a5761016c565b8063395093511461023957806370a082311461024c5761016c565b806310fe9ae81161012457806323b872dd1161010957806323b872dd146101fc578063313ce5671461020f57806332816be1146102245761016c565b806310fe9ae8146101df57806318160ddd146101f45761016c565b806306fdde031161015557806306fdde03146101af5780630902f1ac146101c4578063095ea7b3146101cc5761016c565b8063010a38f51461017157806301ffc9a71461018f575b600080fd5b6101796102f9565b6040516101869190611839565b60405180910390f35b6101a261019d3660046111d8565b6102ff565b6040516101869190611356565b6101b761035d565b604051610186919061138e565b6101796103ef565b6101a26101da3660046111af565b610476565b6101e7610493565b60405161018691906112f1565b6101796104a2565b6101a261020a366004611111565b6104a8565b610217610543565b6040516101869190611842565b610237610232366004611218565b61054c565b005b6101a26102473660046111af565b61057e565b61017961025a36600461101f565b6105d2565b6101b76105ed565b6101a26102753660046111af565b6105fc565b6101a26102883660046111af565b610675565b6102a061029b36600461106b565b610689565b6040516101869190611361565b6101796102bb366004611039565b6106b3565b6102376102ce3660046112c1565b6106de565b6102376102e13660046112c1565b6106ea565b6102a06102f436600461114c565b610945565b60095490565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000148061035557506103558261096f565b90505b919050565b60606003805461036c906119ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610398906119ff565b80156103e55780601f106103ba576101008083540402835291602001916103e5565b820191906000526020600020905b8154815290600101906020018083116103c857829003601f168201915b5050505050905090565b600654600954604051627eeac760e11b81526000926001600160a01b03169162fdd58e9161042191309160040161133d565b60206040518083038186803b15801561043957600080fd5b505afa15801561044d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047191906112d9565b905090565b600061048a6104836109b9565b84846109bd565b50600192915050565b6006546001600160a01b031690565b60025490565b60006104b5848484610a71565b6001600160a01b0384166000908152600160205260408120816104d66109b9565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156105225760405162461bcd60e51b8152600401610519906115fa565b60405180910390fd5b6105368561052e6109b9565b8584036109bd565b60019150505b9392505050565b60055460ff1690565b5050600780547fffffffffffffffffffffffff0000000000000000000000000000000000000000163017905550505050565b600061048a61058b6109b9565b8484600160006105996109b9565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546105cd919061187a565b6109bd565b6001600160a01b031660009081526020819052604090205490565b60606004805461036c906119ff565b6000806001600061060b6109b9565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156106575760405162461bcd60e51b8152600401610519906117a5565b61066b6106626109b9565b858584036109bd565b5060019392505050565b600061048a6106826109b9565b8484610a71565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6106e781610b9b565b50565b806107075760405162461bcd60e51b8152600401610519906115c3565b600654600954604051627eeac760e11b815283926001600160a01b03169162fdd58e9161073891339160040161133d565b60206040518083038186803b15801561075057600080fd5b505afa158015610764573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078891906112d9565b10156107a65760405162461bcd60e51b8152600401610519906114f8565b60006107b0610543565b6107bb90600a6118f8565b600b546107c891906119c9565b6107d290836119c9565b600f546040517feee1ad800000000000000000000000000000000000000000000000000000000081529192506000916001600160a01b039091169063eee1ad80906108219030906004016112f1565b60206040518083038186803b15801561083957600080fd5b505afa15801561084d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087191906112d9565b905060008161088157600061088b565b61088b8284611892565b9050600061089982856119e8565b6006546009546040517ff242432a0000000000000000000000000000000000000000000000000000000081529293506001600160a01b039091169163f242432a916108ec91339130918b90600401611305565b600060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b505050506109283382610d59565b600f5461093e906001600160a01b031683610d59565b5050505050565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b3390565b6001600160a01b0383166109e35760405162461bcd60e51b815260040161051990611711565b6001600160a01b038216610a095760405162461bcd60e51b81526004016105199061149b565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610a64908590611839565b60405180910390a3505050565b6001600160a01b038316610a975760405162461bcd60e51b8152600401610519906116b4565b6001600160a01b038216610abd5760405162461bcd60e51b8152600401610519906113e1565b610ac8838383610e25565b6001600160a01b03831660009081526020819052604090205481811015610b015760405162461bcd60e51b81526004016105199061152f565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610b3890849061187a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b829190611839565b60405180910390a3610b95848484610e25565b50505050565b80610bb85760405162461bcd60e51b8152600401610519906115c3565b600654600954604051627eeac760e11b815283926001600160a01b03169162fdd58e91610be991309160040161133d565b60206040518083038186803b158015610c0157600080fd5b505afa158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3991906112d9565b1015610c575760405162461bcd60e51b81526004016105199061176e565b610c5f610543565b610c6a90600a6118f8565b600b54610c7791906119c9565b610c8190826119c9565b610c8a336105d2565b1015610ca85760405162461bcd60e51b81526004016105199061158c565b610cdb33610cb4610543565b610cbf90600a6118f8565b600b54610ccc91906119c9565b610cd690846119c9565b610e2a565b6006546009546040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163f242432a91610d2b91309133918790600401611305565b600060405180830381600087803b158015610d4557600080fd5b505af115801561093e573d6000803e3d6000fd5b6001600160a01b038216610d7f5760405162461bcd60e51b815260040161051990611802565b610d8b60008383610e25565b8060026000828254610d9d919061187a565b90915550506001600160a01b03821660009081526020819052604081208054839290610dca90849061187a565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e0d908590611839565b60405180910390a3610e2160008383610e25565b5050565b505050565b6001600160a01b038216610e505760405162461bcd60e51b815260040161051990611657565b610e5c82600083610e25565b6001600160a01b03821660009081526020819052604090205481811015610e955760405162461bcd60e51b81526004016105199061143e565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610ec49084906119e8565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610f07908690611839565b60405180910390a3610e2583600084610e25565b80356001600160a01b038116811461035857600080fd5b600082601f830112610f42578081fd5b8135602067ffffffffffffffff821115610f5e57610f5e611a50565b808202610f6c828201611850565b838152828101908684018388018501891015610f86578687fd5b8693505b85841015610fa8578035835260019390930192918401918401610f8a565b50979650505050505050565b600082601f830112610fc4578081fd5b813567ffffffffffffffff811115610fde57610fde611a50565b610ff16020601f19601f84011601611850565b818152846020838601011115611005578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215611030578081fd5b61053c82610f1b565b6000806040838503121561104b578081fd5b61105483610f1b565b915061106260208401610f1b565b90509250929050565b600080600080600060a08688031215611082578081fd5b61108b86610f1b565b945061109960208701610f1b565b9350604086013567ffffffffffffffff808211156110b5578283fd5b6110c189838a01610f32565b945060608801359150808211156110d6578283fd5b6110e289838a01610f32565b935060808801359150808211156110f7578283fd5b5061110488828901610fb4565b9150509295509295909350565b600080600060608486031215611125578283fd5b61112e84610f1b565b925061113c60208501610f1b565b9150604084013590509250925092565b600080600080600060a08688031215611163578081fd5b61116c86610f1b565b945061117a60208701610f1b565b93506040860135925060608601359150608086013567ffffffffffffffff8111156111a3578182fd5b61110488828901610fb4565b600080604083850312156111c1578182fd5b6111ca83610f1b565b946020939093013593505050565b6000602082840312156111e9578081fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461053c578182fd5b60008060008060008060c08789031215611230578081fd5b863567ffffffffffffffff80821115611247578283fd5b6112538a838b01610fb4565b97506020890135915080821115611268578283fd5b5061127589828a01610fb4565b95505061128460408801610f1b565b935061129260608801610f1b565b9250608087013560ff811681146112a7578182fd5b91506112b560a08801610f1b565b90509295509295509295565b6000602082840312156112d2578081fd5b5035919050565b6000602082840312156112ea578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6000602080835283518082850152825b818110156113ba5785810183015185820160400152820161139e565b818111156113cb5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60408201527f6365000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f494e53554646494349454e545f455243313135355f42414c414e434500000000604082015260600190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527f616c616e63650000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f494e53554646494349454e545f45524332305f42414c414e4345000000000000604082015260600190565b6020808252600d908201527f5a45524f5f5155414e5449545900000000000000000000000000000000000000604082015260600190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160408201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f494e53554646494349454e545f52455345525645530000000000000000000000604082015260600190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760408201527f207a65726f000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561187257611872611a50565b604052919050565b6000821982111561188d5761188d611a3a565b500190565b6000826118ad57634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116118c457506118ef565b8187048211156118d6576118d6611a3a565b808616156118e357918102915b9490941c9380026118b5565b94509492505050565b600061053c60001960ff8516846000826119145750600161053c565b816119215750600061053c565b816001811461193757600281146119415761196e565b600191505061053c565b60ff84111561195257611952611a3a565b6001841b91508482111561196857611968611a3a565b5061053c565b5060208310610133831016604e8410600b84101617156119a1575081810a8381111561199c5761199c611a3a565b61053c565b6119ae84848460016118b2565b8086048211156119c0576119c0611a3a565b02949350505050565b60008160001904831182151516156119e3576119e3611a3a565b500290565b6000828210156119fa576119fa611a3a565b500390565b600281046001821680611a1357607f821691505b60208210811415611a3457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220a757fe19ed435b3194d703d445bc994f59b3c653d4a622e2284d3f18936a90e664736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c806339509351116100cd578063bc197c8111610081578063de0e9a3e11610066578063de0e9a3e146102c0578063ea598cb0146102d3578063f23a6e61146102e65761016c565b8063bc197c811461028d578063dd62ed3e146102ad5761016c565b806395d89b41116100b257806395d89b411461025f578063a457c2d714610267578063a9059cbb1461027a5761016c565b8063395093511461023957806370a082311461024c5761016c565b806310fe9ae81161012457806323b872dd1161010957806323b872dd146101fc578063313ce5671461020f57806332816be1146102245761016c565b806310fe9ae8146101df57806318160ddd146101f45761016c565b806306fdde031161015557806306fdde03146101af5780630902f1ac146101c4578063095ea7b3146101cc5761016c565b8063010a38f51461017157806301ffc9a71461018f575b600080fd5b6101796102f9565b6040516101869190611839565b60405180910390f35b6101a261019d3660046111d8565b6102ff565b6040516101869190611356565b6101b761035d565b604051610186919061138e565b6101796103ef565b6101a26101da3660046111af565b610476565b6101e7610493565b60405161018691906112f1565b6101796104a2565b6101a261020a366004611111565b6104a8565b610217610543565b6040516101869190611842565b610237610232366004611218565b61054c565b005b6101a26102473660046111af565b61057e565b61017961025a36600461101f565b6105d2565b6101b76105ed565b6101a26102753660046111af565b6105fc565b6101a26102883660046111af565b610675565b6102a061029b36600461106b565b610689565b6040516101869190611361565b6101796102bb366004611039565b6106b3565b6102376102ce3660046112c1565b6106de565b6102376102e13660046112c1565b6106ea565b6102a06102f436600461114c565b610945565b60095490565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000148061035557506103558261096f565b90505b919050565b60606003805461036c906119ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610398906119ff565b80156103e55780601f106103ba576101008083540402835291602001916103e5565b820191906000526020600020905b8154815290600101906020018083116103c857829003601f168201915b5050505050905090565b600654600954604051627eeac760e11b81526000926001600160a01b03169162fdd58e9161042191309160040161133d565b60206040518083038186803b15801561043957600080fd5b505afa15801561044d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047191906112d9565b905090565b600061048a6104836109b9565b84846109bd565b50600192915050565b6006546001600160a01b031690565b60025490565b60006104b5848484610a71565b6001600160a01b0384166000908152600160205260408120816104d66109b9565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156105225760405162461bcd60e51b8152600401610519906115fa565b60405180910390fd5b6105368561052e6109b9565b8584036109bd565b60019150505b9392505050565b60055460ff1690565b5050600780547fffffffffffffffffffffffff0000000000000000000000000000000000000000163017905550505050565b600061048a61058b6109b9565b8484600160006105996109b9565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546105cd919061187a565b6109bd565b6001600160a01b031660009081526020819052604090205490565b60606004805461036c906119ff565b6000806001600061060b6109b9565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156106575760405162461bcd60e51b8152600401610519906117a5565b61066b6106626109b9565b858584036109bd565b5060019392505050565b600061048a6106826109b9565b8484610a71565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6106e781610b9b565b50565b806107075760405162461bcd60e51b8152600401610519906115c3565b600654600954604051627eeac760e11b815283926001600160a01b03169162fdd58e9161073891339160040161133d565b60206040518083038186803b15801561075057600080fd5b505afa158015610764573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078891906112d9565b10156107a65760405162461bcd60e51b8152600401610519906114f8565b60006107b0610543565b6107bb90600a6118f8565b600b546107c891906119c9565b6107d290836119c9565b600f546040517feee1ad800000000000000000000000000000000000000000000000000000000081529192506000916001600160a01b039091169063eee1ad80906108219030906004016112f1565b60206040518083038186803b15801561083957600080fd5b505afa15801561084d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087191906112d9565b905060008161088157600061088b565b61088b8284611892565b9050600061089982856119e8565b6006546009546040517ff242432a0000000000000000000000000000000000000000000000000000000081529293506001600160a01b039091169163f242432a916108ec91339130918b90600401611305565b600060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b505050506109283382610d59565b600f5461093e906001600160a01b031683610d59565b5050505050565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b3390565b6001600160a01b0383166109e35760405162461bcd60e51b815260040161051990611711565b6001600160a01b038216610a095760405162461bcd60e51b81526004016105199061149b565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610a64908590611839565b60405180910390a3505050565b6001600160a01b038316610a975760405162461bcd60e51b8152600401610519906116b4565b6001600160a01b038216610abd5760405162461bcd60e51b8152600401610519906113e1565b610ac8838383610e25565b6001600160a01b03831660009081526020819052604090205481811015610b015760405162461bcd60e51b81526004016105199061152f565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610b3890849061187a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b829190611839565b60405180910390a3610b95848484610e25565b50505050565b80610bb85760405162461bcd60e51b8152600401610519906115c3565b600654600954604051627eeac760e11b815283926001600160a01b03169162fdd58e91610be991309160040161133d565b60206040518083038186803b158015610c0157600080fd5b505afa158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3991906112d9565b1015610c575760405162461bcd60e51b81526004016105199061176e565b610c5f610543565b610c6a90600a6118f8565b600b54610c7791906119c9565b610c8190826119c9565b610c8a336105d2565b1015610ca85760405162461bcd60e51b81526004016105199061158c565b610cdb33610cb4610543565b610cbf90600a6118f8565b600b54610ccc91906119c9565b610cd690846119c9565b610e2a565b6006546009546040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163f242432a91610d2b91309133918790600401611305565b600060405180830381600087803b158015610d4557600080fd5b505af115801561093e573d6000803e3d6000fd5b6001600160a01b038216610d7f5760405162461bcd60e51b815260040161051990611802565b610d8b60008383610e25565b8060026000828254610d9d919061187a565b90915550506001600160a01b03821660009081526020819052604081208054839290610dca90849061187a565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e0d908590611839565b60405180910390a3610e2160008383610e25565b5050565b505050565b6001600160a01b038216610e505760405162461bcd60e51b815260040161051990611657565b610e5c82600083610e25565b6001600160a01b03821660009081526020819052604090205481811015610e955760405162461bcd60e51b81526004016105199061143e565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610ec49084906119e8565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610f07908690611839565b60405180910390a3610e2583600084610e25565b80356001600160a01b038116811461035857600080fd5b600082601f830112610f42578081fd5b8135602067ffffffffffffffff821115610f5e57610f5e611a50565b808202610f6c828201611850565b838152828101908684018388018501891015610f86578687fd5b8693505b85841015610fa8578035835260019390930192918401918401610f8a565b50979650505050505050565b600082601f830112610fc4578081fd5b813567ffffffffffffffff811115610fde57610fde611a50565b610ff16020601f19601f84011601611850565b818152846020838601011115611005578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215611030578081fd5b61053c82610f1b565b6000806040838503121561104b578081fd5b61105483610f1b565b915061106260208401610f1b565b90509250929050565b600080600080600060a08688031215611082578081fd5b61108b86610f1b565b945061109960208701610f1b565b9350604086013567ffffffffffffffff808211156110b5578283fd5b6110c189838a01610f32565b945060608801359150808211156110d6578283fd5b6110e289838a01610f32565b935060808801359150808211156110f7578283fd5b5061110488828901610fb4565b9150509295509295909350565b600080600060608486031215611125578283fd5b61112e84610f1b565b925061113c60208501610f1b565b9150604084013590509250925092565b600080600080600060a08688031215611163578081fd5b61116c86610f1b565b945061117a60208701610f1b565b93506040860135925060608601359150608086013567ffffffffffffffff8111156111a3578182fd5b61110488828901610fb4565b600080604083850312156111c1578182fd5b6111ca83610f1b565b946020939093013593505050565b6000602082840312156111e9578081fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461053c578182fd5b60008060008060008060c08789031215611230578081fd5b863567ffffffffffffffff80821115611247578283fd5b6112538a838b01610fb4565b97506020890135915080821115611268578283fd5b5061127589828a01610fb4565b95505061128460408801610f1b565b935061129260608801610f1b565b9250608087013560ff811681146112a7578182fd5b91506112b560a08801610f1b565b90509295509295509295565b6000602082840312156112d2578081fd5b5035919050565b6000602082840312156112ea578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6000602080835283518082850152825b818110156113ba5785810183015185820160400152820161139e565b818111156113cb5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60408201527f6365000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f494e53554646494349454e545f455243313135355f42414c414e434500000000604082015260600190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527f616c616e63650000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f494e53554646494349454e545f45524332305f42414c414e4345000000000000604082015260600190565b6020808252600d908201527f5a45524f5f5155414e5449545900000000000000000000000000000000000000604082015260600190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160408201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f494e53554646494349454e545f52455345525645530000000000000000000000604082015260600190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760408201527f207a65726f000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561187257611872611a50565b604052919050565b6000821982111561188d5761188d611a3a565b500190565b6000826118ad57634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116118c457506118ef565b8187048211156118d6576118d6611a3a565b808616156118e357918102915b9490941c9380026118b5565b94509492505050565b600061053c60001960ff8516846000826119145750600161053c565b816119215750600061053c565b816001811461193757600281146119415761196e565b600191505061053c565b60ff84111561195257611952611a3a565b6001841b91508482111561196857611968611a3a565b5061053c565b5060208310610133831016604e8410600b84101617156119a1575081810a8381111561199c5761199c611a3a565b61053c565b6119ae84848460016118b2565b8086048211156119c0576119c0611a3a565b02949350505050565b60008160001904831182151516156119e3576119e3611a3a565b500290565b6000828210156119fa576119fa611a3a565b500390565b600281046001821680611a1357607f821691505b60208210811415611a3457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220a757fe19ed435b3194d703d445bc994f59b3c653d4a622e2284d3f18936a90e664736f6c63430008000033",
  "libraries": {
    "GovernanceLib": "0xaeb86F3860AD5B29aE141c56709835130ecbE0D9",
    "Strings": "0xAaCc702df0e464b2f2896aEe801241eEA6DBdba1",
    "AddressSet": "0x2521688f2bdf04bd785D477C05d5240634E63708",
    "UInt256Set": "0xE519B631E93BE6Df760b3872dE88344Dd969370a",
    "Create2": "0xe83DEBccfFF96a5113Bd485967a643D60C4487fd",
    "ProposalsLib": "0xd98B1717903B2Ff81b08F680372887a8c35174c2",
    "ComplexPoolLib": "0x9aCda89A5C672c5f74bf71C723D9fAad285167C2",
    "WrappedTokenLib": "0x9c2C592C7C6D3f7A58aD74ddCf31D0dE2f8807a5"
  },
  "devdoc": {
    "details": "wraps governance (token id 0)",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "details": "create contract"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getReserves()": {
        "details": "get reserves held in wrapper"
      },
      "getTokenAddress()": {
        "details": "get the token address this wrapper is bound to"
      },
      "getTokenId()": {
        "details": "get the token id this wrapper is bound to"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(string,string,address,address,uint8,address)": {
        "details": "initialize is a stub because this class is deployed by us with constructor params"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "unwrap(uint256)": {
        "details": "unwrap tokens - transfer erc1155 to contract, mintt erc20"
      },
      "wrap(uint256)": {
        "details": "wrap tokens - transfer erc1155 to contract, mintt erc20"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17851,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17857,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 17859,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 17861,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 17863,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 17865,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 18951,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "tokenData",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(WrappedTokenData)20766_storage"
      },
      {
        "astId": 19583,
        "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
        "label": "_feeManager",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_enum(TokenType)9033": {
        "encoding": "inplace",
        "label": "enum INFTGemMultiToken.TokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(WrappedTokenData)20766_storage": {
        "encoding": "inplace",
        "label": "struct WrappedTokenLib.WrappedTokenData",
        "members": [
          {
            "astId": 20742,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "erc1155token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20744,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "erc20token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 20746,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "tokenPool",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 20748,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "index",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 20751,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "tokenType",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(TokenType)9033"
          },
          {
            "astId": 20753,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "rate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 20755,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "wrappedBalance",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 20760,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "ids",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
          },
          {
            "astId": 20765,
            "contract": "src/tokens/NFTGemERC20Governance.sol:NFTGemWrappedERC20Governance",
            "label": "amounts",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}