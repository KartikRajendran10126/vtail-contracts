{
  "address": "0xC0819E9205104A69520F60a14F0EF36a615efb69",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBanned",
          "type": "bool"
        }
      ],
      "name": "AllowList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "FeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GovernanceTokenIssued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        }
      ],
      "name": "ProjectFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "diffStep",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxClaims",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "alllowedToken",
          "type": "address"
        }
      ],
      "name": "StakingPoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "feeDivisor",
          "type": "uint256"
        }
      ],
      "name": "createChangeFeeProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "descriptionUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "createFundProjectProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diffstep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxClaims",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "allowedToken",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalHash",
          "type": "uint256"
        }
      ],
      "name": "createProposalVoteTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diffstep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxClaims",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "allowedToken",
          "type": "address"
        }
      ],
      "name": "createSystemPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "newStatus",
          "type": "bool"
        }
      ],
      "name": "createUpdateAllowlistProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalHash",
          "type": "uint256"
        }
      ],
      "name": "destroyProposalVoteTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "propAddress",
          "type": "address"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_multitoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_proposalFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapHelper",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "issueInitialGovernanceTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setFeeTracker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setMultitoken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setProposalFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setSwapHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x810aa6080a093570c551a60f8f29b61c12128ce7ea4389386628440c13a01a73",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0xC0819E9205104A69520F60a14F0EF36a615efb69",
    "transactionIndex": 0,
    "gasUsed": "1622727",
    "logsBloom": "0x
    "blockHash": "0x0000510d000019af81604c62a2706572eb47fee73c4042a2cb079ead61c856f2",
    "transactionHash": "0x810aa6080a093570c551a60f8f29b61c12128ce7ea4389386628440c13a01a73",
    "logs": [],
    "blockNumber": 11798150,
    "cumulativeGasUsed": "1622727",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b06c540bf558ebe1763f6f5fe903171f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBanned\",\"type\":\"bool\"}],\"name\":\"AllowList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GovernanceTokenIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"ProjectFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"diffStep\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxClaims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"alllowedToken\",\"type\":\"address\"}],\"name\":\"StakingPoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeDivisor\",\"type\":\"uint256\"}],\"name\":\"createChangeFeeProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"descriptionUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"createFundProjectProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffstep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaims\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowedToken\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalHash\",\"type\":\"uint256\"}],\"name\":\"createProposalVoteTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffstep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaims\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowedToken\",\"type\":\"address\"}],\"name\":\"createSystemPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"createUpdateAllowlistProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalHash\",\"type\":\"uint256\"}],\"name\":\"destroyProposalVoteTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"propAddress\",\"type\":\"address\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multitoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proposalFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapHelper\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"issueInitialGovernanceTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setFeeTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setMultitoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setProposalFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setSwapHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"constructor\":{\"details\":\"contract controller\"},\"createChangeFeeProposal(address,string,address,address,uint256)\":{\"details\":\"create a proposal to change fees for a token / pool\"},\"createFundProjectProposal(address,string,address,string,uint256)\":{\"details\":\"create a proposal to create a project funding proposal\"},\"createPool(string,string,uint256,uint256,uint256,uint256,uint256,address)\":{\"details\":\"create a new pool - public, only callable by a controller of this contract\"},\"createProposalVoteTokens(uint256)\":{\"details\":\"create proposal vote tokens\"},\"createSystemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)\":{\"details\":\"create a new pool - public, only callable by a controller of this contract\"},\"createUpdateAllowlistProposal(address,string,address,address,bool)\":{\"details\":\"create a proposal to update the allowlist of a token/pool\"},\"destroyProposalVoteTokens(uint256)\":{\"details\":\"destroy proposal vote tokens\"},\"executeProposal(address)\":{\"details\":\"execute proposal\"},\"initialize(address,address,address,address,address)\":{\"details\":\"init this smart contract\"},\"initialized()\":{\"details\":\"is the contract initialized\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"issueInitialGovernanceTokens(address)\":{\"details\":\"issue initial governance tokens\"},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"},\"setFactory(address)\":{\"details\":\"set category category\"},\"setFeeTracker(address)\":{\"details\":\"set category category\"},\"setMultitoken(address)\":{\"details\":\"set category category\"},\"setProposalFactory(address)\":{\"details\":\"set category category\"},\"setSwapHelper(address)\":{\"details\":\"set category category\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/governance/NFTGemGovernor.sol\":\"NFTGemGovernor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller)\\n        external\\n        override\\n        onlyController\\n    {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address)\\n        external\\n        view\\n        override\\n        returns (bool allowed)\\n    {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Remove the sender address from the list of controllers\\n     */\\n    function relinquishControl() external override onlyController {\\n        delete _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0xa31f752b3b092c788ea06a6dced266db79c4407d69733d78bc15e519f39e1d3f\",\"license\":\"MIT\"},\"src/governance/ChangeFeeProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\ncontract ChangeFeeProposalData is IChangeFeeProposalData {\\n    address private token;\\n    address private pool;\\n    uint256 private feeDivisor;\\n\\n    constructor(\\n        address _token,\\n        address _pool,\\n        uint256 _feeDivisor\\n    ) {\\n        token = _token;\\n        pool = _pool;\\n        feeDivisor = _feeDivisor;\\n    }\\n\\n    function data()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        return (token, pool, feeDivisor);\\n    }\\n}\\n\",\"keccak256\":\"0xe29c622e25e51250eaaf4edf933e0dec8e4fdacd76f5a697bd7cb16a3e539489\",\"license\":\"MIT\"},\"src/governance/FundProjectProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\ncontract FundProjectProposalData is IFundProjectProposalData {\\n    address private receiver;\\n    string private descriptionUrl;\\n    uint256 private ethAmount;\\n\\n    constructor(\\n        address _receiver,\\n        string memory _descriptionUrl,\\n        uint256 _ethAmount\\n    ) {\\n        receiver = _receiver;\\n        descriptionUrl = _descriptionUrl;\\n        ethAmount = _ethAmount;\\n    }\\n\\n    function data()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            string memory,\\n            uint256\\n        )\\n    {\\n        return (receiver, descriptionUrl, ethAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x9f4a6b1a01bdbefb2b2fba5605380ad57a7151ef32dc75f9bfe5ab66be9cfe68\",\"license\":\"MIT\"},\"src/governance/GovernanceLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolFactory.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/IProposal.sol\\\";\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\nlibrary GovernanceLib {\\n    // calculates the CREATE2 address for the quantized erc20 without making any external calls\\n    function addressOfProposal(\\n        address factory,\\n        address submitter,\\n        string memory title\\n    ) public pure returns (address govAddress) {\\n        govAddress = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(submitter, title)),\\n                            hex\\\"74f827a6bb3b7ed4cd86bd3c09b189a9496bc40d83635649e1e4df1c4e836ebf\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev create vote tokens to vote on given proposal\\n     */\\n    function createProposalVoteTokens(address multitoken, uint256 proposalHash)\\n        external\\n    {\\n        for (\\n            uint256 i = 0;\\n            i < INFTGemMultiToken(multitoken).allTokenHoldersLength(0);\\n            i++\\n        ) {\\n            address holder = INFTGemMultiToken(multitoken).allTokenHolders(\\n                0,\\n                i\\n            );\\n            INFTGemMultiToken(multitoken).mint(\\n                holder,\\n                proposalHash,\\n                IERC1155(multitoken).balanceOf(holder, 0)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev destroy the vote tokens for the given proposal\\n     */\\n    function destroyProposalVoteTokens(address multitoken, uint256 proposalHash)\\n        external\\n    {\\n        for (\\n            uint256 i = 0;\\n            i < INFTGemMultiToken(multitoken).allTokenHoldersLength(0);\\n            i++\\n        ) {\\n            address holder = INFTGemMultiToken(multitoken).allTokenHolders(\\n                0,\\n                i\\n            );\\n            INFTGemMultiToken(multitoken).burn(\\n                holder,\\n                proposalHash,\\n                IERC1155(multitoken).balanceOf(holder, proposalHash)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev execute craete pool proposal\\n     */\\n    function execute(address factory, address proposalAddress)\\n        public\\n        returns (address newPool)\\n    {\\n        // get the data for the new pool from the proposal\\n        address proposalData = IProposal(proposalAddress).proposalData();\\n\\n        (\\n            string memory symbol,\\n            string memory name,\\n            uint256 ethPrice,\\n            uint256 minTime,\\n            uint256 maxTime,\\n            uint256 diffStep,\\n            uint256 maxClaims,\\n            address allowedToken\\n        ) = ICreatePoolProposalData(proposalData).data();\\n\\n        // create the new pool\\n        newPool = createPool(\\n            factory,\\n            symbol,\\n            name,\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffStep,\\n            maxClaims,\\n            allowedToken\\n        );\\n    }\\n\\n    /**\\n     * @dev create a new pool\\n     */\\n    function createPool(\\n        address factory,\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) public returns (address pool) {\\n        pool = INFTGemPoolFactory(factory).createNFTGemPool(\\n            symbol,\\n            name,\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxClaims,\\n            allowedToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x28f0cbc322eb3b056ac1e1751a015697b5d2b642e3ead48486dee6f29c500680\",\"license\":\"MIT\"},\"src/governance/NFTGemGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"../access/Controllable.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/IProposalFactory.sol\\\";\\nimport \\\"../interfaces/IProposal.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPool.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\nimport \\\"../governance/GovernanceLib.sol\\\";\\nimport \\\"../governance/ProposalsLib.sol\\\";\\n\\ncontract NFTGemGovernor is Controllable, INFTGemGovernor {\\n    address private multitoken;\\n    address private factory;\\n    address private feeTracker;\\n    address private proposalFactory;\\n    address private swapHelper;\\n\\n    bool private _initialized;\\n\\n    uint256 private constant GOVERNANCE = 0;\\n    uint256 private constant GOV_TOKEN_INITIAL = 500000;\\n\\n    bool private governanceIssued;\\n\\n    /**\\n     * @dev contract controller\\n     */\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /**\\n     * @dev init this smart contract\\n     */\\n    function initialize(\\n        address _multitoken,\\n        address _factory,\\n        address _feeTracker,\\n        address _proposalFactory,\\n        address _swapHelper\\n    ) external override onlyController {\\n        multitoken = _multitoken;\\n        factory = _factory;\\n        feeTracker = _feeTracker;\\n        proposalFactory = _proposalFactory;\\n        swapHelper = _swapHelper;\\n        _initialized = true;\\n    }\\n\\n    /**\\n     * @dev set category category\\n     */\\n    function setSwapHelper(address a) external onlyController {\\n        swapHelper = a;\\n    }\\n\\n    /**\\n     * @dev set category category\\n     */\\n    function setFactory(address a) external onlyController {\\n        factory = a;\\n    }\\n\\n    /**\\n     * @dev set category category\\n     */\\n    function setProposalFactory(address a) external onlyController {\\n        proposalFactory = a;\\n    }\\n\\n    /**\\n     * @dev set category category\\n     */\\n    function setMultitoken(address a) external onlyController {\\n        multitoken = a;\\n    }\\n\\n    /**\\n     * @dev set category category\\n     */\\n    function setFeeTracker(address a) external onlyController {\\n        feeTracker = a;\\n    }\\n\\n    /**\\n     * @dev is the contract initialized\\n     */\\n    function initialized() external view override returns (bool) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev create proposal vote tokens\\n     */\\n    function createProposalVoteTokens(uint256 proposalHash)\\n        external\\n        override\\n        onlyController\\n    {\\n        GovernanceLib.createProposalVoteTokens(multitoken, proposalHash);\\n    }\\n\\n    /**\\n     * @dev destroy proposal vote tokens\\n     */\\n    function destroyProposalVoteTokens(uint256 proposalHash)\\n        external\\n        override\\n        onlyController\\n    {\\n        GovernanceLib.destroyProposalVoteTokens(multitoken, proposalHash);\\n    }\\n\\n    /**\\n     * @dev execute proposal\\n     */\\n    function executeProposal(address propAddress)\\n        external\\n        override\\n        onlyController\\n    {\\n        ProposalsLib.executeProposal(feeTracker, propAddress);\\n    }\\n\\n    /**\\n     * @dev issue initial governance tokens\\n     */\\n    function issueInitialGovernanceTokens(address receiver) external override {\\n        require(!governanceIssued, \\\"ALREADY_ISSUED\\\");\\n        INFTGemMultiToken(multitoken).mint(\\n            receiver,\\n            GOVERNANCE,\\n            GOV_TOKEN_INITIAL\\n        );\\n        governanceIssued = true;\\n        emit GovernanceTokenIssued(receiver, GOV_TOKEN_INITIAL);\\n    }\\n\\n    /**\\n     * @dev create a new pool - public, only callable by a controller of this contract\\n     */\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external override onlyController returns (address pool) {\\n        pool = GovernanceLib.createPool(\\n            factory,\\n            symbol,\\n            name,\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxClaims,\\n            allowedToken\\n        );\\n        // associate the pool with its relations\\n        associatePool(msg.sender, msg.sender, pool);\\n    }\\n\\n    /**\\n     * @dev associate the pool with its relations\\n     */\\n    function associatePool(\\n        address creator,\\n        address funder,\\n        address pool\\n    ) internal {\\n        IControllable(multitoken).addController(pool);\\n        INFTGemMultiToken(multitoken).addProxyRegistry(pool);\\n        IControllable(this).addController(pool);\\n        INFTComplexGemPool(pool).setMultiToken(multitoken);\\n        INFTComplexGemPool(pool).setSwapHelper(swapHelper);\\n        INFTComplexGemPool(pool).setGovernor(address(this));\\n        INFTComplexGemPool(pool).setFeeTracker(feeTracker);\\n        INFTComplexGemPool(pool).mintGenesisGems(creator, funder);\\n    }\\n\\n    /**\\n     * @dev create a new pool - public, only callable by a controller of this contract\\n     */\\n    function createPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external override onlyController returns (address pool) {\\n        pool = GovernanceLib.createPool(\\n            factory,\\n            symbol,\\n            name,\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxClaims,\\n            allowedToken\\n        );\\n        // associate the pool with its relations\\n        associatePool(\\n            IProposal(pool).creator(),\\n            IProposal(pool).funder(),\\n            pool\\n        );\\n    }\\n\\n    /**\\n     * @dev create a proposal to change fees for a token / pool\\n     */\\n    function createChangeFeeProposal(\\n        address submitter,\\n        string memory title,\\n        address token,\\n        address pool,\\n        uint256 feeDivisor\\n    ) external override returns (address proposal) {\\n        proposal = ProposalsLib.createChangeFeeProposal(\\n            token,\\n            pool,\\n            feeDivisor\\n        );\\n        ProposalsLib.associateProposal(\\n            address(this),\\n            multitoken,\\n            proposalFactory,\\n            submitter,\\n            IProposal.ProposalType.CHANGE_FEE,\\n            title,\\n            proposal\\n        );\\n    }\\n\\n    /**\\n     * @dev create a proposal to create a project funding proposal\\n     */\\n    function createFundProjectProposal(\\n        address submitter,\\n        string memory title,\\n        address receiver,\\n        string memory descriptionUrl,\\n        uint256 ethAmount\\n    ) external override returns (address proposal) {\\n        proposal = ProposalsLib.createFundProjectProposal(\\n            receiver,\\n            descriptionUrl,\\n            ethAmount\\n        );\\n        ProposalsLib.associateProposal(\\n            address(this),\\n            multitoken,\\n            proposalFactory,\\n            submitter,\\n            IProposal.ProposalType.FUND_PROJECT,\\n            title,\\n            proposal\\n        );\\n    }\\n\\n    /**\\n     * @dev create a proposal to update the allowlist of a token/pool\\n     */\\n    function createUpdateAllowlistProposal(\\n        address submitter,\\n        string memory title,\\n        address token,\\n        address pool,\\n        bool newStatus\\n    ) external override returns (address proposal) {\\n        proposal = ProposalsLib.createUpdateAllowlistProposal(\\n            token,\\n            pool,\\n            newStatus\\n        );\\n        ProposalsLib.associateProposal(\\n            address(this),\\n            multitoken,\\n            proposalFactory,\\n            submitter,\\n            IProposal.ProposalType.UPDATE_ALLOWLIST,\\n            title,\\n            proposal\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xaaa10422014be6d0bdb2f9945acb72e73a93bd411afceedb40c1ed615cbf348c\",\"license\":\"MIT\"},\"src/governance/ProposalsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nimport \\\"../interfaces/IProposalFactory.sol\\\";\\nimport \\\"../interfaces/IProposal.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPool.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPoolData.sol\\\";\\n\\nimport \\\"../governance/ChangeFeeProposalData.sol\\\";\\nimport \\\"../governance/FundProjectProposalData.sol\\\";\\nimport \\\"../governance/UpdateAllowlistProposalData.sol\\\";\\n\\nimport \\\"./GovernanceLib.sol\\\";\\n\\nlibrary ProposalsLib {\\n    event GovernanceTokenIssued(address indexed receiver, uint256 amount);\\n    event FeeUpdated(\\n        address indexed proposal,\\n        address indexed token,\\n        uint256 newFee\\n    );\\n    event AllowList(\\n        address indexed proposal,\\n        address indexed pool,\\n        address indexed token,\\n        bool isBanned\\n    );\\n    event ProjectFunded(\\n        address indexed proposal,\\n        address indexed receiver,\\n        uint256 received\\n    );\\n\\n    // create a proposal and associate it with passed-in proposal data\\n    function associateProposal(\\n        address governor,\\n        address multitoken,\\n        address proposalFactory,\\n        address submitter,\\n        IProposal.ProposalType propType,\\n        string memory title,\\n        address data\\n    ) internal returns (address p) {\\n        p = IProposalFactory(proposalFactory).createProposal(\\n            submitter,\\n            title,\\n            data,\\n            propType\\n        );\\n        IProposal(p).setMultiToken(multitoken);\\n        IProposal(p).setGovernor(governor);\\n        IControllable(multitoken).addController(p);\\n        IControllable(governor).addController(p);\\n    }\\n\\n    // create a fee change proposal\\n    function createChangeFeeProposal(\\n        address token,\\n        address pool,\\n        uint256 feeDivisor\\n    ) public returns (address) {\\n        return address(new ChangeFeeProposalData(token, pool, feeDivisor));\\n    }\\n\\n    // create a project funding proposal\\n    function createFundProjectProposal(\\n        address receiver,\\n        string memory descriptionUrl,\\n        uint256 ethAmount\\n    ) public returns (address) {\\n        return\\n            address(\\n                new FundProjectProposalData(receiver, descriptionUrl, ethAmount)\\n            );\\n    }\\n\\n    // create an allowlist modify proposal\\n    function createUpdateAllowlistProposal(\\n        address token,\\n        address pool,\\n        bool newStatus\\n    ) public returns (address) {\\n        return address(new UpdateAllowlistProposalData(token, pool, newStatus));\\n    }\\n\\n    /**\\n     * @dev execute this proposal if it is in the right state. Anyone can execute a proposal\\n     */\\n    function executeProposal(address feeTracker, address proposalAddress)\\n        external\\n    {\\n        require(proposalAddress != address(0), \\\"INVALID_PROPOSAL\\\");\\n        require(\\n            IProposal(proposalAddress).status() ==\\n                IProposal.ProposalStatus.PASSED,\\n            \\\"PROPOSAL_NOT_PASSED\\\"\\n        );\\n        address prop = IProposal(proposalAddress).proposalData();\\n        require(prop != address(0), \\\"INVALID_PROPOSAL_DATA\\\");\\n\\n        // fund a project\\n        if (\\n            IProposal(proposalAddress).proposalType() ==\\n            IProposal.ProposalType.FUND_PROJECT\\n        ) {\\n            (address receiver, , uint256 amount) = IFundProjectProposalData(\\n                prop\\n            ).data();\\n            INFTGemFeeManager(feeTracker).transferEth(\\n                payable(receiver),\\n                amount\\n            );\\n            emit ProjectFunded(\\n                address(proposalAddress),\\n                address(receiver),\\n                amount\\n            );\\n        }\\n        // change a fee\\n        else if (\\n            IProposal(proposalAddress).proposalType() ==\\n            IProposal.ProposalType.CHANGE_FEE\\n        ) {\\n            require(prop != address(0), \\\"INVALID_PROPOSAL_DATA\\\");\\n            address proposalData = IProposal(proposalAddress).proposalData();\\n            (\\n                address token,\\n                address pool,\\n                uint256 feeDiv\\n            ) = IChangeFeeProposalData(proposalData).data();\\n            require(feeDiv != 0, \\\"INVALID_FEE\\\");\\n            if (token != address(0))\\n                INFTGemFeeManager(feeTracker).setFeeDivisor(token, feeDiv);\\n            if (pool != address(0))\\n                INFTGemFeeManager(feeTracker).setFeeDivisor(pool, feeDiv);\\n            if (token == address(0) && pool == address(0)) {\\n                INFTGemFeeManager(feeTracker).setDefaultFeeDivisor(feeDiv);\\n            }\\n        }\\n        // modify the allowlist\\n        else if (\\n            IProposal(proposalAddress).proposalType() ==\\n            IProposal.ProposalType.UPDATE_ALLOWLIST\\n        ) {\\n            address proposalData = IProposal(proposalAddress).proposalData();\\n            (\\n                address token,\\n                address pool,\\n                bool isAllowed\\n            ) = IUpdateAllowlistProposalData(proposalData).data();\\n            require(token != address(0), \\\"INVALID_TOKEN\\\");\\n            if (isAllowed) {\\n                INFTComplexGemPoolData(pool).addAllowedToken(token);\\n                emit AllowList(proposalAddress, pool, token, isAllowed);\\n            } else {\\n                INFTComplexGemPoolData(pool).removeAllowedToken(token);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3626b9778b280fc657007c55bfd5b3f86c699392c37271ff8568c44eaea9463f\",\"license\":\"MIT\"},\"src/governance/UpdateAllowlistProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\ncontract UpdateAllowlistProposalData is IUpdateAllowlistProposalData {\\n    address private token;\\n    address private pool;\\n    bool private newStatus;\\n\\n    constructor(\\n        address _token,\\n        address _pool,\\n        bool _newStatus\\n    ) {\\n        token = _token;\\n        pool = _pool;\\n        newStatus = _newStatus;\\n    }\\n\\n    function data()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            bool\\n        )\\n    {\\n        return (token, pool, newStatus);\\n    }\\n}\\n\",\"keccak256\":\"0x4398e395e427b5c034452d01137b258b1fdea82178d3890ed8d48ca2795e5c09\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n    event ControllerRemoved(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2a44548d9ba1bcd73d5734b2265db6c1556c013ccc61df621a6cbd5cca42cfaf\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTComplexGemPool {\\n    enum RequirementType {\\n        ERC20,\\n        ERC1155,\\n        POOL\\n    }\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        uint256 amountPaid,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address indexed account,\\n        address indexed pool,\\n        uint256 indexed claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 gemHash,\\n        uint256 quantity\\n    );\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external;\\n\\n    function collectClaim(uint256 claimHash, bool requireMature) external;\\n\\n    function purchaseGems(uint256 count) external payable;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0x82c44e3e50944c227762a26043a1307be6c51ce8621153fe0a69b0633abe0a73\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./INFTGemMultiToken.sol\\\";\\nimport \\\"./INFTComplexGemPool.sol\\\";\\n\\ninterface INFTComplexGemPoolData {\\n    enum PriceIncrementType {\\n        COMPOUND,\\n        INVERSELOG,\\n        NONE\\n    }\\n\\n    /**\\n     * @dev Event generated when an NFT claim is imported from a legacy contract\\n     */\\n    event NFTGemImported(\\n        address indexed converter,\\n        address indexed pool,\\n        address oldPool,\\n        address oldToken,\\n        uint256 indexed gemHash,\\n        uint256 quantity\\n    );\\n\\n    function addInputRequirement(\\n        address theToken,\\n        address pool,\\n        INFTComplexGemPool.RequirementType inputType,\\n        uint256 theTokenId,\\n        uint256 minAmount,\\n        bool takeCustody,\\n        bool burn\\n    ) external;\\n\\n    function updateInputRequirement(\\n        uint256 ndx,\\n        address theToken,\\n        address pool,\\n        INFTComplexGemPool.RequirementType inputType,\\n        uint256 tid,\\n        uint256 minAmount,\\n        bool takeCustody,\\n        bool burn\\n    ) external;\\n\\n    function allInputRequirementsLength() external returns (uint256);\\n\\n    function allInputRequirements(uint256 ndx)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            INFTComplexGemPool.RequirementType,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool\\n        );\\n\\n    function settings()\\n        external\\n        view\\n        returns (\\n            string memory settingsSymbol,\\n            string memory settingsName,\\n            string memory settingsDescription,\\n            uint256 settingsCategory,\\n            uint256 settingsEthPrice,\\n            uint256 settingsMinTime,\\n            uint256 settingsMaxTime,\\n            uint256 settingsDiffStep,\\n            uint256 settingsMacClaims,\\n            uint256 settingsMaxQuantityPerClaim,\\n            uint256 settingsMaxClaimsPerAccount\\n        );\\n\\n    function stats()\\n        external\\n        view\\n        returns (\\n            bool statsVisible,\\n            uint256 statsClaimedCount,\\n            uint256 statsMintedCount,\\n            uint256 statsTotalStakedEth,\\n            uint256 statsNextClaimHash,\\n            uint256 statsNextGemHash,\\n            uint256 statsNextClaimId,\\n            uint256 statsNextGemId\\n        );\\n\\n    function claim(uint256 claimHash)\\n        external\\n        view\\n        returns (\\n            uint256 claimClaimAmount,\\n            uint256 claimClaimQuantity,\\n            uint256 claimClaimUnlockTime,\\n            uint256 claimClaimTokenAmount,\\n            address claimStakedToken,\\n            uint256 claimNextClaimId\\n        );\\n\\n    function token(uint256 tokenHash)\\n        external\\n        view\\n        returns (\\n            INFTGemMultiToken.TokenType tokenTokenType,\\n            uint256 tokenTokenId,\\n            address tokenTokenSource\\n        );\\n\\n    function addAllowedTokenSource(address allowedToken) external;\\n\\n    function removeAllowedTokenSource(address allowedToken) external;\\n\\n    function allowedTokenSources() external view returns (address[] memory);\\n\\n    function importLegacyGem(\\n        address pool,\\n        address legacyToken,\\n        uint256 tokenHash,\\n        address recipient\\n    ) external;\\n\\n    function isLegacyGemImported(uint256 tokenhash)\\n        external\\n        view\\n        returns (bool);\\n\\n    function setNextIds(uint256 _nextClaimId, uint256 _nextGemId) external;\\n\\n    function tokenHashes() external view returns (uint256[] memory);\\n\\n    function setTokenHashes(uint256[] memory inTokenHashes) external;\\n\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n\\n    function ethPrice() external view returns (uint256);\\n\\n    function setVisible(bool isVisible) external;\\n\\n    function visible() external view returns (bool);\\n\\n    function setCategory(uint256 theCategory) external;\\n\\n    function category() external view returns (uint256);\\n\\n    function setDescription(string memory desc) external;\\n\\n    function description() external view returns (string memory);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n\\n    function claimQuantity(uint256 claimId) external view returns (uint256);\\n\\n    function maxQuantityPerClaim() external view returns (uint256);\\n\\n    function maxClaimsPerAccount() external view returns (uint256);\\n\\n    function setMaxQuantityPerClaim(uint256 claimId) external;\\n\\n    function setMaxClaimsPerAccount(uint256 claimId) external;\\n\\n    function mintedCount() external view returns (uint256);\\n\\n    function totalStakedEth() external view returns (uint256);\\n\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n\\n    function tokenType(uint256 tokenHash)\\n        external\\n        view\\n        returns (INFTGemMultiToken.TokenType);\\n\\n    function allTokenHashesLength() external view returns (uint256);\\n\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n\\n    function nextClaimHash() external view returns (uint256);\\n\\n    function nextGemHash() external view returns (uint256);\\n\\n    function nextGemId() external view returns (uint256);\\n\\n    function nextClaimId() external view returns (uint256);\\n\\n    function setValidateErc20(bool) external;\\n\\n    function validateErc20() external view returns (bool);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n\\n    function gemClaimHash(uint256 gemHash) external view returns (uint256);\\n\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n\\n    function allowedTokens(uint256 idx) external view returns (address);\\n\\n    function isTokenAllowed(address tkn) external view returns (bool);\\n\\n    function addAllowedToken(address tkn) external;\\n\\n    function removeAllowedToken(address tkn) external;\\n\\n    function allowPurchase() external view returns (bool);\\n\\n    function setAllowPurchase(bool allow) external;\\n\\n    function enabled() external view returns (bool);\\n\\n    function setEnabled(bool enable) external;\\n\\n    function priceIncrementType() external view returns (PriceIncrementType);\\n\\n    function setPriceIncrementType(PriceIncrementType incrementType) external;\\n}\\n\",\"keccak256\":\"0xdb7e97f054516df8991c1cdbbbe85cbe9a494d25d8ca2ac5ae3e48ea61d251b1\",\"license\":\"MIT\"},\"src/interfaces/INFTGemFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface INFTGemFeeManager {\\n    event DefaultFeeDivisorChanged(\\n        address indexed operator,\\n        uint256 oldValue,\\n        uint256 value\\n    );\\n    event FeeDivisorChanged(\\n        address indexed operator,\\n        address indexed token,\\n        uint256 oldValue,\\n        uint256 value\\n    );\\n    event ETHReceived(address indexed manager, address sender, uint256 value);\\n    event LiquidityChanged(\\n        address indexed manager,\\n        uint256 oldValue,\\n        uint256 value\\n    );\\n\\n    function liquidity(address token) external view returns (uint256);\\n\\n    function defaultLiquidity() external view returns (uint256);\\n\\n    function setDefaultLiquidity(uint256 _liquidityMult)\\n        external\\n        returns (uint256);\\n\\n    function feeDivisor(address token) external view returns (uint256);\\n\\n    function defaultFeeDivisor() external view returns (uint256);\\n\\n    function setFeeDivisor(address token, uint256 _feeDivisor)\\n        external\\n        returns (uint256);\\n\\n    function setDefaultFeeDivisor(uint256 _feeDivisor)\\n        external\\n        returns (uint256);\\n\\n    function ethBalanceOf() external view returns (uint256);\\n\\n    function balanceOf(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8ea1f501e09a68d5723eacd4a7d8baa87f6f35d8577449ab41347b4de14b3877\",\"license\":\"MIT\"},\"src/interfaces/INFTGemGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemGovernor {\\n    event GovernanceTokenIssued(address indexed receiver, uint256 amount);\\n    event FeeUpdated(\\n        address indexed proposal,\\n        address indexed token,\\n        uint256 newFee\\n    );\\n    event AllowList(\\n        address indexed proposal,\\n        address indexed token,\\n        bool isBanned\\n    );\\n    event ProjectFunded(\\n        address indexed proposal,\\n        address indexed receiver,\\n        uint256 received\\n    );\\n    event StakingPoolCreated(\\n        address indexed proposal,\\n        address indexed pool,\\n        string symbol,\\n        string name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffStep,\\n        uint256 maxClaims,\\n        address alllowedToken\\n    );\\n\\n    function initialize(\\n        address _multitoken,\\n        address _factory,\\n        address _feeTracker,\\n        address _proposalFactory,\\n        address _swapHelper\\n    ) external;\\n\\n    function initialized() external returns (bool);\\n\\n    function createProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function destroyProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function executeProposal(address propAddress) external;\\n\\n    function issueInitialGovernanceTokens(address receiver) external;\\n\\n    function createPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createChangeFeeProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (address);\\n\\n    function createFundProjectProposal(\\n        address,\\n        string memory,\\n        address,\\n        string memory,\\n        uint256\\n    ) external returns (address);\\n\\n    function createUpdateAllowlistProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        bool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x41ae78ffebe5292e371bb92acf89fbf9d0686dff6b6e10e027204894dc1f3fca\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    enum TokenType {\\n        GOVERNANCE,\\n        CLAIM,\\n        GEM\\n    }\\n\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to mint a claim or a gem\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function heldTokens(address holder)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function allHeldTokens(address holder, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allHeldTokensLength(address holder)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenHolders(uint256 _token)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        TokenType tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash)\\n        external\\n        view\\n        returns (TokenType, address);\\n}\\n\",\"keccak256\":\"0xb871feba8e614aab0f81f26db323a68649f8d1cf6641848984e821a7bc02e7a1\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPoolFactory {\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event NFTGemPoolCreated(\\n        address indexed gemPoolAddress,\\n        string gemSymbol,\\n        string gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    );\\n\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event CustomNFTGemPoolCreated(\\n        address indexed gemPoolAdress,\\n        string gemSymbol,\\n        string gemName\\n    );\\n\\n    function nftGemPools() external view returns (address[] memory);\\n\\n    function getNFTGemPool(uint256 _symbolHash) external view returns (address);\\n\\n    function allNFTGemPools(uint256 idx) external view returns (address);\\n\\n    function allNFTGemPoolsLength() external view returns (uint256);\\n\\n    function createCustomNFTGemPool(\\n        bytes memory bytecode,\\n        string memory gemSymbol,\\n        string memory gemName\\n    ) external returns (address payable);\\n\\n    function createNFTGemPool(\\n        string memory gemSymbol,\\n        string memory gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    ) external returns (address payable);\\n\\n    function addCustomNFTGemPool(\\n        address poolAddress,\\n        string memory gemSymbol,\\n        string memory gemName\\n    ) external returns (address payable);\\n}\\n\",\"keccak256\":\"0xdc9f85316fdb3217ad085e2a985fa51e352e6670a92d55ddaf9a18be84cc53df\",\"license\":\"MIT\"},\"src/interfaces/IProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface IProposal {\\n    enum ProposalType {\\n        CREATE_POOL,\\n        FUND_PROJECT,\\n        CHANGE_FEE,\\n        UPDATE_ALLOWLIST\\n    }\\n\\n    enum ProposalStatus {\\n        NOT_FUNDED,\\n        ACTIVE,\\n        PASSED,\\n        FAILED,\\n        EXECUTED,\\n        CLOSED\\n    }\\n\\n    event ProposalCreated(address creator, address pool, uint256 proposalHash);\\n\\n    event ProposalExecuted(uint256 proposalHash);\\n\\n    event ProposalClosed(uint256 proposalHash);\\n\\n    function creator() external view returns (address);\\n\\n    function title() external view returns (string memory);\\n\\n    function funder() external view returns (address);\\n\\n    function expiration() external view returns (uint256);\\n\\n    function status() external view returns (ProposalStatus);\\n\\n    function proposalData() external view returns (address);\\n\\n    function proposalType() external view returns (ProposalType);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address gov) external;\\n\\n    function fund() external payable;\\n\\n    function execute() external;\\n\\n    function close() external;\\n\\n    function initialize(\\n        address,\\n        string memory,\\n        address,\\n        ProposalType\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9702c6803a4f314e9d670b6507dfa622b5817c519150048629f2d46282446c6b\",\"license\":\"MIT\"},\"src/interfaces/IProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ICreatePoolProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            string memory,\\n            string memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address\\n        );\\n}\\n\\ninterface IChangeFeeProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n}\\n\\ninterface IFundProjectProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            string memory,\\n            uint256\\n        );\\n}\\n\\ninterface IUpdateAllowlistProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0xf0444712cc1c9c63bced1153ecf2ca257b384003b973f65811951b15b26e792d\",\"license\":\"MIT\"},\"src/interfaces/IProposalFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IProposal.sol\\\";\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface IProposalFactory {\\n    /**\\n     * @dev emitted when a new gem pool proposal has been added to the system\\n     */\\n    event ProposalCreated(\\n        address creator,\\n        uint256 proposalType,\\n        address proposal\\n    );\\n\\n    event ProposalFunded(\\n        uint256 indexed proposalHash,\\n        address indexed funder,\\n        uint256 expDate\\n    );\\n\\n    event ProposalExecuted(uint256 indexed proposalHash, address pool);\\n\\n    event ProposalClosed(uint256 indexed proposalHash, address pool);\\n\\n    function getProposal(uint256 _symbolHash) external view returns (address);\\n\\n    function allProposals(uint256 idx) external view returns (address);\\n\\n    function allProposalsLength() external view returns (uint256);\\n\\n    function createProposal(\\n        address submitter,\\n        string memory title,\\n        address proposalData,\\n        IProposal.ProposalType proposalType\\n    ) external returns (address payable);\\n}\\n\",\"keccak256\":\"0xa4549e8638f205daff2bfcd299222a0eb5623763a77a7a8127375572c050ee19\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b610043565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b611c25806100526000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063a67a03ab116100cd578063dac7f24d11610081578063e1c28bef11610066578063e1c28bef146102a0578063e4439785146102a8578063fb54cc40146102bb57610151565b8063dac7f24d1461027a578063e14319451461028d57610151565b8063afc93505116100b2578063afc9350514610241578063b429afeb14610254578063d73cd47f1461026757610151565b8063a67a03ab1461021b578063a7fc7a071461022e57610151565b80635bb47808116101245780636e3c7c7f116101095780636e3c7c7f146101e257806377fa7d98146101f55780639277a1851461020857610151565b80635bb47808146101bc5780636c7c402f146101cf57610151565b80631459457a14610156578063158ef93e1461016b5780631e4ad6a2146101895780632866519d1461019c575b600080fd5b610169610164366004611639565b6102ce565b005b6101736103b8565b6040516101809190611b00565b60405180910390f35b6101696101973660046118d8565b6103d9565b6101af6101aa366004611832565b6104a7565b604051610180919061193b565b6101696101ca3660046115fa565b6105b9565b6101696101dd3660046115fa565b610626565b6101af6101f0366004611727565b610693565b6101af610203366004611832565b61076a565b6101696102163660046115fa565b610950565b6101696102293660046115fa565b6109bd565b61016961023c3660046115fa565b610a58565b6101af61024f3660046117a2565b610aba565b6101736102623660046115fa565b610b8a565b6101696102753660046115fa565b610ba8565b6101696102883660046118d8565b610c15565b6101af61029b3660046116a9565b610cb0565b610169610d7d565b6101696102b63660046115fa565b610dd4565b6101696102c93660046115fa565b610f1c565b3360009081526020819052604090205460ff161515600114806102f057503033145b6103155760405162461bcd60e51b815260040161030c90611b42565b60405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039788161790915560028054821695871695909517909455600380548516938616939093179092556004805484169185169190911790556005805474010000000000000000000000000000000000000000931691909316177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16179055565b60055474010000000000000000000000000000000000000000900460ff1690565b3360009081526020819052604090205460ff161515600114806103fb57503033145b6104175760405162461bcd60e51b815260040161030c90611b42565b6001546040517f85efa54c00000000000000000000000000000000000000000000000000000000815273aeb86F3860AD5B29aE141c56709835130ecbE0D9916385efa54c91610474916001600160a01b0316908590600401611ac6565b60006040518083038186803b15801561048c57600080fd5b505af41580156104a0573d6000803e3d6000fd5b5050505050565b3360009081526020819052604081205460ff161515600114806104c957503033145b6104e55760405162461bcd60e51b815260040161030c90611b42565b6002546040517f1500cfba00000000000000000000000000000000000000000000000000000000815273aeb86F3860AD5B29aE141c56709835130ecbE0D991631500cfba91610550916001600160a01b0316908d908d908d908d908d908d908d908d90600401611a24565b60206040518083038186803b15801561056857600080fd5b505af415801561057c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a0919061161d565b90506105ad333383610f89565b98975050505050505050565b3360009081526020819052604090205460ff161515600114806105db57503033145b6105f75760405162461bcd60e51b815260040161030c90611b42565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081526020819052604090205460ff1615156001148061064857503033145b6106645760405162461bcd60e51b815260040161030c90611b42565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6040517ff87924d000000000000000000000000000000000000000000000000000000000815260009073d98B1717903B2Ff81b08F680372887a8c35174c29063f87924d0906106ea9087908790879060040161198d565b60206040518083038186803b15801561070257600080fd5b505af4158015610716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073a919061161d565b6001546004549192506107609130916001600160a01b0390811691168960028a87611321565b5095945050505050565b3360009081526020819052604081205460ff1615156001148061078c57503033145b6107a85760405162461bcd60e51b815260040161030c90611b42565b6002546040517f1500cfba00000000000000000000000000000000000000000000000000000000815273aeb86F3860AD5B29aE141c56709835130ecbE0D991631500cfba91610813916001600160a01b0316908d908d908d908d908d908d908d908d90600401611a24565b60206040518083038186803b15801561082b57600080fd5b505af415801561083f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610863919061161d565b90506105ad816001600160a01b03166302d05d3f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a157600080fd5b505afa1580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d9919061161d565b826001600160a01b031663041ae8806040518163ffffffff1660e01b815260040160206040518083038186803b15801561091257600080fd5b505afa158015610926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a919061161d565b83610f89565b3360009081526020819052604090205460ff1615156001148061097257503033145b61098e5760405162461bcd60e51b815260040161030c90611b42565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081526020819052604090205460ff161515600114806109df57503033145b6109fb5760405162461bcd60e51b815260040161030c90611b42565b6003546040517fdc7ceea400000000000000000000000000000000000000000000000000000000815273d98B1717903B2Ff81b08F680372887a8c35174c29163dc7ceea491610474916001600160a01b031690859060040161194f565b3360009081526020819052604090205460ff16151560011480610a7a57503033145b610a965760405162461bcd60e51b815260040161030c90611b42565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6040517fc9ceb95100000000000000000000000000000000000000000000000000000000815260009073d98B1717903B2Ff81b08F680372887a8c35174c29063c9ceb95190610b1190879087908790600401611a94565b60206040518083038186803b158015610b2957600080fd5b505af4158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b61919061161d565b600180546004549293506107609230926001600160a01b0392831692909116908a908a87611321565b6001600160a01b031660009081526020819052604090205460ff1690565b3360009081526020819052604090205460ff16151560011480610bca57503033145b610be65760405162461bcd60e51b815260040161030c90611b42565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081526020819052604090205460ff16151560011480610c3757503033145b610c535760405162461bcd60e51b815260040161030c90611b42565b6001546040517f8851debd00000000000000000000000000000000000000000000000000000000815273aeb86F3860AD5B29aE141c56709835130ecbE0D991638851debd91610474916001600160a01b0316908590600401611ac6565b6040517fd6c49d7600000000000000000000000000000000000000000000000000000000815260009073d98B1717903B2Ff81b08F680372887a8c35174c29063d6c49d7690610d0790879087908790600401611969565b60206040518083038186803b158015610d1f57600080fd5b505af4158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d57919061161d565b6001546004549192506107609130916001600160a01b0390811691168960038a87611321565b3360009081526020819052604090205460ff16151560011480610d9f57503033145b610dbb5760405162461bcd60e51b815260040161030c90611b42565b336000908152602081905260409020805460ff19169055565b6005547501000000000000000000000000000000000000000000900460ff1615610e105760405162461bcd60e51b815260040161030c90611b0b565b6001546040517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063156e29f690610e619084906000906207a12090600401611adf565b600060405180830381600087803b158015610e7b57600080fd5b505af1158015610e8f573d6000803e3d6000fd5b5050600580547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000017905550506040516001600160a01b038216907f1b9ddf8f7c45e0567932349c127951357a3f9b5a821eeeec6e44d771debbb49090610f11906207a12090611b9f565b60405180910390a250565b3360009081526020819052604090205460ff16151560011480610f3e57503033145b610f5a5760405162461bcd60e51b815260040161030c90611b42565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60015460405163a7fc7a0760e01b81526001600160a01b039091169063a7fc7a0790610fb990849060040161193b565b600060405180830381600087803b158015610fd357600080fd5b505af1158015610fe7573d6000803e3d6000fd5b50506001546040517fef72f2760000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063ef72f276915061103490849060040161193b565b600060405180830381600087803b15801561104e57600080fd5b505af1158015611062573d6000803e3d6000fd5b505060405163a7fc7a0760e01b815230925063a7fc7a07915061108990849060040161193b565b600060405180830381600087803b1580156110a357600080fd5b505af11580156110b7573d6000803e3d6000fd5b50506001546040517fd104f8f50000000000000000000000000000000000000000000000000000000081526001600160a01b03808616945063d104f8f5935061110492169060040161193b565b600060405180830381600087803b15801561111e57600080fd5b505af1158015611132573d6000803e3d6000fd5b50506005546040517fd73cd47f0000000000000000000000000000000000000000000000000000000081526001600160a01b03808616945063d73cd47f935061117f92169060040161193b565b600060405180830381600087803b15801561119957600080fd5b505af11580156111ad573d6000803e3d6000fd5b50506040517fc42cf5350000000000000000000000000000000000000000000000000000000081526001600160a01b038416925063c42cf53591506111f690309060040161193b565b600060405180830381600087803b15801561121057600080fd5b505af1158015611224573d6000803e3d6000fd5b50506003546040517f9277a1850000000000000000000000000000000000000000000000000000000081526001600160a01b038086169450639277a185935061127192169060040161193b565b600060405180830381600087803b15801561128b57600080fd5b505af115801561129f573d6000803e3d6000fd5b50506040517f2449ef510000000000000000000000000000000000000000000000000000000081526001600160a01b0384169250632449ef5191506112ea908690869060040161194f565b600060405180830381600087803b15801561130457600080fd5b505af1158015611318573d6000803e3d6000fd5b50505050505050565b6040517f4c3000760000000000000000000000000000000000000000000000000000000081526000906001600160a01b03871690634c3000769061136f908890879087908a906004016119b1565b602060405180830381600087803b15801561138957600080fd5b505af115801561139d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c1919061161d565b6040517fd104f8f50000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063d104f8f590611409908a9060040161193b565b600060405180830381600087803b15801561142357600080fd5b505af1158015611437573d6000803e3d6000fd5b50506040517fc42cf5350000000000000000000000000000000000000000000000000000000081526001600160a01b038416925063c42cf5359150611480908b9060040161193b565b600060405180830381600087803b15801561149a57600080fd5b505af11580156114ae573d6000803e3d6000fd5b505060405163a7fc7a0760e01b81526001600160a01b038a16925063a7fc7a0791506114de90849060040161193b565b600060405180830381600087803b1580156114f857600080fd5b505af115801561150c573d6000803e3d6000fd5b505060405163a7fc7a0760e01b81526001600160a01b038b16925063a7fc7a07915061153c90849060040161193b565b600060405180830381600087803b15801561155657600080fd5b505af115801561156a573d6000803e3d6000fd5b50505050979650505050505050565b600082601f830112611589578081fd5b813567ffffffffffffffff808211156115a4576115a4611ba8565b6040516020601f19601f85011682010181811083821117156115c8576115c8611ba8565b6040528281528483016020018610156115df578384fd5b82602086016020830137918201602001929092529392505050565b60006020828403121561160b578081fd5b813561161681611bd7565b9392505050565b60006020828403121561162e578081fd5b815161161681611bd7565b600080600080600060a08688031215611650578081fd5b853561165b81611bd7565b9450602086013561166b81611bd7565b9350604086013561167b81611bd7565b9250606086013561168b81611bd7565b9150608086013561169b81611bd7565b809150509295509295909350565b600080600080600060a086880312156116c0578081fd5b85356116cb81611bd7565b9450602086013567ffffffffffffffff8111156116e6578182fd5b6116f288828901611579565b945050604086013561170381611bd7565b9250606086013561171381611bd7565b91506080860135801515811461169b578182fd5b600080600080600060a0868803121561173e578081fd5b853561174981611bd7565b9450602086013567ffffffffffffffff811115611764578182fd5b61177088828901611579565b945050604086013561178181611bd7565b9250606086013561179181611bd7565b949793965091946080013592915050565b600080600080600060a086880312156117b9578081fd5b85356117c481611bd7565b9450602086013567ffffffffffffffff808211156117e0578283fd5b6117ec89838a01611579565b9550604088013591506117fe82611bd7565b90935060608701359080821115611813578283fd5b5061182088828901611579565b95989497509295608001359392505050565b600080600080600080600080610100898b03121561184e578283fd5b883567ffffffffffffffff80821115611865578485fd5b6118718c838d01611579565b995060208b0135915080821115611886578485fd5b506118938b828c01611579565b97505060408901359550606089013594506080890135935060a0890135925060c0890135915060e08901356118c781611bd7565b809150509295985092959890939650565b6000602082840312156118e9578081fd5b5035919050565b60008151808452815b81811015611915576020818501810151868301820152016118f9565b818111156119265782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001600160a01b038087168352608060208401526119d460808401876118f0565b9085166040840152905060048310611a15577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82606083015295945050505050565b60006101206001600160a01b03808d168452816020850152611a488285018d6118f0565b91508382036040850152611a5c828c6118f0565b606085019a909a526080840198909852505060a081019490945260c084019290925260e0830152909116610100909101529392505050565b60006001600160a01b038516825260606020830152611ab660608301856118f0565b9050826040830152949350505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b6020808252600e908201527f414c52454144595f495353554544000000000000000000000000000000000000604082015260600190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b0381168114611bec57600080fd5b5056fea26469706673582212205ad32dc44f0ba65f46b1f3ad1419ff3a90d552a8187cd8e6dc4b6dd9dbee7aa164736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c8063a67a03ab116100cd578063dac7f24d11610081578063e1c28bef11610066578063e1c28bef146102a0578063e4439785146102a8578063fb54cc40146102bb57610151565b8063dac7f24d1461027a578063e14319451461028d57610151565b8063afc93505116100b2578063afc9350514610241578063b429afeb14610254578063d73cd47f1461026757610151565b8063a67a03ab1461021b578063a7fc7a071461022e57610151565b80635bb47808116101245780636e3c7c7f116101095780636e3c7c7f146101e257806377fa7d98146101f55780639277a1851461020857610151565b80635bb47808146101bc5780636c7c402f146101cf57610151565b80631459457a14610156578063158ef93e1461016b5780631e4ad6a2146101895780632866519d1461019c575b600080fd5b610169610164366004611639565b6102ce565b005b6101736103b8565b6040516101809190611b00565b60405180910390f35b6101696101973660046118d8565b6103d9565b6101af6101aa366004611832565b6104a7565b604051610180919061193b565b6101696101ca3660046115fa565b6105b9565b6101696101dd3660046115fa565b610626565b6101af6101f0366004611727565b610693565b6101af610203366004611832565b61076a565b6101696102163660046115fa565b610950565b6101696102293660046115fa565b6109bd565b61016961023c3660046115fa565b610a58565b6101af61024f3660046117a2565b610aba565b6101736102623660046115fa565b610b8a565b6101696102753660046115fa565b610ba8565b6101696102883660046118d8565b610c15565b6101af61029b3660046116a9565b610cb0565b610169610d7d565b6101696102b63660046115fa565b610dd4565b6101696102c93660046115fa565b610f1c565b3360009081526020819052604090205460ff161515600114806102f057503033145b6103155760405162461bcd60e51b815260040161030c90611b42565b60405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039788161790915560028054821695871695909517909455600380548516938616939093179092556004805484169185169190911790556005805474010000000000000000000000000000000000000000931691909316177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16179055565b60055474010000000000000000000000000000000000000000900460ff1690565b3360009081526020819052604090205460ff161515600114806103fb57503033145b6104175760405162461bcd60e51b815260040161030c90611b42565b6001546040517f85efa54c00000000000000000000000000000000000000000000000000000000815273__$415eb1c69eabc622d82690315fa0e33bfb$__916385efa54c91610474916001600160a01b0316908590600401611ac6565b60006040518083038186803b15801561048c57600080fd5b505af41580156104a0573d6000803e3d6000fd5b5050505050565b3360009081526020819052604081205460ff161515600114806104c957503033145b6104e55760405162461bcd60e51b815260040161030c90611b42565b6002546040517f1500cfba00000000000000000000000000000000000000000000000000000000815273__$415eb1c69eabc622d82690315fa0e33bfb$__91631500cfba91610550916001600160a01b0316908d908d908d908d908d908d908d908d90600401611a24565b60206040518083038186803b15801561056857600080fd5b505af415801561057c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a0919061161d565b90506105ad333383610f89565b98975050505050505050565b3360009081526020819052604090205460ff161515600114806105db57503033145b6105f75760405162461bcd60e51b815260040161030c90611b42565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081526020819052604090205460ff1615156001148061064857503033145b6106645760405162461bcd60e51b815260040161030c90611b42565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6040517ff87924d000000000000000000000000000000000000000000000000000000000815260009073__$c2cf3eebb563d155e336d59c40be15cffe$__9063f87924d0906106ea9087908790879060040161198d565b60206040518083038186803b15801561070257600080fd5b505af4158015610716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073a919061161d565b6001546004549192506107609130916001600160a01b0390811691168960028a87611321565b5095945050505050565b3360009081526020819052604081205460ff1615156001148061078c57503033145b6107a85760405162461bcd60e51b815260040161030c90611b42565b6002546040517f1500cfba00000000000000000000000000000000000000000000000000000000815273__$415eb1c69eabc622d82690315fa0e33bfb$__91631500cfba91610813916001600160a01b0316908d908d908d908d908d908d908d908d90600401611a24565b60206040518083038186803b15801561082b57600080fd5b505af415801561083f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610863919061161d565b90506105ad816001600160a01b03166302d05d3f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a157600080fd5b505afa1580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d9919061161d565b826001600160a01b031663041ae8806040518163ffffffff1660e01b815260040160206040518083038186803b15801561091257600080fd5b505afa158015610926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a919061161d565b83610f89565b3360009081526020819052604090205460ff1615156001148061097257503033145b61098e5760405162461bcd60e51b815260040161030c90611b42565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081526020819052604090205460ff161515600114806109df57503033145b6109fb5760405162461bcd60e51b815260040161030c90611b42565b6003546040517fdc7ceea400000000000000000000000000000000000000000000000000000000815273__$c2cf3eebb563d155e336d59c40be15cffe$__9163dc7ceea491610474916001600160a01b031690859060040161194f565b3360009081526020819052604090205460ff16151560011480610a7a57503033145b610a965760405162461bcd60e51b815260040161030c90611b42565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6040517fc9ceb95100000000000000000000000000000000000000000000000000000000815260009073__$c2cf3eebb563d155e336d59c40be15cffe$__9063c9ceb95190610b1190879087908790600401611a94565b60206040518083038186803b158015610b2957600080fd5b505af4158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b61919061161d565b600180546004549293506107609230926001600160a01b0392831692909116908a908a87611321565b6001600160a01b031660009081526020819052604090205460ff1690565b3360009081526020819052604090205460ff16151560011480610bca57503033145b610be65760405162461bcd60e51b815260040161030c90611b42565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081526020819052604090205460ff16151560011480610c3757503033145b610c535760405162461bcd60e51b815260040161030c90611b42565b6001546040517f8851debd00000000000000000000000000000000000000000000000000000000815273__$415eb1c69eabc622d82690315fa0e33bfb$__91638851debd91610474916001600160a01b0316908590600401611ac6565b6040517fd6c49d7600000000000000000000000000000000000000000000000000000000815260009073__$c2cf3eebb563d155e336d59c40be15cffe$__9063d6c49d7690610d0790879087908790600401611969565b60206040518083038186803b158015610d1f57600080fd5b505af4158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d57919061161d565b6001546004549192506107609130916001600160a01b0390811691168960038a87611321565b3360009081526020819052604090205460ff16151560011480610d9f57503033145b610dbb5760405162461bcd60e51b815260040161030c90611b42565b336000908152602081905260409020805460ff19169055565b6005547501000000000000000000000000000000000000000000900460ff1615610e105760405162461bcd60e51b815260040161030c90611b0b565b6001546040517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063156e29f690610e619084906000906207a12090600401611adf565b600060405180830381600087803b158015610e7b57600080fd5b505af1158015610e8f573d6000803e3d6000fd5b5050600580547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000017905550506040516001600160a01b038216907f1b9ddf8f7c45e0567932349c127951357a3f9b5a821eeeec6e44d771debbb49090610f11906207a12090611b9f565b60405180910390a250565b3360009081526020819052604090205460ff16151560011480610f3e57503033145b610f5a5760405162461bcd60e51b815260040161030c90611b42565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60015460405163a7fc7a0760e01b81526001600160a01b039091169063a7fc7a0790610fb990849060040161193b565b600060405180830381600087803b158015610fd357600080fd5b505af1158015610fe7573d6000803e3d6000fd5b50506001546040517fef72f2760000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063ef72f276915061103490849060040161193b565b600060405180830381600087803b15801561104e57600080fd5b505af1158015611062573d6000803e3d6000fd5b505060405163a7fc7a0760e01b815230925063a7fc7a07915061108990849060040161193b565b600060405180830381600087803b1580156110a357600080fd5b505af11580156110b7573d6000803e3d6000fd5b50506001546040517fd104f8f50000000000000000000000000000000000000000000000000000000081526001600160a01b03808616945063d104f8f5935061110492169060040161193b565b600060405180830381600087803b15801561111e57600080fd5b505af1158015611132573d6000803e3d6000fd5b50506005546040517fd73cd47f0000000000000000000000000000000000000000000000000000000081526001600160a01b03808616945063d73cd47f935061117f92169060040161193b565b600060405180830381600087803b15801561119957600080fd5b505af11580156111ad573d6000803e3d6000fd5b50506040517fc42cf5350000000000000000000000000000000000000000000000000000000081526001600160a01b038416925063c42cf53591506111f690309060040161193b565b600060405180830381600087803b15801561121057600080fd5b505af1158015611224573d6000803e3d6000fd5b50506003546040517f9277a1850000000000000000000000000000000000000000000000000000000081526001600160a01b038086169450639277a185935061127192169060040161193b565b600060405180830381600087803b15801561128b57600080fd5b505af115801561129f573d6000803e3d6000fd5b50506040517f2449ef510000000000000000000000000000000000000000000000000000000081526001600160a01b0384169250632449ef5191506112ea908690869060040161194f565b600060405180830381600087803b15801561130457600080fd5b505af1158015611318573d6000803e3d6000fd5b50505050505050565b6040517f4c3000760000000000000000000000000000000000000000000000000000000081526000906001600160a01b03871690634c3000769061136f908890879087908a906004016119b1565b602060405180830381600087803b15801561138957600080fd5b505af115801561139d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c1919061161d565b6040517fd104f8f50000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063d104f8f590611409908a9060040161193b565b600060405180830381600087803b15801561142357600080fd5b505af1158015611437573d6000803e3d6000fd5b50506040517fc42cf5350000000000000000000000000000000000000000000000000000000081526001600160a01b038416925063c42cf5359150611480908b9060040161193b565b600060405180830381600087803b15801561149a57600080fd5b505af11580156114ae573d6000803e3d6000fd5b505060405163a7fc7a0760e01b81526001600160a01b038a16925063a7fc7a0791506114de90849060040161193b565b600060405180830381600087803b1580156114f857600080fd5b505af115801561150c573d6000803e3d6000fd5b505060405163a7fc7a0760e01b81526001600160a01b038b16925063a7fc7a07915061153c90849060040161193b565b600060405180830381600087803b15801561155657600080fd5b505af115801561156a573d6000803e3d6000fd5b50505050979650505050505050565b600082601f830112611589578081fd5b813567ffffffffffffffff808211156115a4576115a4611ba8565b6040516020601f19601f85011682010181811083821117156115c8576115c8611ba8565b6040528281528483016020018610156115df578384fd5b82602086016020830137918201602001929092529392505050565b60006020828403121561160b578081fd5b813561161681611bd7565b9392505050565b60006020828403121561162e578081fd5b815161161681611bd7565b600080600080600060a08688031215611650578081fd5b853561165b81611bd7565b9450602086013561166b81611bd7565b9350604086013561167b81611bd7565b9250606086013561168b81611bd7565b9150608086013561169b81611bd7565b809150509295509295909350565b600080600080600060a086880312156116c0578081fd5b85356116cb81611bd7565b9450602086013567ffffffffffffffff8111156116e6578182fd5b6116f288828901611579565b945050604086013561170381611bd7565b9250606086013561171381611bd7565b91506080860135801515811461169b578182fd5b600080600080600060a0868803121561173e578081fd5b853561174981611bd7565b9450602086013567ffffffffffffffff811115611764578182fd5b61177088828901611579565b945050604086013561178181611bd7565b9250606086013561179181611bd7565b949793965091946080013592915050565b600080600080600060a086880312156117b9578081fd5b85356117c481611bd7565b9450602086013567ffffffffffffffff808211156117e0578283fd5b6117ec89838a01611579565b9550604088013591506117fe82611bd7565b90935060608701359080821115611813578283fd5b5061182088828901611579565b95989497509295608001359392505050565b600080600080600080600080610100898b03121561184e578283fd5b883567ffffffffffffffff80821115611865578485fd5b6118718c838d01611579565b995060208b0135915080821115611886578485fd5b506118938b828c01611579565b97505060408901359550606089013594506080890135935060a0890135925060c0890135915060e08901356118c781611bd7565b809150509295985092959890939650565b6000602082840312156118e9578081fd5b5035919050565b60008151808452815b81811015611915576020818501810151868301820152016118f9565b818111156119265782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001600160a01b038087168352608060208401526119d460808401876118f0565b9085166040840152905060048310611a15577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82606083015295945050505050565b60006101206001600160a01b03808d168452816020850152611a488285018d6118f0565b91508382036040850152611a5c828c6118f0565b606085019a909a526080840198909852505060a081019490945260c084019290925260e0830152909116610100909101529392505050565b60006001600160a01b038516825260606020830152611ab660608301856118f0565b9050826040830152949350505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b6020808252600e908201527f414c52454144595f495353554544000000000000000000000000000000000000604082015260600190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b0381168114611bec57600080fd5b5056fea26469706673582212205ad32dc44f0ba65f46b1f3ad1419ff3a90d552a8187cd8e6dc4b6dd9dbee7aa164736f6c63430008000033",
  "libraries": {
    "GovernanceLib": "0xaeb86F3860AD5B29aE141c56709835130ecbE0D9",
    "Strings": "0xAaCc702df0e464b2f2896aEe801241eEA6DBdba1",
    "AddressSet": "0x2521688f2bdf04bd785D477C05d5240634E63708",
    "UInt256Set": "0xE519B631E93BE6Df760b3872dE88344Dd969370a",
    "Create2": "0xe83DEBccfFF96a5113Bd485967a643D60C4487fd",
    "ProposalsLib": "0xd98B1717903B2Ff81b08F680372887a8c35174c2",
    "ComplexPoolLib": "0x9aCda89A5C672c5f74bf71C723D9fAad285167C2",
    "WrappedTokenLib": "0x9c2C592C7C6D3f7A58aD74ddCf31D0dE2f8807a5"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "constructor": {
        "details": "contract controller"
      },
      "createChangeFeeProposal(address,string,address,address,uint256)": {
        "details": "create a proposal to change fees for a token / pool"
      },
      "createFundProjectProposal(address,string,address,string,uint256)": {
        "details": "create a proposal to create a project funding proposal"
      },
      "createPool(string,string,uint256,uint256,uint256,uint256,uint256,address)": {
        "details": "create a new pool - public, only callable by a controller of this contract"
      },
      "createProposalVoteTokens(uint256)": {
        "details": "create proposal vote tokens"
      },
      "createSystemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)": {
        "details": "create a new pool - public, only callable by a controller of this contract"
      },
      "createUpdateAllowlistProposal(address,string,address,address,bool)": {
        "details": "create a proposal to update the allowlist of a token/pool"
      },
      "destroyProposalVoteTokens(uint256)": {
        "details": "destroy proposal vote tokens"
      },
      "executeProposal(address)": {
        "details": "execute proposal"
      },
      "initialize(address,address,address,address,address)": {
        "details": "init this smart contract"
      },
      "initialized()": {
        "details": "is the contract initialized"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "issueInitialGovernanceTokens(address)": {
        "details": "issue initial governance tokens"
      },
      "relinquishControl()": {
        "details": "Remove the sender address from the list of controllers"
      },
      "setFactory(address)": {
        "details": "set category category"
      },
      "setFeeTracker(address)": {
        "details": "set category category"
      },
      "setMultitoken(address)": {
        "details": "set category category"
      },
      "setProposalFactory(address)": {
        "details": "set category category"
      },
      "setSwapHelper(address)": {
        "details": "set category category"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4752,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6368,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "multitoken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6370,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "factory",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6372,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "feeTracker",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6374,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "proposalFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6376,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "swapHelper",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 6378,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "_initialized",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 6386,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "governanceIssued",
        "offset": 21,
        "slot": "5",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}