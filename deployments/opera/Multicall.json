{
  "address": "0x0f5afaEBb95a79334a488e270dDbc28412320b9c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3b5adc06b80c08674a292e97ffb68b6a745c9637a32358e657616a0a1198bc8",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x0f5afaEBb95a79334a488e270dDbc28412320b9c",
    "transactionIndex": 2,
    "gasUsed": "53000",
    "logsBloom": "0x
    "blockHash": "0x00002fc100000893c85f1cecae0d232b4c22eab050b3e9f382d939de43144b91",
    "transactionHash": "0xd3b5adc06b80c08674a292e97ffb68b6a745c9637a32358e657616a0a1198bc8",
    "logs": [],
    "blockNumber": 7677995,
    "cumulativeGasUsed": "290022",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6049af2643a26e99a598ed7b8ab9887c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}}},\"title\":\"Multicall\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"}},\"notice\":\"Enables calling multiple methods in a single call to the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/multicall/Multicall.sol\":\"Multicall\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"src/interfaces/IMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\npragma experimental ABIEncoderV2;\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x60102fcb8b9179bb459351fc4de866d175fcebcd0d0820f5d4b67d75115267f0\",\"license\":\"GPL-2.0-or-later\"},\"src/multicall/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IMulticall.sol\\\";\\n\\n/// @title Multicall\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall is IMulticall {\\n    /// @inheritdoc IMulticall\\n    function multicall(bytes[] calldata data) external payable override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8322a524a81b356d2ad4980ee0630ad3447147530c0f07321828fc36b52bfb4e\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "libraries": {
    "GovernanceLib": "0x9eAc2A20bFB02a065b5B721109Ce51D4730B9e92",
    "Strings": "0xe98D76f55e5Dae2DE566CC8Aa1a36282742eabf7",
    "SafeMath": "0x753f0df0a61c5F8A0eB31c6Bf6e7363943Eb225B",
    "AddressSet": "0x11cd76b6825414D5fBEf29065d68C0595def8252",
    "UInt256Set": "0x22C3283f474049b7a70f3b44Cb764BAe32370804",
    "Create2": "0x117f8511d54E60dE2F1C63F0Ac1c7C05473cdAa4",
    "ProposalsLib": "0xD0537BDD326892B2036608b733588014DF9d9057",
    "ComplexPoolLib": "0x04569D7F31c6822D33E39926Ee1e81AF8494f8BF",
    "WrappedTokenLib": "0x9f086FAd518F2B4F6E7467Ac965f103c9E1635F7",
    "Unigem20Library": "0x4740B52E28eD1eC9CaEbf0e0664161F6EFecFA6A"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "multicall(bytes[])": {
        "details": "The `msg.value` should not be trusted for any method callable from multicall.",
        "params": {
          "data": "The encoded function data for each of the calls to make to this contract"
        },
        "returns": {
          "results": "The results from each of the calls passed in via data"
        }
      }
    },
    "title": "Multicall",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "multicall(bytes[])": {
        "notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
      }
    },
    "notice": "Enables calling multiple methods in a single call to the contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}