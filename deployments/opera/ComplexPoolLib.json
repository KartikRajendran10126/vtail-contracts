{
  "address": "0xc79FFA1E3b5e834F632aa37be723382bD74d67da",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        }
      ],
      "name": "ComplexNFTGemClaimCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAssessed",
          "type": "uint256"
        }
      ],
      "name": "ComplexNFTGemClaimRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gemHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "ComplexNFTGemCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conversionRate",
          "type": "uint256"
        }
      ],
      "name": "ComplexNFTGemERC20ClaimCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAssessed",
          "type": "uint256"
        }
      ],
      "name": "ComplexNFTGemERC20ClaimRedeemed",
      "type": "event"
    }
  ],
  "transactionHash": "0x56a1984bb7021124b729540495b14c0e69edf58639b1b22642911ea3db9ee55f",
  "receipt": {
    "to": null,
    "from": "0x80EBffD553601340B688f246FD20a57BAab17AaD",
    "contractAddress": "0xc79FFA1E3b5e834F632aa37be723382bD74d67da",
    "transactionIndex": 9,
    "gasUsed": "3563929",
    "logsBloom": "0x
    "blockHash": "0x00001b4200000108df7bef0569b10c886f05dfe32330e015d4fa951ad0084c85",
    "transactionHash": "0x56a1984bb7021124b729540495b14c0e69edf58639b1b22642911ea3db9ee55f",
    "logs": [],
    "blockNumber": 5157530,
    "cumulativeGasUsed": "4797136",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "74452c6cda3ea6bebd3f6973f1954c6f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"ComplexNFTGemClaimCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAssessed\",\"type\":\"uint256\"}],\"name\":\"ComplexNFTGemClaimRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gemHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"ComplexNFTGemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"name\":\"ComplexNFTGemERC20ClaimCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAssessed\",\"type\":\"uint256\"}],\"name\":\"ComplexNFTGemERC20ClaimRedeemed\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"ComplexNFTGemClaimCreated(address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Event generated when an NFT claim is created using ETH\"},\"ComplexNFTGemClaimRedeemed(address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Event generated when an NFT claim is redeemed\"},\"ComplexNFTGemCreated(address,address,uint256,uint256,uint256)\":{\"details\":\"Event generated when a gem is created\"},\"ComplexNFTGemERC20ClaimCreated(address,address,uint256,uint256,address,uint256,uint256)\":{\"details\":\"Event generated when an NFT claim is created using ERC20 tokens\"},\"ComplexNFTGemERC20ClaimRedeemed(address,address,uint256,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Event generated when an NFT claim is redeemed\"}},\"kind\":\"dev\",\"methods\":{\"addAllowedToken(ComplexPoolLib.ComplexPoolData storage,address)\":{\"details\":\"the public version of the above\"},\"addInputRequirement(ComplexPoolLib.ComplexPoolData storage,address,address,uint8,uint256,uint256,bool)\":{\"details\":\"add an input requirement for this token\"},\"addToken(ComplexPoolLib.ComplexPoolData storage,uint256,uint8)\":{\"details\":\"get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\"},\"allInputRequirements(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"input requirements at index\"},\"allInputRequirementsLength(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"number of input requirements\"},\"allTokenHashes(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\"},\"claimAmount(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"the claim amount for the given claim id\"},\"claimQuantity(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"the claim quantity (count of gems staked) for the given claim id\"},\"claimTokenAmount(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"claim token amount if paid using erc20\"},\"claimUnlockTime(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"the lock time for this claim. once past lock time a gema is minted\"},\"collectClaim(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)\"},\"createClaims(ComplexPoolLib.ComplexPoolData storage,uint256,uint256)\":{\"details\":\"attempt to create a claim using the given timeframe\"},\"createERC20Claims(ComplexPoolLib.ComplexPoolData storage,address,uint256,uint256)\":{\"details\":\"crate multiple gem claim using an erc20 token. this token must be tradeable in Uniswap or this call will fail\"},\"deposit(ComplexPoolLib.ComplexPoolData storage,address,uint256)\":{\"details\":\"deposit into pool\"},\"increaseDifficulty(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"increase the pool's difficulty by calculating the step increase portion and adding it to the eth price of the market\"},\"mintGenesisGems(ComplexPoolLib.ComplexPoolData storage,address,address)\":{\"details\":\"mint the genesis gems earned by the pools creator and funder\"},\"nextClaimHash(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"the hash of the next claim to be minted\"},\"nextClaimId(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"get the next claim id\"},\"nextGemHash(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"the hash of the next gem to be minted\"},\"nextGemId(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"get the next gem id\"},\"removeAllowedToken(ComplexPoolLib.ComplexPoolData storage,address)\":{\"details\":\"the public version of the above\"},\"stakedToken(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"the staked token if staking with erc20\"},\"updateInputRequirement(ComplexPoolLib.ComplexPoolData storage,uint256,address,address,uint8,uint256,uint256,bool)\":{\"details\":\"update input requirements\"},\"withdraw(ComplexPoolLib.ComplexPoolData storage,address,address,uint256)\":{\"details\":\"withdraw pool contents\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/pool/ComplexPoolLib.sol\":\"ComplexPoolLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"src/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6e86542ba9c42a9ad56d81283264fd072ad07d7789113fd3482fe748a22428d6\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xacc13c3e2db32f3fbd54b5fe811690085679d84ca9c8a9b81374d811b30758b0\",\"license\":\"MIT\"},\"src/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6be5c98231ba90ad43bcf7dad027c1a1e7787220565aa3bb24becace05825664\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./INFTGemPool.sol\\\";\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTComplexGemPool {\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event ComplexNFTGemClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event ComplexNFTGemERC20ClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event ComplexNFTGemClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 amountPaid,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event ComplexNFTGemERC20ClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event ComplexNFTGemCreated(address account, address pool, uint256 claimHash, uint256 gemHash, uint256 quantity);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function setVisible(bool visible) external;\\n\\n    function visible() external view returns (bool);\\n\\n    function setCategory(uint256 category) external;\\n\\n    function category() external view returns (uint256);\\n\\n    function setDescription(string memory description) external;\\n\\n    function description() external view returns (string memory);\\n\\n    function setValidateErc20(bool) external;\\n\\n    function validateErc20() external view returns (bool);\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external;\\n\\n    function collectClaim(uint256 claimHash) external;\\n\\n    function deposit(address erc20token, uint256 tokenAmount) external;\\n\\n    function withdraw(\\n        address erc20token,\\n        address destination,\\n        uint256 tokenAmount\\n    ) external;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0x35b48ffabe569cb21a2701ff58c1b5758f43b39fc134aef7b84d5e71f87e758d\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTComplexGemPoolData {\\n    function addInputRequirement(\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tokenId,\\n        uint256 minAmount,\\n        bool burn\\n    ) external;\\n\\n    function updateInputRequirement(\\n        uint256 ndx,\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tid,\\n        uint256 minAmount,\\n        bool burn\\n    ) external;\\n\\n    function allInputRequirementsLength() external returns (uint256);\\n\\n    function allInputRequirements(uint256 ndx)\\n        external\\n        returns (\\n            address,\\n            address,\\n            uint8,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function ethPrice() external view returns (uint256);\\n\\n    function minTime() external view returns (uint256);\\n\\n    function maxTime() external view returns (uint256);\\n\\n    function difficultyStep() external view returns (uint256);\\n\\n    function maxClaims() external view returns (uint256);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n\\n    function claimQuantity(uint256 claimId) external view returns (uint256);\\n\\n    function mintedCount() external view returns (uint256);\\n\\n    function totalStakedEth() external view returns (uint256);\\n\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n\\n    function tokenType(uint256 tokenHash) external view returns (uint8);\\n\\n    function allTokenHashesLength() external view returns (uint256);\\n\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n\\n    function nextClaimHash() external view returns (uint256);\\n\\n    function nextGemHash() external view returns (uint256);\\n\\n    function nextGemId() external view returns (uint256);\\n\\n    function nextClaimId() external view returns (uint256);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n\\n    function allowedTokens(uint256 idx) external view returns (address);\\n\\n    function isTokenAllowed(address token) external view returns (bool);\\n\\n    function addAllowedToken(address token) external;\\n\\n    function removeAllowedToken(address token) external;\\n}\\n\",\"keccak256\":\"0x57263a660d0d048f02c912bed74b25fa2e3a86c0390ecc7b65638f4f69a39849\",\"license\":\"MIT\"},\"src/interfaces/INFTGemFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTGemFeeManager {\\n\\n    event DefaultFeeDivisorChanged(address indexed operator, uint256 oldValue, uint256 value);\\n    event FeeDivisorChanged(address indexed operator, address indexed token, uint256 oldValue, uint256 value);\\n    event ETHReceived(address indexed manager, address sender, uint256 value);\\n    event LiquidityChanged(address indexed manager, uint256 oldValue, uint256 value);\\n\\n    function liquidity(address token) external view returns (uint256);\\n\\n    function defaultLiquidity() external view returns (uint256);\\n\\n    function setDefaultLiquidity(uint256 _liquidityMult) external returns (uint256);\\n\\n    function feeDivisor(address token) external view returns (uint256);\\n\\n    function defaultFeeDivisor() external view returns (uint256);\\n\\n    function setFeeDivisor(address token, uint256 _feeDivisor) external returns (uint256);\\n\\n    function setDefaultFeeDivisor(uint256 _feeDivisor) external returns (uint256);\\n\\n    function ethBalanceOf() external view returns (uint256);\\n\\n    function balanceOF(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0xc1beb3a7410a4a0f6f8c47a8901fe81207199ff243704e79e2be60d5ed1bd305\",\"license\":\"MIT\"},\"src/interfaces/INFTGemGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemGovernor {\\n    event GovernanceTokenIssued(address indexed receiver, uint256 amount);\\n    event FeeUpdated(address indexed proposal, address indexed token, uint256 newFee);\\n    event AllowList(address indexed proposal, address indexed token, bool isBanned);\\n    event ProjectFunded(address indexed proposal, address indexed receiver, uint256 received);\\n    event StakingPoolCreated(\\n        address indexed proposal,\\n        address indexed pool,\\n        string symbol,\\n        string name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffStep,\\n        uint256 maxClaims,\\n        address alllowedToken\\n    );\\n\\n    function initialize(\\n        address _multitoken,\\n        address _factory,\\n        address _feeTracker,\\n        address _proposalFactory,\\n        address _swapHelper\\n    ) external;\\n\\n    function createProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function destroyProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function executeProposal(address propAddress) external;\\n\\n    function issueInitialGovernanceTokens(address receiver) external returns (uint256);\\n\\n    function maybeIssueGovernanceToken(address receiver) external returns (uint256);\\n\\n    function issueFuelToken(address receiver, uint256 amount) external returns (uint256);\\n\\n    function createPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createNewPoolProposal(\\n        address,\\n        string memory,\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external returns (address);\\n\\n    function createChangeFeeProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (address);\\n\\n    function createFundProjectProposal(\\n        address,\\n        string memory,\\n        address,\\n        string memory,\\n        uint256\\n    ) external returns (address);\\n\\n    function createUpdateAllowlistProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        bool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x1b50c9b3cace4c06f4c147759a6a349402c66b6ab453198553b9159e81a64ce6\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function allHeldTokens(address holder, uint256 _idx) external view returns (uint256);\\n\\n    function allHeldTokensLength(address holder) external view returns (uint256);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx) external view returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token) external view returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token) external view returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        uint8 tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash) external view returns (uint8, address);\\n}\\n\",\"keccak256\":\"0x1aa862437617abb8d35cd4120347de5c623ef4e84523fd3d0b914196f8b24e92\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPool {\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 amountPaid,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(address account, address pool, uint256 claimHash, uint256 gemHash, uint256 quantity);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function setVisible(bool visible) external;\\n\\n    function visible() external view returns (bool);\\n\\n    function setCategory(uint256 category) external;\\n\\n    function category() external view returns (uint256);\\n\\n    function setValidateErc20(bool) external;\\n\\n    function validateErc20() external view returns (bool);\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external;\\n\\n    function collectClaim(uint256 claimHash) external;\\n\\n    function rescue(address erc20token, uint256 tokenAmount) external;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6c2ba95bb3c2eafbc9d7bf749cafc943f7d2476a89b5a03744f3fc53b64cde96\",\"license\":\"MIT\"},\"src/interfaces/ISwapQueryHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface ISwapQueryHelper {\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function factory() external view returns (address);\\n\\n    function COIN() external pure returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function hasPool(address token) external view returns (bool);\\n\\n    function getReserves(address pair) external view returns (uint256, uint256);\\n\\n    function getPathForCoinToToken(address token) external pure returns (address[] memory);\\n\\n    function setFactory(address f) external;\\n}\\n\",\"keccak256\":\"0x36e47f43dc3f309d516f238f4744143e1d2cb23e0206729103478534960e7693\",\"license\":\"MIT\"},\"src/libs/AddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @notice Key sets with enumeration and delete. Uses mappings for random\\n * and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced.\\n * @dev Sets are unordered. Delete operations reorder keys. All operations have a\\n * fixed gas cost at any scale, O(1).\\n * author: Rob Hitchens\\n */\\n\\nlibrary AddressSet {\\n    struct Set {\\n        mapping(address => uint256) keyPointers;\\n        address[] keyList;\\n    }\\n\\n    /**\\n     * @notice insert a key.\\n     * @dev duplicate keys are not permitted.\\n     * @param self storage pointer to a Set.\\n     * @param key value to insert.\\n     */\\n    function insert(Set storage self, address key) internal {\\n        require(!exists(self, key), \\\"AddressSet: key already exists in the set.\\\");\\n        self.keyList.push(key);\\n        self.keyPointers[key] = self.keyList.length - 1;\\n    }\\n\\n    /**\\n     * @notice remove a key.\\n     * @dev key to remove must exist.\\n     * @param self storage pointer to a Set.\\n     * @param key value to remove.\\n     */\\n    function remove(Set storage self, address key) internal {\\n        require(exists(self, key), \\\"AddressSet: key does not exist in the set.\\\");\\n        uint256 last = count(self) - 1;\\n        uint256 rowToReplace = self.keyPointers[key];\\n        if (rowToReplace != last) {\\n            address keyToMove = self.keyList[last];\\n            self.keyPointers[keyToMove] = rowToReplace;\\n            self.keyList[rowToReplace] = keyToMove;\\n            self.keyPointers[key] = 0;\\n            delete self.keyPointers[key];\\n            delete self.keyList[self.keyList.length - 1];\\n        } else {\\n            self.keyPointers[key] = 0;\\n            delete self.keyPointers[key];\\n            delete self.keyList;\\n        }\\n    }\\n\\n    /**\\n     * @notice count the keys.\\n     * @param self storage pointer to a Set.\\n     */\\n    function count(Set storage self) internal view returns (uint256) {\\n        return (self.keyList.length);\\n    }\\n\\n    /**\\n     * @notice check if a key is in the Set.\\n     * @param self storage pointer to a Set.\\n     * @param key value to check.\\n     * @return bool true: Set member, false: not a Set member.\\n     */\\n    function exists(Set storage self, address key) internal view returns (bool) {\\n        if (self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */\\n    function keyAtIndex(Set storage self, uint256 index) internal view returns (address) {\\n        return self.keyList[index];\\n    }\\n}\\n\",\"keccak256\":\"0xc2cf228fcaa5b9e053037a5fea5a05453007924833cc575186d48391b904e6cd\",\"license\":\"MIT\"},\"src/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x688b57d8a4d5b6221b74de43b603ac03191e89f278c361ea7ceb257268882c4b\",\"license\":\"MIT\"},\"src/pool/ComplexPoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPoolData.sol\\\";\\nimport \\\"../interfaces/ISwapQueryHelper.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPool.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\nimport \\\"../libs/AddressSet.sol\\\";\\nimport \\\"../libs/SafeMath.sol\\\";\\n\\nlibrary ComplexPoolLib {\\n    using SafeMath for uint256;\\n    using AddressSet for AddressSet.Set;\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event ComplexNFTGemClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event ComplexNFTGemERC20ClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event ComplexNFTGemClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 amountPaid,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event ComplexNFTGemERC20ClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    struct InputRequirement {\\n        address token;\\n        address pool;\\n        uint8 inputType; // 1 = erc20, 2 = erc1155, 3 = pool\\n        uint256 tokenId; // if erc20 slot 0 contains required amount\\n        uint256 minVal;\\n        bool burn;\\n    }\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event ComplexNFTGemCreated(address account, address pool, uint256 claimHash, uint256 gemHash, uint256 quantity);\\n\\n    struct ComplexPoolData {\\n        // governor and multitoken target\\n        address pool;\\n        address multitoken;\\n        address governor;\\n        address feeTracker;\\n        address swapHelper;\\n        uint256 category;\\n        bool visible;\\n        // it all starts with a symbol and a nams\\n        string symbol;\\n        string name;\\n        string description;\\n        // magic economy numbers\\n        uint256 ethPrice;\\n        uint256 minTime;\\n        uint256 maxTime;\\n        uint256 diffstep;\\n        uint256 maxClaims;\\n        uint256 maxQuantityPerClaim;\\n        bool validateerc20;\\n        mapping(uint256 => uint8) tokenTypes;\\n        mapping(uint256 => uint256) tokenIds;\\n        uint256[] tokenHashes;\\n        // next ids of things\\n        uint256 nextGemIdVal;\\n        uint256 nextClaimIdVal;\\n        uint256 totalStakedEth;\\n        // records claim timestamp / ETH value / ERC token and amount sent\\n        mapping(uint256 => uint256) claimLockTimestamps;\\n        mapping(uint256 => address) claimLockToken;\\n        mapping(uint256 => uint256) claimAmountPaid;\\n        mapping(uint256 => uint256) claimQuant;\\n        mapping(uint256 => uint256) claimTokenAmountPaid;\\n        // input NFTs storage\\n        mapping(uint256 => uint256[]) claimIds;\\n        mapping(uint256 => uint256[]) claimQuantities;\\n        mapping(address => bool) controllers;\\n        InputRequirement[] inputRequirements;\\n        AddressSet.Set allowedTokens;\\n    }\\n\\n    /**\\n     * @dev Transfer a quantity of input reqs from to\\n     */\\n    function transferInputReqsFrom(\\n        ComplexPoolData storage self,\\n        uint256 claimHash,\\n        address from,\\n        address to,\\n        uint256 quantity\\n    ) internal {\\n        address gemtoken;\\n        for (uint256 i = 0; i < self.inputRequirements.length; i++) {\\n            if (self.inputRequirements[i].inputType == 1) {\\n                IERC20 token = IERC20(self.inputRequirements[i].token);\\n                token.transferFrom(from, to, self.inputRequirements[i].minVal);\\n            } else if (self.inputRequirements[i].inputType == 2) {\\n                IERC1155 token = IERC1155(self.inputRequirements[i].token);\\n                token.safeTransferFrom(\\n                    from,\\n                    to,\\n                    self.inputRequirements[i].tokenId,\\n                    self.inputRequirements[i].minVal,\\n                    \\\"\\\"\\n                );\\n            } else if (self.inputRequirements[i].inputType == 3) {\\n                uint256 required = self.inputRequirements[i].minVal * quantity;\\n                uint256 hashCount = INFTGemMultiToken(self.inputRequirements[i].token).allHeldTokensLength(from);\\n                for (uint256 j = 0; j < hashCount; j++) {\\n                    uint256 hashAt = INFTGemMultiToken(self.inputRequirements[i].token).allHeldTokens(from, j);\\n                    if (INFTComplexGemPoolData(self.inputRequirements[i].pool).tokenType(hashAt) == 2) {\\n                        gemtoken = self.inputRequirements[i].token;\\n                        uint256 bal = IERC1155(self.inputRequirements[i].token).balanceOf(from, hashAt);\\n                        if (bal > required) {\\n                            bal = required;\\n                        }\\n                        if (bal == 0) {\\n                            continue;\\n                        }\\n                        self.claimIds[claimHash].push(hashAt);\\n                        self.claimQuantities[claimHash].push(bal);\\n                        required = required - bal;\\n                    }\\n                    if (required == 0) {\\n                        break;\\n                    }\\n                }\\n                require(required == 0, \\\"UNMET_REQUIREMENTS\\\");\\n            }\\n        }\\n\\n        if (self.claimIds[claimHash].length > 0 && gemtoken != address(0)) {\\n            IERC1155(gemtoken).safeBatchTransferFrom(\\n                from,\\n                to,\\n                self.claimIds[claimHash],\\n                self.claimQuantities[claimHash],\\n                \\\"\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev add an input requirement for this token\\n     */\\n    function addInputRequirement(\\n        ComplexPoolData storage self,\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tokenId,\\n        uint256 minAmount,\\n        bool burn\\n    ) public {\\n        require(token != address(0), \\\"INVALID_TOKEN\\\");\\n        require(inputType == 1 || inputType == 2 || inputType == 3, \\\"INVALID_TOKENTYPE\\\");\\n        require((inputType == 3 && pool != address(0)) || inputType != 3, \\\"INVALID_POOL\\\");\\n        require(\\n            (inputType == 1 && tokenId == 0) || inputType == 2 || (inputType == 3 && tokenId == 0),\\n            \\\"INVALID_TOKENID\\\"\\n        );\\n        require(minAmount != 0, \\\"ZERO_AMOUNT\\\");\\n        self.inputRequirements.push(InputRequirement(token, pool, inputType, tokenId, minAmount, burn));\\n    }\\n\\n    /**\\n     * @dev update input requirements\\n     */\\n    function updateInputRequirement(\\n        ComplexPoolData storage self,\\n        uint256 ndx,\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tid,\\n        uint256 minAmount,\\n        bool burn\\n    ) public {\\n        require(ndx < self.inputRequirements.length, \\\"OUT_OF_RANGE\\\");\\n        require(token != address(0), \\\"INVALID_TOKEN\\\");\\n        require(inputType == 1 || inputType == 2 || inputType == 3, \\\"INVALID_TOKENTYPE\\\");\\n        require((inputType == 3 && pool != address(0)) || inputType != 3, \\\"INVALID_POOL\\\");\\n        require((inputType == 1 && tid == 0) || inputType == 2 || (inputType == 3 && tid == 0), \\\"INVALID_TOKENID\\\");\\n        require(minAmount != 0, \\\"ZERO_AMOUNT\\\");\\n        self.inputRequirements[ndx] = InputRequirement(token, pool, inputType, tid, minAmount, burn);\\n    }\\n\\n    /**\\n     * @dev number of input requirements\\n     */\\n    function allInputRequirementsLength(ComplexPoolData storage self) public returns (uint256) {\\n        return self.inputRequirements.length;\\n    }\\n\\n    /**\\n     * @dev input requirements at index\\n     */\\n    function allInputRequirements(ComplexPoolData storage self, uint256 ndx)\\n        public\\n        returns (\\n            address,\\n            address,\\n            uint8,\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        require(ndx < self.inputRequirements.length, \\\"OUT_OF_RANGE\\\");\\n        InputRequirement memory req = self.inputRequirements[ndx];\\n        return (req.token, req.pool, req.inputType, req.tokenId, req.minVal, req.burn);\\n    }\\n\\n    /**\\n     * @dev attempt to create a claim using the given timeframe\\n     */\\n    function createClaims(\\n        ComplexPoolData storage self,\\n        uint256 timeframe,\\n        uint256 count\\n    ) public {\\n        // minimum timeframe\\n        require(timeframe >= self.minTime, \\\"TIMEFRAME_TOO_SHORT\\\");\\n        // no ETH\\n        require(msg.value != 0, \\\"ZERO_BALANCE\\\");\\n        // zero qty\\n        require(count != 0, \\\"ZERO_QUANTITY\\\");\\n        // maximum timeframe\\n        require((self.maxTime != 0 && timeframe <= self.maxTime) || self.maxTime == 0, \\\"TIMEFRAME_TOO_LONG\\\");\\n\\n        uint256 adjustedBalance = msg.value.div(count);\\n        // cost given this timeframe\\n\\n        uint256 cost = self.ethPrice.mul(self.minTime).div(timeframe);\\n        require(adjustedBalance >= cost, \\\"INSUFFICIENT_ETH\\\");\\n\\n        // get the nest claim hash, revert if no more claims\\n        uint256 claimHash = nextClaimHash(self);\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(self.multitoken).mint(msg.sender, claimHash, 1);\\n        INFTGemMultiToken(self.multitoken).setTokenData(claimHash, 1, address(this));\\n        addToken(self, claimHash, 1);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 claimUnlockTime = block.timestamp.add(timeframe);\\n        self.claimLockTimestamps[claimHash] = claimUnlockTime;\\n        self.claimAmountPaid[claimHash] = cost.mul(count);\\n        self.claimQuant[claimHash] = count;\\n\\n        // tranasfer NFT input requirements from user to pool\\n        transferInputReqsFrom(self, claimHash, msg.sender, address(self.pool), count);\\n\\n        // maybe mint a governance token for the claimant\\n        INFTGemGovernor(self.governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(self.governor).issueFuelToken(msg.sender, cost);\\n\\n        emit ComplexNFTGemClaimCreated(msg.sender, address(self.pool), claimHash, timeframe, count, cost);\\n\\n        // increase the staked eth balance\\n        self.totalStakedEth = self.totalStakedEth.add(cost.mul(count));\\n\\n        // return the extra to sender\\n        if (msg.value > cost.mul(count)) {\\n            (bool success, ) = payable(msg.sender).call{value: msg.value.sub(cost.mul(count))}(\\\"\\\");\\n            require(success, \\\"REFUND_FAILED\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev crate multiple gem claim using an erc20 token. this token must be tradeable in Uniswap or this call will fail\\n     */\\n    function createERC20Claims(\\n        ComplexPoolData storage self,\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) public {\\n        // must be a valid address\\n        require(erc20token != address(0), \\\"INVALID_ERC20_TOKEN\\\");\\n\\n        // token is allowed\\n        require(\\n            (self.allowedTokens.count() > 0 && self.allowedTokens.exists(erc20token)) ||\\n                self.allowedTokens.count() == 0,\\n            \\\"TOKEN_DISALLOWED\\\"\\n        );\\n\\n        // zero qty\\n        require(count != 0, \\\"ZERO_QUANTITY\\\");\\n\\n        // Uniswap pool must exist\\n        require(ISwapQueryHelper(self.swapHelper).hasPool(erc20token) == true, \\\"NO_UNISWAP_POOL\\\");\\n\\n        // must have an amount specified\\n        require(tokenAmount >= 0, \\\"NO_PAYMENT_INCLUDED\\\");\\n\\n        // get a quote in ETH for the given token.\\n        (uint256 ethereum, uint256 tokenReserve, uint256 ethReserve) =\\n            ISwapQueryHelper(self.swapHelper).coinQuote(erc20token, tokenAmount.div(count));\\n\\n        if (self.validateerc20 == true) {\\n            // make sure the convertible amount is has reserves > 100x the token\\n            require(ethReserve >= ethereum.mul(100).mul(count), \\\"INSUFFICIENT_ETH_LIQUIDITY\\\");\\n\\n            // make sure the convertible amount is has reserves > 100x the token\\n            require(tokenReserve >= tokenAmount.mul(100).mul(count), \\\"INSUFFICIENT_TOKEN_LIQUIDITY\\\");\\n        }\\n\\n        // make sure the convertible amount is less than max price\\n        require(ethereum <= self.ethPrice, \\\"OVERPAYMENT\\\");\\n\\n        // calculate the maturity time given the converted eth\\n        uint256 maturityTime = self.ethPrice.mul(self.minTime).div(ethereum);\\n\\n        // make sure the convertible amount is less than max price\\n        require(maturityTime >= self.minTime, \\\"INSUFFICIENT_TIME\\\");\\n\\n        // get the next claim hash, revert if no more claims\\n        uint256 claimHash = nextClaimHash(self);\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(self.multitoken).mint(msg.sender, claimHash, 1);\\n        INFTGemMultiToken(self.multitoken).setTokenData(claimHash, 1, address(this));\\n        addToken(self, claimHash, 1);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 claimUnlockTime = block.timestamp.add(maturityTime);\\n        self.claimLockTimestamps[claimHash] = claimUnlockTime;\\n        self.claimAmountPaid[claimHash] = ethereum;\\n        self.claimLockToken[claimHash] = erc20token;\\n        self.claimTokenAmountPaid[claimHash] = tokenAmount;\\n        self.claimQuant[claimHash] = count;\\n\\n        // tranasfer NFT input requirements from user to pool\\n        transferInputReqsFrom(self, claimHash, msg.sender, address(self.pool), count);\\n\\n        // increase staked eth amount\\n        self.totalStakedEth = self.totalStakedEth.add(ethereum);\\n\\n        // maybe mint a governance token for the claimant\\n        INFTGemGovernor(self.governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(self.governor).issueFuelToken(msg.sender, ethereum);\\n\\n        // emit a message indicating that an erc20 claim has been created\\n        emit ComplexNFTGemERC20ClaimCreated(\\n            msg.sender,\\n            address(self.pool),\\n            claimHash,\\n            maturityTime,\\n            erc20token,\\n            count,\\n            ethereum\\n        );\\n\\n        // transfer the caller's ERC20 tokens into the pool\\n        IERC20(erc20token).transferFrom(msg.sender, address(self.pool), tokenAmount);\\n    }\\n\\n    /**\\n     * @dev collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)\\n     */\\n    function collectClaim(ComplexPoolData storage self, uint256 claimHash) public {\\n        // validation checks - disallow if not owner (holds coin with claimHash)\\n        // or if the unlockTime amd unlockPaid data is in an invalid state\\n        require(IERC1155(self.multitoken).balanceOf(msg.sender, claimHash) == 1, \\\"NOT_CLAIM_OWNER\\\");\\n        uint256 unlockTime = self.claimLockTimestamps[claimHash];\\n        uint256 unlockPaid = self.claimAmountPaid[claimHash];\\n        require(unlockTime != 0 && unlockPaid > 0, \\\"INVALID_CLAIM\\\");\\n\\n        // grab the erc20 token info if there is any\\n        address tokenUsed = self.claimLockToken[claimHash];\\n        uint256 unlockTokenPaid = self.claimTokenAmountPaid[claimHash];\\n\\n        // check the maturity of the claim - only issue gem if mature\\n        bool isMature = unlockTime < block.timestamp;\\n\\n        //  burn claim and transfer money back to user\\n        INFTGemMultiToken(self.multitoken).burn(msg.sender, claimHash, 1);\\n\\n        // if they used erc20 tokens stake their claim, return their tokens\\n        if (tokenUsed != address(0)) {\\n            // calculate fee portion using fee tracker\\n            uint256 feePortion = 0;\\n            if (isMature == true) {\\n                uint256 poolDiv = INFTGemFeeManager(self.feeTracker).feeDivisor(address(self.pool));\\n                uint256 divisor = INFTGemFeeManager(self.feeTracker).feeDivisor(tokenUsed);\\n                uint256 feeNum = poolDiv != divisor ? divisor : poolDiv;\\n                feePortion = unlockTokenPaid.div(feeNum);\\n            }\\n            // assess a fee for minting the NFT. Fee is collectec in fee tracker\\n            IERC20(tokenUsed).transferFrom(address(self.pool), self.feeTracker, feePortion);\\n            // send the principal minus fees to the caller\\n            IERC20(tokenUsed).transferFrom(address(self.pool), msg.sender, unlockTokenPaid.sub(feePortion));\\n\\n            // emit an event that the claim was redeemed for ERC20\\n            emit ComplexNFTGemERC20ClaimRedeemed(\\n                msg.sender,\\n                address(self.pool),\\n                claimHash,\\n                tokenUsed,\\n                unlockPaid,\\n                unlockTokenPaid,\\n                self.claimQuant[claimHash],\\n                feePortion\\n            );\\n        } else {\\n            // calculate fee portion using fee tracker\\n            uint256 feePortion = 0;\\n            if (isMature == true) {\\n                uint256 divisor = INFTGemFeeManager(self.feeTracker).feeDivisor(address(0));\\n                feePortion = unlockPaid.div(divisor);\\n            }\\n            // transfer the ETH fee to fee tracker\\n            payable(self.feeTracker).transfer(feePortion);\\n            // transfer the ETH back to user\\n            payable(msg.sender).transfer(unlockPaid.sub(feePortion));\\n\\n            // emit an event that the claim was redeemed for ETH\\n            emit ComplexNFTGemClaimRedeemed(\\n                msg.sender,\\n                address(self.pool),\\n                claimHash,\\n                unlockPaid,\\n                self.claimQuant[claimHash],\\n                feePortion\\n            );\\n        }\\n\\n        // deduct the total staked ETH balance of the pool\\n        self.totalStakedEth = self.totalStakedEth.sub(unlockPaid);\\n\\n        // if all this is happening before the unlocktime then we exit\\n        // without minting a gem because the user is withdrawing early\\n        if (!isMature) {\\n            return;\\n        }\\n\\n        // get the next gem hash, increase the staking sifficulty\\n        // for the pool, and mint a gem token back to account\\n        uint256 nextHash = nextGemHash(self);\\n\\n        // mint the gem\\n        INFTGemMultiToken(self.multitoken).mint(msg.sender, nextHash, self.claimQuant[claimHash]);\\n        addToken(self, nextHash, 2);\\n\\n        // maybe mint a governance token\\n        INFTGemGovernor(self.governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(self.governor).issueFuelToken(msg.sender, unlockPaid);\\n\\n        // emit an event about a gem getting created\\n        emit ComplexNFTGemCreated(msg.sender, address(self.pool), claimHash, nextHash, self.claimQuant[claimHash]);\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function addToken(\\n        ComplexPoolData storage self,\\n        uint256 tokenHash,\\n        uint8 tt\\n    ) public {\\n        require(tt == 1 || tt == 2, \\\"INVALID_TOKENTYPE\\\");\\n        self.tokenHashes.push(tokenHash);\\n        self.tokenTypes[tokenHash] = tt;\\n        self.tokenIds[tokenHash] = tt == 1 ? nextClaimId(self) : nextGemId(self);\\n        INFTGemMultiToken(self.multitoken).setTokenData(tokenHash, tt, address(this));\\n        if (tt == 2) {\\n            increaseDifficulty(self);\\n        }\\n    }\\n\\n    /**\\n     * @dev get the next claim id\\n     */\\n    function nextClaimId(ComplexPoolData storage self) public returns (uint256) {\\n        uint256 ncId = self.nextClaimIdVal;\\n        self.nextClaimIdVal = self.nextClaimIdVal.add(1);\\n        return ncId;\\n    }\\n\\n    /**\\n     * @dev get the next gem id\\n     */\\n    function nextGemId(ComplexPoolData storage self) public returns (uint256) {\\n        uint256 ncId = self.nextGemIdVal;\\n        self.nextGemIdVal = self.nextGemIdVal.add(1);\\n        return ncId;\\n    }\\n\\n    /**\\n     * @dev increase the pool's difficulty by calculating the step increase portion and adding it to the eth price of the market\\n     */\\n    function increaseDifficulty(ComplexPoolData storage self) public {\\n        uint256 diffIncrease = self.ethPrice.div(self.diffstep);\\n        self.ethPrice = self.ethPrice.add(diffIncrease);\\n    }\\n\\n    /**\\n     * @dev the hash of the next gem to be minted\\n     */\\n    function nextGemHash(ComplexPoolData storage self) public view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(\\\"gem\\\", address(self.pool), self.nextGemIdVal)));\\n    }\\n\\n    /**\\n     * @dev the hash of the next claim to be minted\\n     */\\n    function nextClaimHash(ComplexPoolData storage self) public view returns (uint256) {\\n        return\\n            (self.maxClaims != 0 && self.nextClaimIdVal <= self.maxClaims) || self.maxClaims == 0\\n                ? uint256(keccak256(abi.encodePacked(\\\"claim\\\", address(self.pool), self.nextClaimIdVal)))\\n                : 0;\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function allTokenHashes(ComplexPoolData storage self, uint256 ndx) public view returns (uint256) {\\n        return self.tokenHashes[ndx];\\n    }\\n\\n    /**\\n     * @dev the claim amount for the given claim id\\n     */\\n    function claimAmount(ComplexPoolData storage self, uint256 claimHash) public view returns (uint256) {\\n        return self.claimAmountPaid[claimHash];\\n    }\\n\\n    /**\\n     * @dev the claim quantity (count of gems staked) for the given claim id\\n     */\\n    function claimQuantity(ComplexPoolData storage self, uint256 claimHash) public view returns (uint256) {\\n        return self.claimQuant[claimHash];\\n    }\\n\\n    /**\\n     * @dev the lock time for this claim. once past lock time a gema is minted\\n     */\\n    function claimUnlockTime(ComplexPoolData storage self, uint256 claimHash) public view returns (uint256) {\\n        return self.claimLockTimestamps[claimHash];\\n    }\\n\\n    /**\\n     * @dev claim token amount if paid using erc20\\n     */\\n    function claimTokenAmount(ComplexPoolData storage self, uint256 claimHash) public view returns (uint256) {\\n        return self.claimTokenAmountPaid[claimHash];\\n    }\\n\\n    /**\\n     * @dev the staked token if staking with erc20\\n     */\\n    function stakedToken(ComplexPoolData storage self, uint256 claimHash) public view returns (address) {\\n        return self.claimLockToken[claimHash];\\n    }\\n\\n    /**\\n     * @dev the public version of the above\\n     */\\n    function addAllowedToken(ComplexPoolData storage self, address token) public {\\n        if (!self.allowedTokens.exists(token)) {\\n            self.allowedTokens.insert(token);\\n        }\\n    }\\n\\n    /**\\n     * @dev the public version of the above\\n     */\\n    function removeAllowedToken(ComplexPoolData storage self, address token) public {\\n        if (self.allowedTokens.exists(token)) {\\n            self.allowedTokens.remove(token);\\n        }\\n    }\\n\\n    /**\\n     * @dev deposit into pool\\n     */\\n    function deposit(\\n        ComplexPoolData storage self,\\n        address erc20token,\\n        uint256 tokenAmount\\n    ) public {\\n        if (erc20token == address(0)) {\\n            require(msg.sender.balance >= tokenAmount);\\n            self.totalStakedEth = self.totalStakedEth.add(msg.sender.balance);\\n        } else {\\n            require(IERC20(erc20token).balanceOf(msg.sender) >= tokenAmount);\\n            IERC20(erc20token).transferFrom(msg.sender, address(self.pool), tokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev withdraw pool contents\\n     */\\n    function withdraw(\\n        ComplexPoolData storage self,\\n        address erc20token,\\n        address destination,\\n        uint256 tokenAmount\\n    ) public {\\n        require(destination != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(self.controllers[msg.sender] == true || msg.sender == self.governor, \\\"UNAUTHORIZED\\\");\\n        if (erc20token == address(0)) {\\n            payable(destination).transfer(tokenAmount);\\n        } else {\\n            IERC20(erc20token).transferFrom(address(self.pool), address(destination), tokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev mint the genesis gems earned by the pools creator and funder\\n     */\\n    function mintGenesisGems(\\n        ComplexPoolData storage self,\\n        address creator,\\n        address funder\\n    ) public {\\n        require(self.multitoken != address(0), \\\"NO_MULTITOKEN\\\");\\n        require(creator != address(0) && funder != address(0), \\\"ZERO_DESTINATION\\\");\\n        require(self.nextGemIdVal == 0, \\\"ALREADY_MINTED\\\");\\n\\n        uint256 gemHash = nextGemHash(self);\\n        INFTGemMultiToken(self.multitoken).mint(creator, gemHash, 1);\\n        addToken(self, gemHash, 2);\\n\\n        gemHash = nextGemHash(self);\\n        INFTGemMultiToken(self.multitoken).mint(creator, gemHash, 1);\\n        addToken(self, gemHash, 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa44dcdf7a6a1d2b8ade13e2ce2c46e2f6c3138dda7212d6a533c1a0145c0834b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x613fdc610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101a25760003560e01c80639630ccd8116100ed578063b9f0527411610096578063dc1f0f5311610070578063dc1f0f5314610655578063e5932f4214610678578063ecd5244e146106c1576101a2565b8063b9f052741461057b578063d28b9351146105bc578063d9495bce1461061c576101a2565b8063afeafd9a116100c7578063afeafd9a146104da578063b25bd5241461051f578063b94677da14610558576101a2565b80639630ccd81461041957806396b8b27f14610443578063a93ac11614610473576101a2565b80635aec67be1161014f57806380ca2ba61161012957806380ca2ba61461037a578063828c7b72146103b057806388d496a4146103da576101a2565b80635aec67be1461029e5780635b68e93c146102c857806376e455e11461033b576101a2565b806324ccf5cf1161018057806324ccf5cf1461022357806333c13e0d1461025e57806350ec70771461027b576101a2565b806301356b6d146101a7578063164cd8c2146101dc57806320b97bdb146101f9575b600080fd5b6101ca600480360360408110156101bd57600080fd5b50803590602001356106e4565b60408051918252519081900360200190f35b6101ca600480360360208110156101f257600080fd5b50356106fc565b81801561020557600080fd5b506101ca6004803603602081101561021c57600080fd5b50356107b8565b81801561022f57600080fd5b5061025c6004803603604081101561024657600080fd5b50803590602001356001600160a01b03166107d7565b005b6101ca6004803603602081101561027457600080fd5b50356107f9565b6101ca6004803603604081101561029157600080fd5b508035906020013561087c565b8180156102aa57600080fd5b5061025c600480360360208110156102c157600080fd5b50356108a0565b8180156102d457600080fd5b506102f8600480360360408110156102eb57600080fd5b50803590602001356108db565b604080516001600160a01b03978816815295909616602086015260ff9093168486015260608401919091526080830152151560a082015290519081900360c00190f35b61035e6004803603604081101561035157600080fd5b50803590602001356109f5565b604080516001600160a01b039092168252519081900360200190f35b81801561038657600080fd5b5061025c6004803603606081101561039d57600080fd5b5080359060208101359060400135610a14565b8180156103bc57600080fd5b506101ca600480360360208110156103d357600080fd5b5035611073565b8180156103e657600080fd5b5061025c600480360360608110156103fd57600080fd5b508035906001600160a01b03602082013516906040013561107a565b81801561042557600080fd5b506101ca6004803603602081101561043c57600080fd5b50356111db565b81801561044f57600080fd5b5061025c6004803603604081101561046657600080fd5b50803590602001356111fa565b81801561047f57600080fd5b5061025c600480360361010081101561049757600080fd5b508035906020810135906001600160a01b03604082013581169160608101359091169060ff6080820135169060a08101359060c08101359060e001351515611b71565b8180156104e657600080fd5b5061025c600480360360808110156104fd57600080fd5b508035906001600160a01b036020820135169060408101359060600135611f3a565b81801561052b57600080fd5b5061025c6004803603606081101561054257600080fd5b508035906020810135906040013560ff16612861565b6101ca6004803603604081101561056e57600080fd5b50803590602001356129f0565b81801561058757600080fd5b5061025c6004803603606081101561059e57600080fd5b508035906001600160a01b0360208201358116916040013516612a06565b8180156105c857600080fd5b5061025c600480360360e08110156105df57600080fd5b508035906001600160a01b03602082013581169160408101359091169060ff6060820135169060808101359060a08101359060c001351515612c85565b81801561062857600080fd5b5061025c6004803603604081101561063f57600080fd5b50803590602001356001600160a01b0316612fd4565b6101ca6004803603604081101561066b57600080fd5b5080359060200135612ff3565b81801561068457600080fd5b5061025c6004803603608081101561069b57600080fd5b508035906001600160a01b03602082013581169160408101359091169060600135613009565b6101ca600480360360408110156106d757600080fd5b50803590602001356131d8565b60008181526019830160205260409020545b92915050565b600081600e015460001415801561071b575081600e0154826015015411155b806107285750600e820154155b6107335760006106f6565b81546015830154604080517f636c61696d00000000000000000000000000000000000000000000000000000060208083019190915260609490941b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166025820152603980820193909352815180820390930183526059019052805191012092915050565b60148101546000906107cb8160016131ee565b60148401559050919050565b6107e4602083018261324f565b6107f5576107f560208301826132aa565b5050565b8054601490910154604080517f67656d000000000000000000000000000000000000000000000000000000000060208083019190915260609490941b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166023820152603780820193909352815180820390930183526057019052805191012090565b600082601301828154811061088d57fe5b9060005260206000200154905092915050565b60006108bd82600d015483600a015461337390919063ffffffff16565b600a8301549091506108cf90826131ee565b82600a01819055505050565b60008060008060008087601f0180549050871061093f576040805162461bcd60e51b815260206004820152600c60248201527f4f55545f4f465f52414e47450000000000000000000000000000000000000000604482015290519081900360640190fd5b610947613ec2565b88601f01888154811061095657fe5b60009182526020918290206040805160c08101825260059390930290910180546001600160a01b03908116808552600183015491821695850186905260ff740100000000000000000000000000000000000000009092048216938501849052600283015460608601819052600384015460808701819052600490940154909216151560a09095018590529e949d50919b50909950975095509350505050565b600090815260189190910160205260409020546001600160a01b031690565b82600b0154821015610a6d576040805162461bcd60e51b815260206004820152601360248201527f54494d454652414d455f544f4f5f53484f525400000000000000000000000000604482015290519081900360640190fd5b34610abf576040805162461bcd60e51b815260206004820152600c60248201527f5a45524f5f42414c414e43450000000000000000000000000000000000000000604482015290519081900360640190fd5b80610b11576040805162461bcd60e51b815260206004820152600d60248201527f5a45524f5f5155414e5449545900000000000000000000000000000000000000604482015290519081900360640190fd5b600c83015415801590610b28575082600c01548211155b80610b355750600c830154155b610b86576040805162461bcd60e51b815260206004820152601260248201527f54494d454652414d455f544f4f5f4c4f4e470000000000000000000000000000604482015290519081900360640190fd5b6000610b923483613373565b90506000610bbb84610bb587600b015488600a01546133da90919063ffffffff16565b90613373565b905080821015610c12576040805162461bcd60e51b815260206004820152601060248201527f494e53554646494349454e545f45544800000000000000000000000000000000604482015290519081900360640190fd5b6000610c1d866106fc565b905080610c71576040805162461bcd60e51b815260206004820152601160248201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604482015290519081900360640190fd5b600180870154604080517f156e29f6000000000000000000000000000000000000000000000000000000008152336004820152602481018590526044810193909352516001600160a01b039091169163156e29f691606480830192600092919082900301818387803b158015610ce657600080fd5b505af1158015610cfa573d6000803e3d6000fd5b50505050600186810154604080517f7c881076000000000000000000000000000000000000000000000000000000008152600481018590526024810193909352306044840152516001600160a01b0390911691637c88107691606480830192600092919082900301818387803b158015610d7357600080fd5b505af1158015610d87573d6000803e3d6000fd5b50505050610d9786826001612861565b6000610da342876131ee565b600083815260178901602052604090208190559050610dc283866133da565b6000838152601989016020908152604080832093909355601a8a019052208590558654610dfe908890849033906001600160a01b031689613433565b6002870154604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b158015610e6657600080fd5b505af1158015610e7a573d6000803e3d6000fd5b505050506040513d6020811015610e9057600080fd5b50506002870154604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810186905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b158015610f0157600080fd5b505af1158015610f15573d6000803e3d6000fd5b505050506040513d6020811015610f2b57600080fd5b50508654604080513381526001600160a01b039092166020830152818101849052606082018890526080820187905260a08201859052517fff72dcce7e16e753eb54820be6039d1a590a46681122debdbb8323a1ed851bc49181900360c00190a1610fa4610f9984876133da565b6016890154906131ee565b6016880155610fb383866133da565b34111561106a57600033610fd1610fca86896133da565b3490613cbb565b604051600081818185875af1925050503d806000811461100d576040519150601f19603f3d011682016040523d82523d6000602084013e611012565b606091505b5050905080611068576040805162461bcd60e51b815260206004820152600d60248201527f524546554e445f4641494c454400000000000000000000000000000000000000604482015290519081900360640190fd5b505b50505050505050565b601f015490565b6001600160a01b0382166110b057333181111561109657600080fd5b60168301546110a69033316131ee565b60168401556111d6565b80826001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156110fe57600080fd5b505afa158015611112573d6000803e3d6000fd5b505050506040513d602081101561112857600080fd5b5051101561113557600080fd5b8254604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b039283166024820152604481018490529051918416916323b872dd916064808201926020929091908290030181600087803b1580156111a957600080fd5b505af11580156111bd573d6000803e3d6000fd5b505050506040513d60208110156111d357600080fd5b50505b505050565b60158101546000906111ee8160016131ee565b60158401559050919050565b6001820154604080517efdd58e0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290516001600160a01b039092169162fdd58e91604480820192602092909190829003018186803b15801561126557600080fd5b505afa158015611279573d6000803e3d6000fd5b505050506040513d602081101561128f57600080fd5b50516001146112e5576040805162461bcd60e51b815260206004820152600f60248201527f4e4f545f434c41494d5f4f574e45520000000000000000000000000000000000604482015290519081900360640190fd5b6000818152601783016020908152604080832054601986019092529091205481158015906113135750600081115b611364576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f434c41494d00000000000000000000000000000000000000604482015290519081900360640190fd5b6000838152601885016020908152604080832054601b88019092528083205460018089015483517ff5298aca000000000000000000000000000000000000000000000000000000008152336004820152602481018a9052604481019290925292516001600160a01b0394851695929442891094169263f5298aca926064808201939182900301818387803b1580156113fb57600080fd5b505af115801561140f573d6000803e3d6000fd5b505050506001600160a01b0383161561175c576000600182151514156115895760038801548854604080517feee1ad800000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529051600093929092169163eee1ad8091602480820192602092909190829003018186803b15801561149d57600080fd5b505afa1580156114b1573d6000803e3d6000fd5b505050506040513d60208110156114c757600080fd5b505160038a0154604080517feee1ad800000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301529151939450600093919092169163eee1ad80916024808301926020929190829003018186803b15801561153757600080fd5b505afa15801561154b573d6000803e3d6000fd5b505050506040513d602081101561156157600080fd5b505190506000828214156115755782611577565b815b90506115838682613373565b93505050505b87546003890154604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03938416600482015291831660248301526044820184905251918616916323b872dd916064808201926020929091908290030181600087803b15801561160357600080fd5b505af1158015611617573d6000803e3d6000fd5b505050506040513d602081101561162d57600080fd5b505087546001600160a01b03808616916323b872dd91163361164f8786613cbb565b6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b1580156116a557600080fd5b505af11580156116b9573d6000803e3d6000fd5b505050506040513d60208110156116cf57600080fd5b505087546000888152601a8a0160209081526040918290205482513381526001600160a01b03948516928101929092528183018b905292871660608201526080810188905260a0810186905260c081019290925260e08201839052517f2482a7deee839865abc3b8d6b161d873823b39d668cdbbfa9c7d41c8ae8c3309918190036101000190a1506118f6565b60006001821515141561180e576003880154604080517feee1ad80000000000000000000000000000000000000000000000000000000008152600060048201819052915191926001600160a01b03169163eee1ad8091602480820192602092909190829003018186803b1580156117d257600080fd5b505afa1580156117e6573d6000803e3d6000fd5b505050506040513d60208110156117fc57600080fd5b5051905061180a8682613373565b9150505b60038801546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561184a573d6000803e3d6000fd5b50336108fc6118598784613cbb565b6040518115909202916000818181858888f19350505050158015611881573d6000803e3d6000fd5b5087546000888152601a8a0160209081526040918290205482513381526001600160a01b03909416918401919091528282018a905260608301889052608083015260a08201839052517f592b28bbb6086ff54ebe0c9b40289f1dfcfed2448f2c588a7276ac4b9014870e9181900360c00190a1505b60168701546119059085613cbb565b6016880155806119195750505050506107f5565b6000611924886107f9565b60018901546000898152601a8b0160205260408082205481517f156e29f600000000000000000000000000000000000000000000000000000000815233600482015260248101869052604481019190915290519394506001600160a01b039092169263156e29f692606480820193929182900301818387803b1580156119a957600080fd5b505af11580156119bd573d6000803e3d6000fd5b505050506119cd88826002612861565b6002880154604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b158015611a3557600080fd5b505af1158015611a49573d6000803e3d6000fd5b505050506040513d6020811015611a5f57600080fd5b50506002880154604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810188905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b158015611ad057600080fd5b505af1158015611ae4573d6000803e3d6000fd5b505050506040513d6020811015611afa57600080fd5b505087546000888152601a8a0160209081526040918290205482513381526001600160a01b03909416918401919091528282018a9052606083018490526080830152517f7512ca7ee91fa97e46994bd5e5b267df4d59a14f06a1bdbd4365cc2b10c876b39181900360a00190a15050505050505050565b601f8801548710611bc9576040805162461bcd60e51b815260206004820152600c60248201527f4f55545f4f465f52414e47450000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038616611c24576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f544f4b454e00000000000000000000000000000000000000604482015290519081900360640190fd5b8360ff1660011480611c3957508360ff166002145b80611c4757508360ff166003145b611c98576040805162461bcd60e51b815260206004820152601160248201527f494e56414c49445f544f4b454e54595045000000000000000000000000000000604482015290519081900360640190fd5b8360ff166003148015611cb357506001600160a01b03851615155b80611cc257508360ff16600314155b611d13576040805162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f504f4f4c0000000000000000000000000000000000000000604482015290519081900360640190fd5b8360ff166001148015611d24575082155b80611d3257508360ff166002145b80611d4957508360ff166003148015611d49575082155b611d9a576040805162461bcd60e51b815260206004820152600f60248201527f494e56414c49445f544f4b454e49440000000000000000000000000000000000604482015290519081900360640190fd5b81611dec576040805162461bcd60e51b815260206004820152600b60248201527f5a45524f5f414d4f554e54000000000000000000000000000000000000000000604482015290519081900360640190fd5b6040518060c00160405280876001600160a01b03168152602001866001600160a01b031681526020018560ff16815260200184815260200183815260200182151581525088601f018881548110611e3f57fe5b6000918252602091829020835160059092020180546001600160a01b039283167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617825592840151600182018054604087015160ff1674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff939095169516949094171691909117909155606082015160028201556080820151600382015560a090910151600490910180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009092169190911790555050505050505050565b6001600160a01b038316611f95576040805162461bcd60e51b815260206004820152601360248201527f494e56414c49445f45524332305f544f4b454e00000000000000000000000000604482015290519081900360640190fd5b6000611fa385602001613d18565b118015611fb85750611fb8602085018461324f565b80611fcc5750611fca84602001613d18565b155b61201d576040805162461bcd60e51b815260206004820152601060248201527f544f4b454e5f444953414c4c4f57454400000000000000000000000000000000604482015290519081900360640190fd5b8061206f576040805162461bcd60e51b815260206004820152600d60248201527f5a45524f5f5155414e5449545900000000000000000000000000000000000000604482015290519081900360640190fd5b8360040160009054906101000a90046001600160a01b03166001600160a01b0316631246dbf5846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156120d357600080fd5b505afa1580156120e7573d6000803e3d6000fd5b505050506040513d60208110156120fd57600080fd5b50511515600114612155576040805162461bcd60e51b815260206004820152600f60248201527f4e4f5f554e49535741505f504f4f4c0000000000000000000000000000000000604482015290519081900360640190fd5b6004840154600090819081906001600160a01b031663868d2d1e8761217a8888613373565b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060606040518083038186803b1580156121be57600080fd5b505afa1580156121d2573d6000803e3d6000fd5b505050506040513d60608110156121e857600080fd5b508051602082015160409092015160108a015491955091935090915060ff161515600114156122dd57612226846122208560646133da565b906133da565b81101561227a576040805162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4554485f4c4951554944495459000000000000604482015290519081900360640190fd5b612289846122208760646133da565b8210156122dd576040805162461bcd60e51b815260206004820152601c60248201527f494e53554646494349454e545f544f4b454e5f4c495155494449545900000000604482015290519081900360640190fd5b86600a0154831115612336576040805162461bcd60e51b815260206004820152600b60248201527f4f5645525041594d454e54000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061235784610bb58a600b01548b600a01546133da90919063ffffffff16565b905087600b01548110156123b2576040805162461bcd60e51b815260206004820152601160248201527f494e53554646494349454e545f54494d45000000000000000000000000000000604482015290519081900360640190fd5b60006123bd896106fc565b905080612411576040805162461bcd60e51b815260206004820152601160248201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604482015290519081900360640190fd5b6001808a0154604080517f156e29f6000000000000000000000000000000000000000000000000000000008152336004820152602481018590526044810193909352516001600160a01b039091169163156e29f691606480830192600092919082900301818387803b15801561248657600080fd5b505af115801561249a573d6000803e3d6000fd5b50505050600189810154604080517f7c881076000000000000000000000000000000000000000000000000000000008152600481018590526024810193909352306044840152516001600160a01b0390911691637c88107691606480830192600092919082900301818387803b15801561251357600080fd5b505af1158015612527573d6000803e3d6000fd5b5050505061253789826001612861565b600061254342846131ee565b9050808a601701600084815260200190815260200160002081905550858a601901600084815260200190815260200160002081905550888a601801600084815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550878a601b01600084815260200190815260200160002081905550868a601a0160008481526020019081526020016000208190555061260b8a83338d60000160009054906101000a90046001600160a01b03168b613433565b60168a015461261a90876131ee565b60168b015560028a0154604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b15801561268757600080fd5b505af115801561269b573d6000803e3d6000fd5b505050506040513d60208110156126b157600080fd5b505060028a0154604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810189905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b15801561272257600080fd5b505af1158015612736573d6000803e3d6000fd5b505050506040513d602081101561274c57600080fd5b50508954604080513381526001600160a01b03928316602082015280820185905260608101869052918b16608083015260a0820189905260c08201889052517fdeec9f8b93943a77a4babde0b23801807df37ef259da71ea76343ee6129be0a59181900360e00190a18954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b039283166024820152604481018b90529051918b16916323b872dd916064808201926020929091908290030181600087803b15801561282957600080fd5b505af115801561283d573d6000803e3d6000fd5b505050506040513d602081101561285357600080fd5b505050505050505050505050565b8060ff166001148061287657508060ff166002145b6128c7576040805162461bcd60e51b815260206004820152601160248201527f494e56414c49445f544f4b454e54595045000000000000000000000000000000604482015290519081900360640190fd5b601383018054600180820183556000928352602080842090920185905584835260118601909152604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff8416908117909155146129345761292f836107b8565b61293d565b61293d836111db565b600083815260128501602052604080822092909255600185015482517f7c8810760000000000000000000000000000000000000000000000000000000081526004810186905260ff8516602482015230604482015292516001600160a01b0390911692637c88107692606480830193919282900301818387803b1580156129c357600080fd5b505af11580156129d7573d6000803e3d6000fd5b505050508060ff16600214156111d6576111d6836108a0565b6000908152601791909101602052604090205490565b60018301546001600160a01b0316612a65576040805162461bcd60e51b815260206004820152600d60248201527f4e4f5f4d554c5449544f4b454e00000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821615801590612a8557506001600160a01b03811615155b612ad6576040805162461bcd60e51b815260206004820152601060248201527f5a45524f5f44455354494e4154494f4e00000000000000000000000000000000604482015290519081900360640190fd5b601483015415612b2d576040805162461bcd60e51b815260206004820152600e60248201527f414c52454144595f4d494e544544000000000000000000000000000000000000604482015290519081900360640190fd5b6000612b38846107f9565b600180860154604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018690526044820194909452905193945091169163156e29f69160648082019260009290919082900301818387803b158015612bb357600080fd5b505af1158015612bc7573d6000803e3d6000fd5b50505050612bd784826002612861565b612be0846107f9565b600180860154604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018690526044820194909452905193945091169163156e29f69160648082019260009290919082900301818387803b158015612c5b57600080fd5b505af1158015612c6f573d6000803e3d6000fd5b50505050612c7f84826002612861565b50505050565b6001600160a01b038616612ce0576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f544f4b454e00000000000000000000000000000000000000604482015290519081900360640190fd5b8360ff1660011480612cf557508360ff166002145b80612d0357508360ff166003145b612d54576040805162461bcd60e51b815260206004820152601160248201527f494e56414c49445f544f4b454e54595045000000000000000000000000000000604482015290519081900360640190fd5b8360ff166003148015612d6f57506001600160a01b03851615155b80612d7e57508360ff16600314155b612dcf576040805162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f504f4f4c0000000000000000000000000000000000000000604482015290519081900360640190fd5b8360ff166001148015612de0575082155b80612dee57508360ff166002145b80612e0557508360ff166003148015612e05575082155b612e56576040805162461bcd60e51b815260206004820152600f60248201527f494e56414c49445f544f4b454e49440000000000000000000000000000000000604482015290519081900360640190fd5b81612ea8576040805162461bcd60e51b815260206004820152600b60248201527f5a45524f5f414d4f554e54000000000000000000000000000000000000000000604482015290519081900360640190fd5b6040805160c0810182526001600160a01b039788168152958716602080880191825260ff968716928801928352606088019586526080880194855292151560a08801908152601f9099018054600181810183556000928352949091209751600590910290970180549789167fffffffffffffffffffffffff000000000000000000000000000000000000000098891617815590519281018054925190961674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9390981691909616171694909417909155516002820155905160038201559051600490910180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055565b612fe1602083018261324f565b156107f5576107f56020830182613d1f565b6000908152601b91909101602052604090205490565b6001600160a01b038216613064576040805162461bcd60e51b815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b336000908152601e8501602052604090205460ff16151560011480613095575060028401546001600160a01b031633145b6130e6576040805162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a45440000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038316613130576040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561312a573d6000803e3d6000fd5b50612c7f565b8354604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201528483166024820152604481018490529051918516916323b872dd916064808201926020929091908290030181600087803b1580156131a657600080fd5b505af11580156131ba573d6000803e3d6000fd5b505050506040513d60208110156131d057600080fd5b505050505050565b6000908152601a91909101602052604090205490565b600082820183811015613248576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001820154600090613263575060006106f6565b6001600160a01b038216600081815260208590526040902054600185018054909190811061328d57fe5b6000918252602090912001546001600160a01b0316149392505050565b6132b4828261324f565b156132f05760405162461bcd60e51b815260040180806020018281038252602a815260200180613f7d602a913960400191505060405180910390fd5b6001828101805491820181556000818152602080822090930180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03959095169485179055905492815292905260409091207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091019055565b60008082116133c9576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816133d257fe5b049392505050565b6000826133e9575060006106f6565b828202828482816133f657fe5b04146132485760405162461bcd60e51b8152600401808060200182810382526021815260200180613f5c6021913960400191505060405180910390fd5b6000805b601f870154811015613b465786601f01818154811061345257fe5b60009182526020909120600160059092020181015460ff7401000000000000000000000000000000000000000090910416141561357c57600087601f01828154811061349a57fe5b906000526020600020906005020160000160009054906101000a90046001600160a01b03169050806001600160a01b03166323b872dd87878b601f0186815481106134e157fe5b9060005260206000209060050201600301546040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b15801561354957600080fd5b505af115801561355d573d6000803e3d6000fd5b505050506040513d602081101561357357600080fd5b50613b3e915050565b86601f01818154811061358b57fe5b906000526020600020906005020160010160149054906101000a900460ff1660ff16600214156136cf57600087601f0182815481106135c657fe5b906000526020600020906005020160000160009054906101000a90046001600160a01b03169050806001600160a01b031663f242432a87878b601f01868154811061360d57fe5b9060005260206000209060050201600201548c601f01878154811061362e57fe5b9060005260206000209060050201600301546040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b031681526020018381526020018281526020018060200182810382526000815260200160200195505050505050600060405180830381600087803b1580156136b157600080fd5b505af11580156136c5573d6000803e3d6000fd5b5050505050613b3e565b86601f0181815481106136de57fe5b906000526020600020906005020160010160149054906101000a900460ff1660ff1660031415613b3e5760008388601f01838154811061371a57fe5b906000526020600020906005020160030154029050600088601f01838154811061374057fe5b600091825260209182902060059091020154604080517fa0f8c6940000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301529151919092169263a0f8c6949260248082019391829003018186803b1580156137b157600080fd5b505afa1580156137c5573d6000803e3d6000fd5b505050506040513d60208110156137db57600080fd5b5051905060005b81811015613ae75760008a601f0185815481106137fb57fe5b600091825260209182902060059091020154604080517fb59a91280000000000000000000000000000000000000000000000000000000081526001600160a01b038d81166004830152602482018790529151919092169263b59a91289260448082019391829003018186803b15801561387357600080fd5b505afa158015613887573d6000803e3d6000fd5b505050506040513d602081101561389d57600080fd5b5051601f8c01805491925090869081106138b357fe5b600091825260209182902060016005909202010154604080517fe6c3b1f60000000000000000000000000000000000000000000000000000000081526004810185905290516001600160a01b039092169263e6c3b1f692602480840193829003018186803b15801561392457600080fd5b505afa158015613938573d6000803e3d6000fd5b505050506040513d602081101561394e57600080fd5b505160ff1660021415613ad2578a601f01858154811061396a57fe5b60009182526020822060059091020154601f8d0180546001600160a01b039092169850908790811061399857fe5b600091825260209182902060059091020154604080517efdd58e0000000000000000000000000000000000000000000000000000000081526001600160a01b038e81166004830152602482018790529151919092169262fdd58e9260448082019391829003018186803b158015613a0e57600080fd5b505afa158015613a22573d6000803e3d6000fd5b505050506040513d6020811015613a3857600080fd5b5051905084811115613a475750835b80613a53575050613adf565b8b601c0160008c81526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150558b601d0160008c81526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150558085039450505b83613add5750613ae7565b505b6001016137e2565b508115613b3b576040805162461bcd60e51b815260206004820152601260248201527f554e4d45545f524551554952454d454e54530000000000000000000000000000604482015290519081900360640190fd5b50505b600101613437565b506000858152601c8701602052604090205415801590613b6e57506001600160a01b03811615155b156131d057806001600160a01b0316632eb2c2d6858589601c0160008a81526020019081526020016000208a601d0160008b81526020019081526020016000206040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b031681526020018060200180602001806020018481038452868181548152602001915080548015613c2857602002820191906000526020600020905b815481526020019060010190808311613c14575b50508481038352858181548152602001915080548015613c6757602002820191906000526020600020905b815481526020019060010190808311613c53575b5050848103825260008152602001602001975050505050505050600060405180830381600087803b158015613c9b57600080fd5b505af1158015613caf573d6000803e3d6000fd5b50505050505050505050565b600082821115613d12576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001015490565b613d29828261324f565b613d645760405162461bcd60e51b815260040180806020018281038252602a815260200180613f32602a913960400191505060405180910390fd5b60006001613d7184613d18565b6001600160a01b0384166000908152602086905260409020549190039150808214613e99576000846001018381548110613da757fe5b60009182526020808320909101546001600160a01b0316808352908790526040909120839055600186018054919250829184908110613de257fe5b600091825260208083209190910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0394851617905591861681529086905260408120556001850180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908110613e6257fe5b600091825260209091200180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905550612c7f565b6001600160a01b0383166000908152602085905260408120819055612c7f906001860190613ef7565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b5080546000825590600052602060002090810190613f159190613f18565b50565b5b80821115613f2d5760008155600101613f19565b509056fe416464726573735365743a206b657920646f6573206e6f7420657869737420696e20746865207365742e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77416464726573735365743a206b657920616c72656164792065786973747320696e20746865207365742ea26469706673582212201686dcac441ad4f5d5f4e155b388e91dcaae008a36aceb612b798940502c85e564736f6c63430007030033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101a25760003560e01c80639630ccd8116100ed578063b9f0527411610096578063dc1f0f5311610070578063dc1f0f5314610655578063e5932f4214610678578063ecd5244e146106c1576101a2565b8063b9f052741461057b578063d28b9351146105bc578063d9495bce1461061c576101a2565b8063afeafd9a116100c7578063afeafd9a146104da578063b25bd5241461051f578063b94677da14610558576101a2565b80639630ccd81461041957806396b8b27f14610443578063a93ac11614610473576101a2565b80635aec67be1161014f57806380ca2ba61161012957806380ca2ba61461037a578063828c7b72146103b057806388d496a4146103da576101a2565b80635aec67be1461029e5780635b68e93c146102c857806376e455e11461033b576101a2565b806324ccf5cf1161018057806324ccf5cf1461022357806333c13e0d1461025e57806350ec70771461027b576101a2565b806301356b6d146101a7578063164cd8c2146101dc57806320b97bdb146101f9575b600080fd5b6101ca600480360360408110156101bd57600080fd5b50803590602001356106e4565b60408051918252519081900360200190f35b6101ca600480360360208110156101f257600080fd5b50356106fc565b81801561020557600080fd5b506101ca6004803603602081101561021c57600080fd5b50356107b8565b81801561022f57600080fd5b5061025c6004803603604081101561024657600080fd5b50803590602001356001600160a01b03166107d7565b005b6101ca6004803603602081101561027457600080fd5b50356107f9565b6101ca6004803603604081101561029157600080fd5b508035906020013561087c565b8180156102aa57600080fd5b5061025c600480360360208110156102c157600080fd5b50356108a0565b8180156102d457600080fd5b506102f8600480360360408110156102eb57600080fd5b50803590602001356108db565b604080516001600160a01b03978816815295909616602086015260ff9093168486015260608401919091526080830152151560a082015290519081900360c00190f35b61035e6004803603604081101561035157600080fd5b50803590602001356109f5565b604080516001600160a01b039092168252519081900360200190f35b81801561038657600080fd5b5061025c6004803603606081101561039d57600080fd5b5080359060208101359060400135610a14565b8180156103bc57600080fd5b506101ca600480360360208110156103d357600080fd5b5035611073565b8180156103e657600080fd5b5061025c600480360360608110156103fd57600080fd5b508035906001600160a01b03602082013516906040013561107a565b81801561042557600080fd5b506101ca6004803603602081101561043c57600080fd5b50356111db565b81801561044f57600080fd5b5061025c6004803603604081101561046657600080fd5b50803590602001356111fa565b81801561047f57600080fd5b5061025c600480360361010081101561049757600080fd5b508035906020810135906001600160a01b03604082013581169160608101359091169060ff6080820135169060a08101359060c08101359060e001351515611b71565b8180156104e657600080fd5b5061025c600480360360808110156104fd57600080fd5b508035906001600160a01b036020820135169060408101359060600135611f3a565b81801561052b57600080fd5b5061025c6004803603606081101561054257600080fd5b508035906020810135906040013560ff16612861565b6101ca6004803603604081101561056e57600080fd5b50803590602001356129f0565b81801561058757600080fd5b5061025c6004803603606081101561059e57600080fd5b508035906001600160a01b0360208201358116916040013516612a06565b8180156105c857600080fd5b5061025c600480360360e08110156105df57600080fd5b508035906001600160a01b03602082013581169160408101359091169060ff6060820135169060808101359060a08101359060c001351515612c85565b81801561062857600080fd5b5061025c6004803603604081101561063f57600080fd5b50803590602001356001600160a01b0316612fd4565b6101ca6004803603604081101561066b57600080fd5b5080359060200135612ff3565b81801561068457600080fd5b5061025c6004803603608081101561069b57600080fd5b508035906001600160a01b03602082013581169160408101359091169060600135613009565b6101ca600480360360408110156106d757600080fd5b50803590602001356131d8565b60008181526019830160205260409020545b92915050565b600081600e015460001415801561071b575081600e0154826015015411155b806107285750600e820154155b6107335760006106f6565b81546015830154604080517f636c61696d00000000000000000000000000000000000000000000000000000060208083019190915260609490941b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166025820152603980820193909352815180820390930183526059019052805191012092915050565b60148101546000906107cb8160016131ee565b60148401559050919050565b6107e4602083018261324f565b6107f5576107f560208301826132aa565b5050565b8054601490910154604080517f67656d000000000000000000000000000000000000000000000000000000000060208083019190915260609490941b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166023820152603780820193909352815180820390930183526057019052805191012090565b600082601301828154811061088d57fe5b9060005260206000200154905092915050565b60006108bd82600d015483600a015461337390919063ffffffff16565b600a8301549091506108cf90826131ee565b82600a01819055505050565b60008060008060008087601f0180549050871061093f576040805162461bcd60e51b815260206004820152600c60248201527f4f55545f4f465f52414e47450000000000000000000000000000000000000000604482015290519081900360640190fd5b610947613ec2565b88601f01888154811061095657fe5b60009182526020918290206040805160c08101825260059390930290910180546001600160a01b03908116808552600183015491821695850186905260ff740100000000000000000000000000000000000000009092048216938501849052600283015460608601819052600384015460808701819052600490940154909216151560a09095018590529e949d50919b50909950975095509350505050565b600090815260189190910160205260409020546001600160a01b031690565b82600b0154821015610a6d576040805162461bcd60e51b815260206004820152601360248201527f54494d454652414d455f544f4f5f53484f525400000000000000000000000000604482015290519081900360640190fd5b34610abf576040805162461bcd60e51b815260206004820152600c60248201527f5a45524f5f42414c414e43450000000000000000000000000000000000000000604482015290519081900360640190fd5b80610b11576040805162461bcd60e51b815260206004820152600d60248201527f5a45524f5f5155414e5449545900000000000000000000000000000000000000604482015290519081900360640190fd5b600c83015415801590610b28575082600c01548211155b80610b355750600c830154155b610b86576040805162461bcd60e51b815260206004820152601260248201527f54494d454652414d455f544f4f5f4c4f4e470000000000000000000000000000604482015290519081900360640190fd5b6000610b923483613373565b90506000610bbb84610bb587600b015488600a01546133da90919063ffffffff16565b90613373565b905080821015610c12576040805162461bcd60e51b815260206004820152601060248201527f494e53554646494349454e545f45544800000000000000000000000000000000604482015290519081900360640190fd5b6000610c1d866106fc565b905080610c71576040805162461bcd60e51b815260206004820152601160248201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604482015290519081900360640190fd5b600180870154604080517f156e29f6000000000000000000000000000000000000000000000000000000008152336004820152602481018590526044810193909352516001600160a01b039091169163156e29f691606480830192600092919082900301818387803b158015610ce657600080fd5b505af1158015610cfa573d6000803e3d6000fd5b50505050600186810154604080517f7c881076000000000000000000000000000000000000000000000000000000008152600481018590526024810193909352306044840152516001600160a01b0390911691637c88107691606480830192600092919082900301818387803b158015610d7357600080fd5b505af1158015610d87573d6000803e3d6000fd5b50505050610d9786826001612861565b6000610da342876131ee565b600083815260178901602052604090208190559050610dc283866133da565b6000838152601989016020908152604080832093909355601a8a019052208590558654610dfe908890849033906001600160a01b031689613433565b6002870154604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b158015610e6657600080fd5b505af1158015610e7a573d6000803e3d6000fd5b505050506040513d6020811015610e9057600080fd5b50506002870154604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810186905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b158015610f0157600080fd5b505af1158015610f15573d6000803e3d6000fd5b505050506040513d6020811015610f2b57600080fd5b50508654604080513381526001600160a01b039092166020830152818101849052606082018890526080820187905260a08201859052517fff72dcce7e16e753eb54820be6039d1a590a46681122debdbb8323a1ed851bc49181900360c00190a1610fa4610f9984876133da565b6016890154906131ee565b6016880155610fb383866133da565b34111561106a57600033610fd1610fca86896133da565b3490613cbb565b604051600081818185875af1925050503d806000811461100d576040519150601f19603f3d011682016040523d82523d6000602084013e611012565b606091505b5050905080611068576040805162461bcd60e51b815260206004820152600d60248201527f524546554e445f4641494c454400000000000000000000000000000000000000604482015290519081900360640190fd5b505b50505050505050565b601f015490565b6001600160a01b0382166110b057333181111561109657600080fd5b60168301546110a69033316131ee565b60168401556111d6565b80826001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156110fe57600080fd5b505afa158015611112573d6000803e3d6000fd5b505050506040513d602081101561112857600080fd5b5051101561113557600080fd5b8254604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b039283166024820152604481018490529051918416916323b872dd916064808201926020929091908290030181600087803b1580156111a957600080fd5b505af11580156111bd573d6000803e3d6000fd5b505050506040513d60208110156111d357600080fd5b50505b505050565b60158101546000906111ee8160016131ee565b60158401559050919050565b6001820154604080517efdd58e0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290516001600160a01b039092169162fdd58e91604480820192602092909190829003018186803b15801561126557600080fd5b505afa158015611279573d6000803e3d6000fd5b505050506040513d602081101561128f57600080fd5b50516001146112e5576040805162461bcd60e51b815260206004820152600f60248201527f4e4f545f434c41494d5f4f574e45520000000000000000000000000000000000604482015290519081900360640190fd5b6000818152601783016020908152604080832054601986019092529091205481158015906113135750600081115b611364576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f434c41494d00000000000000000000000000000000000000604482015290519081900360640190fd5b6000838152601885016020908152604080832054601b88019092528083205460018089015483517ff5298aca000000000000000000000000000000000000000000000000000000008152336004820152602481018a9052604481019290925292516001600160a01b0394851695929442891094169263f5298aca926064808201939182900301818387803b1580156113fb57600080fd5b505af115801561140f573d6000803e3d6000fd5b505050506001600160a01b0383161561175c576000600182151514156115895760038801548854604080517feee1ad800000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529051600093929092169163eee1ad8091602480820192602092909190829003018186803b15801561149d57600080fd5b505afa1580156114b1573d6000803e3d6000fd5b505050506040513d60208110156114c757600080fd5b505160038a0154604080517feee1ad800000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301529151939450600093919092169163eee1ad80916024808301926020929190829003018186803b15801561153757600080fd5b505afa15801561154b573d6000803e3d6000fd5b505050506040513d602081101561156157600080fd5b505190506000828214156115755782611577565b815b90506115838682613373565b93505050505b87546003890154604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03938416600482015291831660248301526044820184905251918616916323b872dd916064808201926020929091908290030181600087803b15801561160357600080fd5b505af1158015611617573d6000803e3d6000fd5b505050506040513d602081101561162d57600080fd5b505087546001600160a01b03808616916323b872dd91163361164f8786613cbb565b6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b1580156116a557600080fd5b505af11580156116b9573d6000803e3d6000fd5b505050506040513d60208110156116cf57600080fd5b505087546000888152601a8a0160209081526040918290205482513381526001600160a01b03948516928101929092528183018b905292871660608201526080810188905260a0810186905260c081019290925260e08201839052517f2482a7deee839865abc3b8d6b161d873823b39d668cdbbfa9c7d41c8ae8c3309918190036101000190a1506118f6565b60006001821515141561180e576003880154604080517feee1ad80000000000000000000000000000000000000000000000000000000008152600060048201819052915191926001600160a01b03169163eee1ad8091602480820192602092909190829003018186803b1580156117d257600080fd5b505afa1580156117e6573d6000803e3d6000fd5b505050506040513d60208110156117fc57600080fd5b5051905061180a8682613373565b9150505b60038801546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561184a573d6000803e3d6000fd5b50336108fc6118598784613cbb565b6040518115909202916000818181858888f19350505050158015611881573d6000803e3d6000fd5b5087546000888152601a8a0160209081526040918290205482513381526001600160a01b03909416918401919091528282018a905260608301889052608083015260a08201839052517f592b28bbb6086ff54ebe0c9b40289f1dfcfed2448f2c588a7276ac4b9014870e9181900360c00190a1505b60168701546119059085613cbb565b6016880155806119195750505050506107f5565b6000611924886107f9565b60018901546000898152601a8b0160205260408082205481517f156e29f600000000000000000000000000000000000000000000000000000000815233600482015260248101869052604481019190915290519394506001600160a01b039092169263156e29f692606480820193929182900301818387803b1580156119a957600080fd5b505af11580156119bd573d6000803e3d6000fd5b505050506119cd88826002612861565b6002880154604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b158015611a3557600080fd5b505af1158015611a49573d6000803e3d6000fd5b505050506040513d6020811015611a5f57600080fd5b50506002880154604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810188905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b158015611ad057600080fd5b505af1158015611ae4573d6000803e3d6000fd5b505050506040513d6020811015611afa57600080fd5b505087546000888152601a8a0160209081526040918290205482513381526001600160a01b03909416918401919091528282018a9052606083018490526080830152517f7512ca7ee91fa97e46994bd5e5b267df4d59a14f06a1bdbd4365cc2b10c876b39181900360a00190a15050505050505050565b601f8801548710611bc9576040805162461bcd60e51b815260206004820152600c60248201527f4f55545f4f465f52414e47450000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038616611c24576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f544f4b454e00000000000000000000000000000000000000604482015290519081900360640190fd5b8360ff1660011480611c3957508360ff166002145b80611c4757508360ff166003145b611c98576040805162461bcd60e51b815260206004820152601160248201527f494e56414c49445f544f4b454e54595045000000000000000000000000000000604482015290519081900360640190fd5b8360ff166003148015611cb357506001600160a01b03851615155b80611cc257508360ff16600314155b611d13576040805162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f504f4f4c0000000000000000000000000000000000000000604482015290519081900360640190fd5b8360ff166001148015611d24575082155b80611d3257508360ff166002145b80611d4957508360ff166003148015611d49575082155b611d9a576040805162461bcd60e51b815260206004820152600f60248201527f494e56414c49445f544f4b454e49440000000000000000000000000000000000604482015290519081900360640190fd5b81611dec576040805162461bcd60e51b815260206004820152600b60248201527f5a45524f5f414d4f554e54000000000000000000000000000000000000000000604482015290519081900360640190fd5b6040518060c00160405280876001600160a01b03168152602001866001600160a01b031681526020018560ff16815260200184815260200183815260200182151581525088601f018881548110611e3f57fe5b6000918252602091829020835160059092020180546001600160a01b039283167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617825592840151600182018054604087015160ff1674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff939095169516949094171691909117909155606082015160028201556080820151600382015560a090910151600490910180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009092169190911790555050505050505050565b6001600160a01b038316611f95576040805162461bcd60e51b815260206004820152601360248201527f494e56414c49445f45524332305f544f4b454e00000000000000000000000000604482015290519081900360640190fd5b6000611fa385602001613d18565b118015611fb85750611fb8602085018461324f565b80611fcc5750611fca84602001613d18565b155b61201d576040805162461bcd60e51b815260206004820152601060248201527f544f4b454e5f444953414c4c4f57454400000000000000000000000000000000604482015290519081900360640190fd5b8061206f576040805162461bcd60e51b815260206004820152600d60248201527f5a45524f5f5155414e5449545900000000000000000000000000000000000000604482015290519081900360640190fd5b8360040160009054906101000a90046001600160a01b03166001600160a01b0316631246dbf5846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156120d357600080fd5b505afa1580156120e7573d6000803e3d6000fd5b505050506040513d60208110156120fd57600080fd5b50511515600114612155576040805162461bcd60e51b815260206004820152600f60248201527f4e4f5f554e49535741505f504f4f4c0000000000000000000000000000000000604482015290519081900360640190fd5b6004840154600090819081906001600160a01b031663868d2d1e8761217a8888613373565b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060606040518083038186803b1580156121be57600080fd5b505afa1580156121d2573d6000803e3d6000fd5b505050506040513d60608110156121e857600080fd5b508051602082015160409092015160108a015491955091935090915060ff161515600114156122dd57612226846122208560646133da565b906133da565b81101561227a576040805162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4554485f4c4951554944495459000000000000604482015290519081900360640190fd5b612289846122208760646133da565b8210156122dd576040805162461bcd60e51b815260206004820152601c60248201527f494e53554646494349454e545f544f4b454e5f4c495155494449545900000000604482015290519081900360640190fd5b86600a0154831115612336576040805162461bcd60e51b815260206004820152600b60248201527f4f5645525041594d454e54000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061235784610bb58a600b01548b600a01546133da90919063ffffffff16565b905087600b01548110156123b2576040805162461bcd60e51b815260206004820152601160248201527f494e53554646494349454e545f54494d45000000000000000000000000000000604482015290519081900360640190fd5b60006123bd896106fc565b905080612411576040805162461bcd60e51b815260206004820152601160248201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604482015290519081900360640190fd5b6001808a0154604080517f156e29f6000000000000000000000000000000000000000000000000000000008152336004820152602481018590526044810193909352516001600160a01b039091169163156e29f691606480830192600092919082900301818387803b15801561248657600080fd5b505af115801561249a573d6000803e3d6000fd5b50505050600189810154604080517f7c881076000000000000000000000000000000000000000000000000000000008152600481018590526024810193909352306044840152516001600160a01b0390911691637c88107691606480830192600092919082900301818387803b15801561251357600080fd5b505af1158015612527573d6000803e3d6000fd5b5050505061253789826001612861565b600061254342846131ee565b9050808a601701600084815260200190815260200160002081905550858a601901600084815260200190815260200160002081905550888a601801600084815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550878a601b01600084815260200190815260200160002081905550868a601a0160008481526020019081526020016000208190555061260b8a83338d60000160009054906101000a90046001600160a01b03168b613433565b60168a015461261a90876131ee565b60168b015560028a0154604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b15801561268757600080fd5b505af115801561269b573d6000803e3d6000fd5b505050506040513d60208110156126b157600080fd5b505060028a0154604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810189905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b15801561272257600080fd5b505af1158015612736573d6000803e3d6000fd5b505050506040513d602081101561274c57600080fd5b50508954604080513381526001600160a01b03928316602082015280820185905260608101869052918b16608083015260a0820189905260c08201889052517fdeec9f8b93943a77a4babde0b23801807df37ef259da71ea76343ee6129be0a59181900360e00190a18954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b039283166024820152604481018b90529051918b16916323b872dd916064808201926020929091908290030181600087803b15801561282957600080fd5b505af115801561283d573d6000803e3d6000fd5b505050506040513d602081101561285357600080fd5b505050505050505050505050565b8060ff166001148061287657508060ff166002145b6128c7576040805162461bcd60e51b815260206004820152601160248201527f494e56414c49445f544f4b454e54595045000000000000000000000000000000604482015290519081900360640190fd5b601383018054600180820183556000928352602080842090920185905584835260118601909152604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff8416908117909155146129345761292f836107b8565b61293d565b61293d836111db565b600083815260128501602052604080822092909255600185015482517f7c8810760000000000000000000000000000000000000000000000000000000081526004810186905260ff8516602482015230604482015292516001600160a01b0390911692637c88107692606480830193919282900301818387803b1580156129c357600080fd5b505af11580156129d7573d6000803e3d6000fd5b505050508060ff16600214156111d6576111d6836108a0565b6000908152601791909101602052604090205490565b60018301546001600160a01b0316612a65576040805162461bcd60e51b815260206004820152600d60248201527f4e4f5f4d554c5449544f4b454e00000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821615801590612a8557506001600160a01b03811615155b612ad6576040805162461bcd60e51b815260206004820152601060248201527f5a45524f5f44455354494e4154494f4e00000000000000000000000000000000604482015290519081900360640190fd5b601483015415612b2d576040805162461bcd60e51b815260206004820152600e60248201527f414c52454144595f4d494e544544000000000000000000000000000000000000604482015290519081900360640190fd5b6000612b38846107f9565b600180860154604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018690526044820194909452905193945091169163156e29f69160648082019260009290919082900301818387803b158015612bb357600080fd5b505af1158015612bc7573d6000803e3d6000fd5b50505050612bd784826002612861565b612be0846107f9565b600180860154604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018690526044820194909452905193945091169163156e29f69160648082019260009290919082900301818387803b158015612c5b57600080fd5b505af1158015612c6f573d6000803e3d6000fd5b50505050612c7f84826002612861565b50505050565b6001600160a01b038616612ce0576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f544f4b454e00000000000000000000000000000000000000604482015290519081900360640190fd5b8360ff1660011480612cf557508360ff166002145b80612d0357508360ff166003145b612d54576040805162461bcd60e51b815260206004820152601160248201527f494e56414c49445f544f4b454e54595045000000000000000000000000000000604482015290519081900360640190fd5b8360ff166003148015612d6f57506001600160a01b03851615155b80612d7e57508360ff16600314155b612dcf576040805162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f504f4f4c0000000000000000000000000000000000000000604482015290519081900360640190fd5b8360ff166001148015612de0575082155b80612dee57508360ff166002145b80612e0557508360ff166003148015612e05575082155b612e56576040805162461bcd60e51b815260206004820152600f60248201527f494e56414c49445f544f4b454e49440000000000000000000000000000000000604482015290519081900360640190fd5b81612ea8576040805162461bcd60e51b815260206004820152600b60248201527f5a45524f5f414d4f554e54000000000000000000000000000000000000000000604482015290519081900360640190fd5b6040805160c0810182526001600160a01b039788168152958716602080880191825260ff968716928801928352606088019586526080880194855292151560a08801908152601f9099018054600181810183556000928352949091209751600590910290970180549789167fffffffffffffffffffffffff000000000000000000000000000000000000000098891617815590519281018054925190961674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9390981691909616171694909417909155516002820155905160038201559051600490910180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055565b612fe1602083018261324f565b156107f5576107f56020830182613d1f565b6000908152601b91909101602052604090205490565b6001600160a01b038216613064576040805162461bcd60e51b815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b336000908152601e8501602052604090205460ff16151560011480613095575060028401546001600160a01b031633145b6130e6576040805162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a45440000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038316613130576040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561312a573d6000803e3d6000fd5b50612c7f565b8354604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201528483166024820152604481018490529051918516916323b872dd916064808201926020929091908290030181600087803b1580156131a657600080fd5b505af11580156131ba573d6000803e3d6000fd5b505050506040513d60208110156131d057600080fd5b505050505050565b6000908152601a91909101602052604090205490565b600082820183811015613248576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001820154600090613263575060006106f6565b6001600160a01b038216600081815260208590526040902054600185018054909190811061328d57fe5b6000918252602090912001546001600160a01b0316149392505050565b6132b4828261324f565b156132f05760405162461bcd60e51b815260040180806020018281038252602a815260200180613f7d602a913960400191505060405180910390fd5b6001828101805491820181556000818152602080822090930180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03959095169485179055905492815292905260409091207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091019055565b60008082116133c9576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816133d257fe5b049392505050565b6000826133e9575060006106f6565b828202828482816133f657fe5b04146132485760405162461bcd60e51b8152600401808060200182810382526021815260200180613f5c6021913960400191505060405180910390fd5b6000805b601f870154811015613b465786601f01818154811061345257fe5b60009182526020909120600160059092020181015460ff7401000000000000000000000000000000000000000090910416141561357c57600087601f01828154811061349a57fe5b906000526020600020906005020160000160009054906101000a90046001600160a01b03169050806001600160a01b03166323b872dd87878b601f0186815481106134e157fe5b9060005260206000209060050201600301546040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b15801561354957600080fd5b505af115801561355d573d6000803e3d6000fd5b505050506040513d602081101561357357600080fd5b50613b3e915050565b86601f01818154811061358b57fe5b906000526020600020906005020160010160149054906101000a900460ff1660ff16600214156136cf57600087601f0182815481106135c657fe5b906000526020600020906005020160000160009054906101000a90046001600160a01b03169050806001600160a01b031663f242432a87878b601f01868154811061360d57fe5b9060005260206000209060050201600201548c601f01878154811061362e57fe5b9060005260206000209060050201600301546040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b031681526020018381526020018281526020018060200182810382526000815260200160200195505050505050600060405180830381600087803b1580156136b157600080fd5b505af11580156136c5573d6000803e3d6000fd5b5050505050613b3e565b86601f0181815481106136de57fe5b906000526020600020906005020160010160149054906101000a900460ff1660ff1660031415613b3e5760008388601f01838154811061371a57fe5b906000526020600020906005020160030154029050600088601f01838154811061374057fe5b600091825260209182902060059091020154604080517fa0f8c6940000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301529151919092169263a0f8c6949260248082019391829003018186803b1580156137b157600080fd5b505afa1580156137c5573d6000803e3d6000fd5b505050506040513d60208110156137db57600080fd5b5051905060005b81811015613ae75760008a601f0185815481106137fb57fe5b600091825260209182902060059091020154604080517fb59a91280000000000000000000000000000000000000000000000000000000081526001600160a01b038d81166004830152602482018790529151919092169263b59a91289260448082019391829003018186803b15801561387357600080fd5b505afa158015613887573d6000803e3d6000fd5b505050506040513d602081101561389d57600080fd5b5051601f8c01805491925090869081106138b357fe5b600091825260209182902060016005909202010154604080517fe6c3b1f60000000000000000000000000000000000000000000000000000000081526004810185905290516001600160a01b039092169263e6c3b1f692602480840193829003018186803b15801561392457600080fd5b505afa158015613938573d6000803e3d6000fd5b505050506040513d602081101561394e57600080fd5b505160ff1660021415613ad2578a601f01858154811061396a57fe5b60009182526020822060059091020154601f8d0180546001600160a01b039092169850908790811061399857fe5b600091825260209182902060059091020154604080517efdd58e0000000000000000000000000000000000000000000000000000000081526001600160a01b038e81166004830152602482018790529151919092169262fdd58e9260448082019391829003018186803b158015613a0e57600080fd5b505afa158015613a22573d6000803e3d6000fd5b505050506040513d6020811015613a3857600080fd5b5051905084811115613a475750835b80613a53575050613adf565b8b601c0160008c81526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150558b601d0160008c81526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150558085039450505b83613add5750613ae7565b505b6001016137e2565b508115613b3b576040805162461bcd60e51b815260206004820152601260248201527f554e4d45545f524551554952454d454e54530000000000000000000000000000604482015290519081900360640190fd5b50505b600101613437565b506000858152601c8701602052604090205415801590613b6e57506001600160a01b03811615155b156131d057806001600160a01b0316632eb2c2d6858589601c0160008a81526020019081526020016000208a601d0160008b81526020019081526020016000206040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b031681526020018060200180602001806020018481038452868181548152602001915080548015613c2857602002820191906000526020600020905b815481526020019060010190808311613c14575b50508481038352858181548152602001915080548015613c6757602002820191906000526020600020905b815481526020019060010190808311613c53575b5050848103825260008152602001602001975050505050505050600060405180830381600087803b158015613c9b57600080fd5b505af1158015613caf573d6000803e3d6000fd5b50505050505050505050565b600082821115613d12576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001015490565b613d29828261324f565b613d645760405162461bcd60e51b815260040180806020018281038252602a815260200180613f32602a913960400191505060405180910390fd5b60006001613d7184613d18565b6001600160a01b0384166000908152602086905260409020549190039150808214613e99576000846001018381548110613da757fe5b60009182526020808320909101546001600160a01b0316808352908790526040909120839055600186018054919250829184908110613de257fe5b600091825260208083209190910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0394851617905591861681529086905260408120556001850180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908110613e6257fe5b600091825260209091200180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905550612c7f565b6001600160a01b0383166000908152602085905260408120819055612c7f906001860190613ef7565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b5080546000825590600052602060002090810190613f159190613f18565b50565b5b80821115613f2d5760008155600101613f19565b509056fe416464726573735365743a206b657920646f6573206e6f7420657869737420696e20746865207365742e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77416464726573735365743a206b657920616c72656164792065786973747320696e20746865207365742ea26469706673582212201686dcac441ad4f5d5f4e155b388e91dcaae008a36aceb612b798940502c85e564736f6c63430007030033",
  "libraries": {
    "AddressSet": "0xe696d6C522A45D46f76E7Dd3D3602afc47854212",
    "SafeMath": "0x753f0df0a61c5F8A0eB31c6Bf6e7363943Eb225B"
  },
  "devdoc": {
    "events": {
      "ComplexNFTGemClaimCreated(address,address,uint256,uint256,uint256,uint256)": {
        "details": "Event generated when an NFT claim is created using ETH"
      },
      "ComplexNFTGemClaimRedeemed(address,address,uint256,uint256,uint256,uint256)": {
        "details": "Event generated when an NFT claim is redeemed"
      },
      "ComplexNFTGemCreated(address,address,uint256,uint256,uint256)": {
        "details": "Event generated when a gem is created"
      },
      "ComplexNFTGemERC20ClaimCreated(address,address,uint256,uint256,address,uint256,uint256)": {
        "details": "Event generated when an NFT claim is created using ERC20 tokens"
      },
      "ComplexNFTGemERC20ClaimRedeemed(address,address,uint256,address,uint256,uint256,uint256,uint256)": {
        "details": "Event generated when an NFT claim is redeemed"
      }
    },
    "kind": "dev",
    "methods": {
      "addAllowedToken(ComplexPoolLib.ComplexPoolData storage,address)": {
        "details": "the public version of the above"
      },
      "addInputRequirement(ComplexPoolLib.ComplexPoolData storage,address,address,uint8,uint256,uint256,bool)": {
        "details": "add an input requirement for this token"
      },
      "addToken(ComplexPoolLib.ComplexPoolData storage,uint256,uint8)": {
        "details": "get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem"
      },
      "allInputRequirements(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "input requirements at index"
      },
      "allInputRequirementsLength(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "number of input requirements"
      },
      "allTokenHashes(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem"
      },
      "claimAmount(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "the claim amount for the given claim id"
      },
      "claimQuantity(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "the claim quantity (count of gems staked) for the given claim id"
      },
      "claimTokenAmount(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "claim token amount if paid using erc20"
      },
      "claimUnlockTime(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "the lock time for this claim. once past lock time a gema is minted"
      },
      "collectClaim(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)"
      },
      "createClaims(ComplexPoolLib.ComplexPoolData storage,uint256,uint256)": {
        "details": "attempt to create a claim using the given timeframe"
      },
      "createERC20Claims(ComplexPoolLib.ComplexPoolData storage,address,uint256,uint256)": {
        "details": "crate multiple gem claim using an erc20 token. this token must be tradeable in Uniswap or this call will fail"
      },
      "deposit(ComplexPoolLib.ComplexPoolData storage,address,uint256)": {
        "details": "deposit into pool"
      },
      "increaseDifficulty(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "increase the pool's difficulty by calculating the step increase portion and adding it to the eth price of the market"
      },
      "mintGenesisGems(ComplexPoolLib.ComplexPoolData storage,address,address)": {
        "details": "mint the genesis gems earned by the pools creator and funder"
      },
      "nextClaimHash(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "the hash of the next claim to be minted"
      },
      "nextClaimId(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "get the next claim id"
      },
      "nextGemHash(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "the hash of the next gem to be minted"
      },
      "nextGemId(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "get the next gem id"
      },
      "removeAllowedToken(ComplexPoolLib.ComplexPoolData storage,address)": {
        "details": "the public version of the above"
      },
      "stakedToken(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "the staked token if staking with erc20"
      },
      "updateInputRequirement(ComplexPoolLib.ComplexPoolData storage,uint256,address,address,uint8,uint256,uint256,bool)": {
        "details": "update input requirements"
      },
      "withdraw(ComplexPoolLib.ComplexPoolData storage,address,address,uint256)": {
        "details": "withdraw pool contents"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}