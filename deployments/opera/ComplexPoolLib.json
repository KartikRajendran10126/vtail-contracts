{
  "address": "0x4bF7Ef618eB8BB84f54D1B60327AC6242E4C4e03",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        }
      ],
      "name": "NFTGemClaimCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAssessed",
          "type": "uint256"
        }
      ],
      "name": "NFTGemClaimRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gemHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "NFTGemCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conversionRate",
          "type": "uint256"
        }
      ],
      "name": "NFTGemERC20ClaimCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAssessed",
          "type": "uint256"
        }
      ],
      "name": "NFTGemERC20ClaimRedeemed",
      "type": "event"
    }
  ],
  "transactionHash": "0x8b12e384196877df036a97581c4ac95dc3eb86b8d94ea2a560e19da4e47b8902",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x4bF7Ef618eB8BB84f54D1B60327AC6242E4C4e03",
    "transactionIndex": 0,
    "gasUsed": "4241906",
    "logsBloom": "0x
    "blockHash": "0x00001cfa0000041c6d9093d3008f76e2a29e684c07da5fbe58dea44cc4e7acd7",
    "transactionHash": "0x8b12e384196877df036a97581c4ac95dc3eb86b8d94ea2a560e19da4e47b8902",
    "logs": [],
    "blockNumber": 5367066,
    "cumulativeGasUsed": "4241906",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f1870fdc8b111c61e680f829eacac147",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"NFTGemClaimCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAssessed\",\"type\":\"uint256\"}],\"name\":\"NFTGemClaimRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gemHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"NFTGemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"name\":\"NFTGemERC20ClaimCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAssessed\",\"type\":\"uint256\"}],\"name\":\"NFTGemERC20ClaimRedeemed\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"NFTGemClaimCreated(address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Event generated when an NFT claim is created using ETH\"},\"NFTGemClaimRedeemed(address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Event generated when an NFT claim is redeemed\"},\"NFTGemCreated(address,address,uint256,uint256,uint256)\":{\"details\":\"Event generated when a gem is created\"},\"NFTGemERC20ClaimCreated(address,address,uint256,uint256,address,uint256,uint256)\":{\"details\":\"Event generated when an NFT claim is created using ERC20 tokens\"},\"NFTGemERC20ClaimRedeemed(address,address,uint256,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Event generated when an NFT claim is redeemed\"}},\"kind\":\"dev\",\"methods\":{\"addAllowedToken(ComplexPoolLib.ComplexPoolData storage,address)\":{\"details\":\"the public version of the above\"},\"addInputRequirement(ComplexPoolLib.ComplexPoolData storage,address,address,uint8,uint256,uint256,bool)\":{\"details\":\"add an input requirement for this token\"},\"addToken(ComplexPoolLib.ComplexPoolData storage,uint256,uint8)\":{\"details\":\"get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\"},\"allInputRequirements(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"input requirements at index\"},\"allInputRequirementsLength(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"number of input requirements\"},\"allTokenHashes(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\"},\"claimAmount(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"the claim amount for the given claim id\"},\"claimQuantity(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"the claim quantity (count of gems staked) for the given claim id\"},\"claimTokenAmount(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"claim token amount if paid using erc20\"},\"claimUnlockTime(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"the lock time for this claim. once past lock time a gema is minted\"},\"collectClaim(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)\"},\"createClaims(ComplexPoolLib.ComplexPoolData storage,uint256,uint256)\":{\"details\":\"attempt to create a claim using the given timeframe\"},\"createERC20Claims(ComplexPoolLib.ComplexPoolData storage,address,uint256,uint256)\":{\"details\":\"crate multiple gem claim using an erc20 token. this token must be tradeable in Uniswap or this call will fail\"},\"deposit(ComplexPoolLib.ComplexPoolData storage,address,uint256)\":{\"details\":\"deposit into pool\"},\"depositNFT(ComplexPoolLib.ComplexPoolData storage,address,uint256,uint256)\":{\"details\":\"deposit into pool\"},\"increaseDifficulty(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"increase the pool's difficulty by calculating the step increase portion and adding it to the eth price of the market\"},\"mintGenesisGems(ComplexPoolLib.ComplexPoolData storage,address,address)\":{\"details\":\"mint the genesis gems earned by the pools creator and funder\"},\"nextClaimHash(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"the hash of the next claim to be minted\"},\"nextClaimId(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"get the next claim id\"},\"nextGemHash(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"the hash of the next gem to be minted\"},\"nextGemId(ComplexPoolLib.ComplexPoolData storage)\":{\"details\":\"get the next gem id\"},\"removeAllowedToken(ComplexPoolLib.ComplexPoolData storage,address)\":{\"details\":\"the public version of the above\"},\"requireInputReqs(ComplexPoolLib.ComplexPoolData storage,address,uint256)\":{\"details\":\"Transfer a quantity of input reqs from to\"},\"stakedToken(ComplexPoolLib.ComplexPoolData storage,uint256)\":{\"details\":\"the staked token if staking with erc20\"},\"updateInputRequirement(ComplexPoolLib.ComplexPoolData storage,uint256,address,address,uint8,uint256,uint256,bool)\":{\"details\":\"update input requirements\"},\"withdraw(ComplexPoolLib.ComplexPoolData storage,address,address,uint256)\":{\"details\":\"withdraw pool contents\"},\"withdrawNFT(ComplexPoolLib.ComplexPoolData storage,address,address,uint256,uint256)\":{\"details\":\"withdraw pool contents\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/pool/ComplexPoolLib.sol\":\"ComplexPoolLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"src/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6e86542ba9c42a9ad56d81283264fd072ad07d7789113fd3482fe748a22428d6\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xacc13c3e2db32f3fbd54b5fe811690085679d84ca9c8a9b81374d811b30758b0\",\"license\":\"MIT\"},\"src/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6be5c98231ba90ad43bcf7dad027c1a1e7787220565aa3bb24becace05825664\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./INFTGemPool.sol\\\";\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTComplexGemPool {\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 amountPaid,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(address account, address pool, uint256 claimHash, uint256 gemHash, uint256 quantity);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function setVisible(bool visible) external;\\n\\n    function visible() external view returns (bool);\\n\\n    function setCategory(uint256 category) external;\\n\\n    function category() external view returns (uint256);\\n\\n    function setDescription(string memory description) external;\\n\\n    function description() external view returns (string memory);\\n\\n    function setValidateErc20(bool) external;\\n\\n    function validateErc20() external view returns (bool);\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external;\\n\\n    function collectClaim(uint256 claimHash) external;\\n\\n    function deposit(address erc20token, uint256 tokenAmount) external;\\n\\n    function withdraw(\\n        address erc20token,\\n        address destination,\\n        uint256 tokenAmount\\n    ) external;\\n\\n    function depositNFT(address erc20token, uint256 tokenId, uint256 tokenAmount) external;\\n\\n    function withdrawNFT(\\n        address erc1155token,\\n        address destination,\\n        uint256 tokenId,\\n        uint256 tokenAmount\\n    ) external;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdfedf9b6658b3018cae3288f51dd3acd5bb71ad14d143708e7f792186d64229b\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTComplexGemPoolData {\\n    function addInputRequirement(\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tokenId,\\n        uint256 minAmount,\\n        bool burn\\n    ) external;\\n\\n    function updateInputRequirement(\\n        uint256 ndx,\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tid,\\n        uint256 minAmount,\\n        bool burn\\n    ) external;\\n\\n    function allInputRequirementsLength() external returns (uint256);\\n\\n    function allInputRequirements(uint256 ndx)\\n        external\\n        returns (\\n            address,\\n            address,\\n            uint8,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function ethPrice() external view returns (uint256);\\n\\n    function minTime() external view returns (uint256);\\n\\n    function maxTime() external view returns (uint256);\\n\\n    function difficultyStep() external view returns (uint256);\\n\\n    function maxClaims() external view returns (uint256);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n\\n    function claimQuantity(uint256 claimId) external view returns (uint256);\\n\\n    function mintedCount() external view returns (uint256);\\n\\n    function totalStakedEth() external view returns (uint256);\\n\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n\\n    function tokenType(uint256 tokenHash) external view returns (uint8);\\n\\n    function allTokenHashesLength() external view returns (uint256);\\n\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n\\n    function nextClaimHash() external view returns (uint256);\\n\\n    function nextGemHash() external view returns (uint256);\\n\\n    function nextGemId() external view returns (uint256);\\n\\n    function nextClaimId() external view returns (uint256);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n\\n    function allowedTokens(uint256 idx) external view returns (address);\\n\\n    function isTokenAllowed(address token) external view returns (bool);\\n\\n    function addAllowedToken(address token) external;\\n\\n    function removeAllowedToken(address token) external;\\n}\\n\",\"keccak256\":\"0x57263a660d0d048f02c912bed74b25fa2e3a86c0390ecc7b65638f4f69a39849\",\"license\":\"MIT\"},\"src/interfaces/INFTGemFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTGemFeeManager {\\n    event DefaultFeeDivisorChanged(address indexed operator, uint256 oldValue, uint256 value);\\n    event FeeDivisorChanged(address indexed operator, address indexed token, uint256 oldValue, uint256 value);\\n    event ETHReceived(address indexed manager, address sender, uint256 value);\\n    event LiquidityChanged(address indexed manager, uint256 oldValue, uint256 value);\\n\\n    function liquidity(address token) external view returns (uint256);\\n\\n    function defaultLiquidity() external view returns (uint256);\\n\\n    function setDefaultLiquidity(uint256 _liquidityMult) external returns (uint256);\\n\\n    function feeDivisor(address token) external view returns (uint256);\\n\\n    function defaultFeeDivisor() external view returns (uint256);\\n\\n    function setFeeDivisor(address token, uint256 _feeDivisor) external returns (uint256);\\n\\n    function setDefaultFeeDivisor(uint256 _feeDivisor) external returns (uint256);\\n\\n    function ethBalanceOf() external view returns (uint256);\\n\\n    function balanceOf(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x29f10c923add51ed93bea2cb210c02fa4580f23e687113153f4f1aa3ff8a3e8e\",\"license\":\"MIT\"},\"src/interfaces/INFTGemGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemGovernor {\\n    event GovernanceTokenIssued(address indexed receiver, uint256 amount);\\n    event FeeUpdated(address indexed proposal, address indexed token, uint256 newFee);\\n    event AllowList(address indexed proposal, address indexed token, bool isBanned);\\n    event ProjectFunded(address indexed proposal, address indexed receiver, uint256 received);\\n    event StakingPoolCreated(\\n        address indexed proposal,\\n        address indexed pool,\\n        string symbol,\\n        string name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffStep,\\n        uint256 maxClaims,\\n        address alllowedToken\\n    );\\n\\n    function initialize(\\n        address _multitoken,\\n        address _factory,\\n        address _feeTracker,\\n        address _proposalFactory,\\n        address _swapHelper\\n    ) external;\\n\\n    function initialized() external returns (bool);\\n\\n    function createProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function destroyProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function executeProposal(address propAddress) external;\\n\\n    function issueInitialGovernanceTokens(address receiver) external returns (uint256);\\n\\n    function maybeIssueGovernanceToken(address receiver) external returns (uint256);\\n\\n    function issueFuelToken(address receiver, uint256 amount) external returns (uint256);\\n\\n    function createPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createNewPoolProposal(\\n        address,\\n        string memory,\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external returns (address);\\n\\n    function createChangeFeeProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (address);\\n\\n    function createFundProjectProposal(\\n        address,\\n        string memory,\\n        address,\\n        string memory,\\n        uint256\\n    ) external returns (address);\\n\\n    function createUpdateAllowlistProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        bool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x716d026badece2ce40b73568fa24b1cb836a4d828cb38697e48d9bed57e77beb\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function allHeldTokens(address holder, uint256 _idx) external view returns (uint256);\\n\\n    function allHeldTokensLength(address holder) external view returns (uint256);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx) external view returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token) external view returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token) external view returns (uint256);\\n\\n    function setTokenData(\\n        uint256 tokenHash,\\n        uint8 tokenType,\\n        address tokenPool\\n    ) external;\\n\\n    function getTokenData(uint256 tokenHash) external view returns (uint8, address);\\n}\\n\",\"keccak256\":\"0x1aa862437617abb8d35cd4120347de5c623ef4e84523fd3d0b914196f8b24e92\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPool {\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 amountPaid,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(address account, address pool, uint256 claimHash, uint256 gemHash, uint256 quantity);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function setVisible(bool visible) external;\\n\\n    function visible() external view returns (bool);\\n\\n    function setCategory(uint256 category) external;\\n\\n    function category() external view returns (uint256);\\n\\n    function setValidateErc20(bool) external;\\n\\n    function validateErc20() external view returns (bool);\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external;\\n\\n    function collectClaim(uint256 claimHash) external;\\n\\n    function rescue(address erc20token, uint256 tokenAmount) external;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6c2ba95bb3c2eafbc9d7bf749cafc943f7d2476a89b5a03744f3fc53b64cde96\",\"license\":\"MIT\"},\"src/interfaces/ISwapQueryHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface ISwapQueryHelper {\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function factory() external view returns (address);\\n\\n    function COIN() external pure returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function hasPool(address token) external view returns (bool);\\n\\n    function getReserves(address pair) external view returns (uint256, uint256);\\n\\n    function getPathForCoinToToken(address token) external pure returns (address[] memory);\\n\\n    function setFactory(address f) external;\\n}\\n\",\"keccak256\":\"0x36e47f43dc3f309d516f238f4744143e1d2cb23e0206729103478534960e7693\",\"license\":\"MIT\"},\"src/libs/AddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @notice Key sets with enumeration and delete. Uses mappings for random\\n * and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced.\\n * @dev Sets are unordered. Delete operations reorder keys. All operations have a\\n * fixed gas cost at any scale, O(1).\\n * author: Rob Hitchens\\n */\\n\\nlibrary AddressSet {\\n    struct Set {\\n        mapping(address => uint256) keyPointers;\\n        address[] keyList;\\n    }\\n\\n    /**\\n     * @notice insert a key.\\n     * @dev duplicate keys are not permitted.\\n     * @param self storage pointer to a Set.\\n     * @param key value to insert.\\n     */\\n    function insert(Set storage self, address key) internal {\\n        require(!exists(self, key), \\\"AddressSet: key already exists in the set.\\\");\\n        self.keyList.push(key);\\n        self.keyPointers[key] = self.keyList.length - 1;\\n    }\\n\\n    /**\\n     * @notice remove a key.\\n     * @dev key to remove must exist.\\n     * @param self storage pointer to a Set.\\n     * @param key value to remove.\\n     */\\n    function remove(Set storage self, address key) internal {\\n        require(exists(self, key), \\\"AddressSet: key does not exist in the set.\\\");\\n        uint256 last = count(self) - 1;\\n        uint256 rowToReplace = self.keyPointers[key];\\n        if (rowToReplace != last) {\\n            address keyToMove = self.keyList[last];\\n            self.keyPointers[keyToMove] = rowToReplace;\\n            self.keyList[rowToReplace] = keyToMove;\\n            self.keyPointers[key] = 0;\\n            delete self.keyPointers[key];\\n            delete self.keyList[self.keyList.length - 1];\\n        } else {\\n            self.keyPointers[key] = 0;\\n            delete self.keyPointers[key];\\n            delete self.keyList;\\n        }\\n    }\\n\\n    /**\\n     * @notice count the keys.\\n     * @param self storage pointer to a Set.\\n     */\\n    function count(Set storage self) internal view returns (uint256) {\\n        return (self.keyList.length);\\n    }\\n\\n    /**\\n     * @notice check if a key is in the Set.\\n     * @param self storage pointer to a Set.\\n     * @param key value to check.\\n     * @return bool true: Set member, false: not a Set member.\\n     */\\n    function exists(Set storage self, address key) internal view returns (bool) {\\n        if (self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */\\n    function keyAtIndex(Set storage self, uint256 index) internal view returns (address) {\\n        return self.keyList[index];\\n    }\\n}\\n\",\"keccak256\":\"0xc2cf228fcaa5b9e053037a5fea5a05453007924833cc575186d48391b904e6cd\",\"license\":\"MIT\"},\"src/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x688b57d8a4d5b6221b74de43b603ac03191e89f278c361ea7ceb257268882c4b\",\"license\":\"MIT\"},\"src/pool/ComplexPoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPoolData.sol\\\";\\nimport \\\"../interfaces/ISwapQueryHelper.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPool.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\nimport \\\"../libs/AddressSet.sol\\\";\\nimport \\\"../libs/SafeMath.sol\\\";\\n\\nlibrary ComplexPoolLib {\\n    using SafeMath for uint256;\\n    using AddressSet for AddressSet.Set;\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 amountPaid,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 quantity,\\n        uint256 feeAssessed\\n    );\\n\\n    struct InputRequirement {\\n        address token;\\n        address pool;\\n        uint8 inputType; // 1 = erc20, 2 = erc1155, 3 = pool\\n        uint256 tokenId; // if erc20 slot 0 contains required amount\\n        uint256 minVal;\\n        bool burn;\\n    }\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(address account, address pool, uint256 claimHash, uint256 gemHash, uint256 quantity);\\n\\n    struct ComplexPoolData {\\n        // governor and multitoken target\\n        address pool;\\n        address multitoken;\\n        address governor;\\n        address feeTracker;\\n        address swapHelper;\\n        uint256 category;\\n        bool visible;\\n        // it all starts with a symbol and a nams\\n        string symbol;\\n        string name;\\n        string description;\\n        // magic economy numbers\\n        uint256 ethPrice;\\n        uint256 minTime;\\n        uint256 maxTime;\\n        uint256 diffstep;\\n        uint256 maxClaims;\\n        uint256 maxQuantityPerClaim;\\n        bool validateerc20;\\n        mapping(uint256 => uint8) tokenTypes;\\n        mapping(uint256 => uint256) tokenIds;\\n        uint256[] tokenHashes;\\n        // next ids of things\\n        uint256 nextGemIdVal;\\n        uint256 nextClaimIdVal;\\n        uint256 totalStakedEth;\\n        // records claim timestamp / ETH value / ERC token and amount sent\\n        mapping(uint256 => uint256) claimLockTimestamps;\\n        mapping(uint256 => address) claimLockToken;\\n        mapping(uint256 => uint256) claimAmountPaid;\\n        mapping(uint256 => uint256) claimQuant;\\n        mapping(uint256 => uint256) claimTokenAmountPaid;\\n        // input NFTs storage\\n        mapping(uint256 => uint256[]) claimIds;\\n        mapping(uint256 => uint256[]) claimQuantities;\\n        mapping(address => bool) controllers;\\n        InputRequirement[] inputRequirements;\\n        AddressSet.Set allowedTokens;\\n    }\\n\\n    /**\\n     * @dev Transfer a quantity of input reqs from to\\n     */\\n    function requireInputReqs(\\n        ComplexPoolData storage self,\\n        address account,\\n        uint256 quantity\\n    ) public view {\\n        address gemtoken;\\n        for (uint256 i = 0; i < self.inputRequirements.length; i++) {\\n            if (self.inputRequirements[i].inputType == 1) {\\n                require(\\n                    IERC20(self.inputRequirements[i].token).balanceOf(account) >=\\n                        self.inputRequirements[i].minVal.mul(quantity),\\n                    \\\"UNMET_ERC20_REQUIREMENT\\\"\\n                );\\n            } else if (self.inputRequirements[i].inputType == 2) {\\n                require(\\n                    IERC1155(self.inputRequirements[i].token).balanceOf(account, self.inputRequirements[i].tokenId) >=\\n                        self.inputRequirements[i].minVal.mul(quantity),\\n                    \\\"UNMET_ERC1155_REQUIREMENT\\\"\\n                );\\n            } else if (self.inputRequirements[i].inputType == 3) {\\n                uint256 required = self.inputRequirements[i].minVal.mul(quantity);\\n                uint256 hashCount = INFTGemMultiToken(self.inputRequirements[i].token).allHeldTokensLength(account);\\n                for (uint256 j = 0; j < hashCount; j++) {\\n                    uint256 hashAt = INFTGemMultiToken(self.inputRequirements[i].token).allHeldTokens(account, j);\\n                    if (INFTComplexGemPoolData(self.inputRequirements[i].pool).tokenType(hashAt) == 2) {\\n                        gemtoken = self.inputRequirements[i].token;\\n                        uint256 bal = IERC1155(self.inputRequirements[i].token).balanceOf(account, hashAt);\\n                        if (bal > required) {\\n                            bal = required;\\n                        }\\n                        if (bal == 0) {\\n                            continue;\\n                        }\\n                        required = required - bal;\\n                    }\\n                    if (required == 0) {\\n                        break;\\n                    }\\n                }\\n                require(required == 0, \\\"UNMET_GEM_REQUIREMENT\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer a quantity of input reqs from to\\n     */\\n    function transferInputReqsFrom(\\n        ComplexPoolData storage self,\\n        uint256 claimHash,\\n        address from,\\n        address to,\\n        uint256 quantity,\\n        bool outTx\\n    ) internal {\\n        address gemtoken;\\n        for (uint256 i = 0; i < self.inputRequirements.length; i++) {\\n            if (self.inputRequirements[i].inputType == 1) {\\n                IERC20 token = IERC20(self.inputRequirements[i].token);\\n                address toAddress = to;\\n                if (outTx == false || self.inputRequirements[i].burn == false) {\\n                    token.transferFrom(from, toAddress, self.inputRequirements[i].minVal.mul(quantity));\\n                }\\n            } else if (self.inputRequirements[i].inputType == 2) {\\n                IERC1155 token = IERC1155(self.inputRequirements[i].token);\\n                if (outTx == false || self.inputRequirements[i].burn == false) {\\n                    token.safeTransferFrom(\\n                        from,\\n                        to,\\n                        self.inputRequirements[i].tokenId,\\n                        self.inputRequirements[i].minVal.mul(quantity),\\n                        \\\"\\\"\\n                    );\\n                }\\n            } else if (self.inputRequirements[i].inputType == 3) {\\n                uint256 required = self.inputRequirements[i].minVal.mul(quantity);\\n                uint256 hashCount = INFTGemMultiToken(self.inputRequirements[i].token).allHeldTokensLength(from);\\n                if (outTx == false || self.inputRequirements[i].burn == false) {\\n                    for (uint256 j = 0; j < hashCount; j++) {\\n                        uint256 hashAt = INFTGemMultiToken(self.inputRequirements[i].token).allHeldTokens(from, j);\\n                        if (INFTComplexGemPoolData(self.inputRequirements[i].pool).tokenType(hashAt) == 2) {\\n                            gemtoken = self.inputRequirements[i].token;\\n                            uint256 bal = IERC1155(self.inputRequirements[i].token).balanceOf(from, hashAt);\\n                            if (bal > required) {\\n                                bal = required;\\n                            }\\n                            if (bal == 0) {\\n                                continue;\\n                            }\\n                            self.claimIds[claimHash].push(hashAt);\\n                            self.claimQuantities[claimHash].push(bal);\\n                            required = required - bal;\\n                        }\\n                        if (required == 0) {\\n                            break;\\n                        }\\n                    }\\n                    require(required == 0, \\\"UNMET_REQUIREMENTS\\\");\\n                }\\n            }\\n        }\\n\\n        if (self.claimIds[claimHash].length > 0 && gemtoken != address(0)) {\\n            IERC1155(gemtoken).safeBatchTransferFrom(\\n                from,\\n                to,\\n                self.claimIds[claimHash],\\n                self.claimQuantities[claimHash],\\n                \\\"\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev add an input requirement for this token\\n     */\\n    function addInputRequirement(\\n        ComplexPoolData storage self,\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tokenId,\\n        uint256 minAmount,\\n        bool burn\\n    ) public {\\n        require(token != address(0), \\\"INVALID_TOKEN\\\");\\n        require(inputType == 1 || inputType == 2 || inputType == 3, \\\"INVALID_TOKENTYPE\\\");\\n        require((inputType == 3 && pool != address(0)) || inputType != 3, \\\"INVALID_POOL\\\");\\n        require(\\n            (inputType == 1 && tokenId == 0) || inputType == 2 || (inputType == 3 && tokenId == 0),\\n            \\\"INVALID_TOKENID\\\"\\n        );\\n        require(minAmount != 0, \\\"ZERO_AMOUNT\\\");\\n        self.inputRequirements.push(InputRequirement(token, pool, inputType, tokenId, minAmount, burn));\\n    }\\n\\n    /**\\n     * @dev update input requirements\\n     */\\n    function updateInputRequirement(\\n        ComplexPoolData storage self,\\n        uint256 ndx,\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tid,\\n        uint256 minAmount,\\n        bool burn\\n    ) public {\\n        require(ndx < self.inputRequirements.length, \\\"OUT_OF_RANGE\\\");\\n        require(token != address(0), \\\"INVALID_TOKEN\\\");\\n        require(inputType == 1 || inputType == 2 || inputType == 3, \\\"INVALID_TOKENTYPE\\\");\\n        require((inputType == 3 && pool != address(0)) || inputType != 3, \\\"INVALID_POOL\\\");\\n        require((inputType == 1 && tid == 0) || inputType == 2 || (inputType == 3 && tid == 0), \\\"INVALID_TOKENID\\\");\\n        require(minAmount != 0, \\\"ZERO_AMOUNT\\\");\\n        self.inputRequirements[ndx] = InputRequirement(token, pool, inputType, tid, minAmount, burn);\\n    }\\n\\n    /**\\n     * @dev number of input requirements\\n     */\\n    function allInputRequirementsLength(ComplexPoolData storage self) public view returns (uint256) {\\n        return self.inputRequirements.length;\\n    }\\n\\n    /**\\n     * @dev input requirements at index\\n     */\\n    function allInputRequirements(ComplexPoolData storage self, uint256 ndx)\\n        public\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint8,\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        require(ndx < self.inputRequirements.length, \\\"OUT_OF_RANGE\\\");\\n        InputRequirement memory req = self.inputRequirements[ndx];\\n        return (req.token, req.pool, req.inputType, req.tokenId, req.minVal, req.burn);\\n    }\\n\\n    /**\\n     * @dev attempt to create a claim using the given timeframe\\n     */\\n    function createClaims(\\n        ComplexPoolData storage self,\\n        uint256 timeframe,\\n        uint256 count\\n    ) public {\\n        // minimum timeframe\\n        require(timeframe >= self.minTime, \\\"TIMEFRAME_TOO_SHORT\\\");\\n        // no ETH\\n        require(msg.value != 0, \\\"ZERO_BALANCE\\\");\\n        // zero qty\\n        require(count != 0, \\\"ZERO_QUANTITY\\\");\\n        // maximum timeframe\\n        require((self.maxTime != 0 && timeframe <= self.maxTime) || self.maxTime == 0, \\\"TIMEFRAME_TOO_LONG\\\");\\n\\n        uint256 adjustedBalance = msg.value.div(count);\\n        // cost given this timeframe\\n\\n        uint256 cost = self.ethPrice.mul(self.minTime).div(timeframe);\\n        require(adjustedBalance >= cost, \\\"INSUFFICIENT_ETH\\\");\\n\\n        // get the nest claim hash, revert if no more claims\\n        uint256 claimHash = nextClaimHash(self);\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // require the user to have the input requirements\\n        requireInputReqs(self, msg.sender, count);\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(self.multitoken).mint(msg.sender, claimHash, 1);\\n        INFTGemMultiToken(self.multitoken).setTokenData(claimHash, 1, address(this));\\n        addToken(self, claimHash, 1);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 claimUnlockTime = block.timestamp.add(timeframe);\\n        self.claimLockTimestamps[claimHash] = claimUnlockTime;\\n        self.claimAmountPaid[claimHash] = cost.mul(count);\\n        self.claimQuant[claimHash] = count;\\n\\n        // tranasfer NFT input requirements from user to pool\\n        transferInputReqsFrom(self, claimHash, msg.sender, address(self.pool), count, false);\\n\\n        // maybe mint a governance token for the claimant\\n        INFTGemGovernor(self.governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(self.governor).issueFuelToken(msg.sender, cost);\\n\\n        emit NFTGemClaimCreated(msg.sender, address(self.pool), claimHash, timeframe, count, cost);\\n\\n        // increase the staked eth balance\\n        self.totalStakedEth = self.totalStakedEth.add(cost.mul(count));\\n\\n        // return the extra to sender\\n        if (msg.value > cost.mul(count)) {\\n            (bool success, ) = payable(msg.sender).call{value: msg.value.sub(cost.mul(count))}(\\\"\\\");\\n            require(success, \\\"REFUND_FAILED\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev crate multiple gem claim using an erc20 token. this token must be tradeable in Uniswap or this call will fail\\n     */\\n    function createERC20Claims(\\n        ComplexPoolData storage self,\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) public {\\n        // must be a valid address\\n        require(erc20token != address(0), \\\"INVALID_ERC20_TOKEN\\\");\\n\\n        // token is allowed\\n        require(\\n            (self.allowedTokens.count() > 0 && self.allowedTokens.exists(erc20token)) ||\\n                self.allowedTokens.count() == 0,\\n            \\\"TOKEN_DISALLOWED\\\"\\n        );\\n\\n        // zero qty\\n        require(count != 0, \\\"ZERO_QUANTITY\\\");\\n\\n        // Uniswap pool must exist\\n        require(ISwapQueryHelper(self.swapHelper).hasPool(erc20token) == true, \\\"NO_UNISWAP_POOL\\\");\\n\\n        // must have an amount specified\\n        require(tokenAmount >= 0, \\\"NO_PAYMENT_INCLUDED\\\");\\n\\n        // get a quote in ETH for the given token.\\n        (uint256 ethereum, uint256 tokenReserve, uint256 ethReserve) =\\n            ISwapQueryHelper(self.swapHelper).coinQuote(erc20token, tokenAmount.div(count));\\n\\n        if (self.validateerc20 == true) {\\n            // make sure the convertible amount is has reserves > 100x the token\\n            require(ethReserve >= ethereum.mul(100).mul(count), \\\"INSUFFICIENT_ETH_LIQUIDITY\\\");\\n\\n            // make sure the convertible amount is has reserves > 100x the token\\n            require(tokenReserve >= tokenAmount.mul(100).mul(count), \\\"INSUFFICIENT_TOKEN_LIQUIDITY\\\");\\n        }\\n\\n        // make sure the convertible amount is less than max price\\n        require(ethereum <= self.ethPrice, \\\"OVERPAYMENT\\\");\\n\\n        // calculate the maturity time given the converted eth\\n        uint256 maturityTime = self.ethPrice.mul(self.minTime).div(ethereum);\\n\\n        // make sure the convertible amount is less than max price\\n        require(maturityTime >= self.minTime, \\\"INSUFFICIENT_TIME\\\");\\n\\n        // get the next claim hash, revert if no more claims\\n        uint256 claimHash = nextClaimHash(self);\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(self.multitoken).mint(msg.sender, claimHash, 1);\\n        INFTGemMultiToken(self.multitoken).setTokenData(claimHash, 1, address(this));\\n        addToken(self, claimHash, 1);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 claimUnlockTime = block.timestamp.add(maturityTime);\\n        self.claimLockTimestamps[claimHash] = claimUnlockTime;\\n        self.claimAmountPaid[claimHash] = ethereum;\\n        self.claimLockToken[claimHash] = erc20token;\\n        self.claimTokenAmountPaid[claimHash] = tokenAmount;\\n        self.claimQuant[claimHash] = count;\\n\\n        // tranasfer NFT input requirements from user to pool\\n        transferInputReqsFrom(self, claimHash, msg.sender, address(self.pool), count, false);\\n\\n        // increase staked eth amount\\n        self.totalStakedEth = self.totalStakedEth.add(ethereum);\\n\\n        // maybe mint a governance token for the claimant\\n        INFTGemGovernor(self.governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(self.governor).issueFuelToken(msg.sender, ethereum);\\n\\n        // emit a message indicating that an erc20 claim has been created\\n        emit NFTGemERC20ClaimCreated(\\n            msg.sender,\\n            address(self.pool),\\n            claimHash,\\n            maturityTime,\\n            erc20token,\\n            count,\\n            ethereum\\n        );\\n\\n        // transfer the caller's ERC20 tokens into the pool\\n        IERC20(erc20token).transferFrom(msg.sender, address(self.pool), tokenAmount);\\n    }\\n\\n    /**\\n     * @dev collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)\\n     */\\n    function collectClaim(ComplexPoolData storage self, uint256 claimHash) public {\\n        // validation checks - disallow if not owner (holds coin with claimHash)\\n        // or if the unlockTime amd unlockPaid data is in an invalid state\\n        require(IERC1155(self.multitoken).balanceOf(msg.sender, claimHash) == 1, \\\"NOT_CLAIM_OWNER\\\");\\n        uint256 unlockTime = self.claimLockTimestamps[claimHash];\\n        uint256 unlockPaid = self.claimAmountPaid[claimHash];\\n        require(unlockTime != 0 && unlockPaid > 0, \\\"INVALID_CLAIM\\\");\\n\\n        // grab the erc20 token info if there is any\\n        address tokenUsed = self.claimLockToken[claimHash];\\n        uint256 unlockTokenPaid = self.claimTokenAmountPaid[claimHash];\\n\\n        // check the maturity of the claim - only issue gem if mature\\n        bool isMature = unlockTime < block.timestamp;\\n\\n        //  burn claim and transfer money back to user\\n        INFTGemMultiToken(self.multitoken).burn(msg.sender, claimHash, 1);\\n\\n        // if they used erc20 tokens stake their claim, return their tokens\\n        if (tokenUsed != address(0)) {\\n            // calculate fee portion using fee tracker\\n            uint256 feePortion = 0;\\n            if (isMature == true) {\\n                uint256 poolDiv = INFTGemFeeManager(self.feeTracker).feeDivisor(address(self.pool));\\n                uint256 divisor = INFTGemFeeManager(self.feeTracker).feeDivisor(tokenUsed);\\n                uint256 feeNum = poolDiv != divisor ? divisor : poolDiv;\\n                feePortion = unlockTokenPaid.div(feeNum);\\n            }\\n            // assess a fee for minting the NFT. Fee is collectec in fee tracker\\n            IERC20(tokenUsed).transferFrom(address(self.pool), self.feeTracker, feePortion);\\n            // send the principal minus fees to the caller\\n            IERC20(tokenUsed).transferFrom(address(self.pool), msg.sender, unlockTokenPaid.sub(feePortion));\\n\\n            // emit an event that the claim was redeemed for ERC20\\n            emit NFTGemERC20ClaimRedeemed(\\n                msg.sender,\\n                address(self.pool),\\n                claimHash,\\n                tokenUsed,\\n                unlockPaid,\\n                unlockTokenPaid,\\n                self.claimQuant[claimHash],\\n                feePortion\\n            );\\n        } else {\\n            // calculate fee portion using fee tracker\\n            uint256 feePortion = 0;\\n            if (isMature == true) {\\n                uint256 divisor = INFTGemFeeManager(self.feeTracker).feeDivisor(address(0));\\n                feePortion = unlockPaid.div(divisor);\\n            }\\n            // transfer the ETH fee to fee tracker\\n            payable(self.feeTracker).transfer(feePortion);\\n            // transfer the ETH back to user\\n            payable(msg.sender).transfer(unlockPaid.sub(feePortion));\\n\\n            // emit an event that the claim was redeemed for ETH\\n            emit NFTGemClaimRedeemed(\\n                msg.sender,\\n                address(self.pool),\\n                claimHash,\\n                unlockPaid,\\n                self.claimQuant[claimHash],\\n                feePortion\\n            );\\n        }\\n\\n        // tranasfer NFT input requirements from user to pool\\n        transferInputReqsFrom(self, claimHash, address(self.pool), msg.sender, self.claimQuant[claimHash], true);\\n\\n        // deduct the total staked ETH balance of the pool\\n        self.totalStakedEth = self.totalStakedEth.sub(unlockPaid);\\n\\n        // if all this is happening before the unlocktime then we exit\\n        // without minting a gem because the user is withdrawing early\\n        if (!isMature) {\\n            return;\\n        }\\n\\n        // get the next gem hash, increase the staking sifficulty\\n        // for the pool, and mint a gem token back to account\\n        uint256 nextHash = nextGemHash(self);\\n\\n        // mint the gem\\n        INFTGemMultiToken(self.multitoken).mint(msg.sender, nextHash, self.claimQuant[claimHash]);\\n        addToken(self, nextHash, 2);\\n\\n        // maybe mint a governance token\\n        INFTGemGovernor(self.governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(self.governor).issueFuelToken(msg.sender, unlockPaid);\\n\\n        // emit an event about a gem getting created\\n        emit NFTGemCreated(msg.sender, address(self.pool), claimHash, nextHash, self.claimQuant[claimHash]);\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function addToken(\\n        ComplexPoolData storage self,\\n        uint256 tokenHash,\\n        uint8 tt\\n    ) public {\\n        require(tt == 1 || tt == 2, \\\"INVALID_TOKENTYPE\\\");\\n        self.tokenHashes.push(tokenHash);\\n        self.tokenTypes[tokenHash] = tt;\\n        self.tokenIds[tokenHash] = tt == 1 ? nextClaimId(self) : nextGemId(self);\\n        INFTGemMultiToken(self.multitoken).setTokenData(tokenHash, tt, address(this));\\n        if (tt == 2) {\\n            increaseDifficulty(self);\\n        }\\n    }\\n\\n    /**\\n     * @dev get the next claim id\\n     */\\n    function nextClaimId(ComplexPoolData storage self) public returns (uint256) {\\n        uint256 ncId = self.nextClaimIdVal;\\n        self.nextClaimIdVal = self.nextClaimIdVal.add(1);\\n        return ncId;\\n    }\\n\\n    /**\\n     * @dev get the next gem id\\n     */\\n    function nextGemId(ComplexPoolData storage self) public returns (uint256) {\\n        uint256 ncId = self.nextGemIdVal;\\n        self.nextGemIdVal = self.nextGemIdVal.add(1);\\n        return ncId;\\n    }\\n\\n    /**\\n     * @dev increase the pool's difficulty by calculating the step increase portion and adding it to the eth price of the market\\n     */\\n    function increaseDifficulty(ComplexPoolData storage self) public {\\n        uint256 diffIncrease = self.ethPrice.div(self.diffstep);\\n        self.ethPrice = self.ethPrice.add(diffIncrease);\\n    }\\n\\n    /**\\n     * @dev the hash of the next gem to be minted\\n     */\\n    function nextGemHash(ComplexPoolData storage self) public view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(\\\"gem\\\", address(self.pool), self.nextGemIdVal)));\\n    }\\n\\n    /**\\n     * @dev the hash of the next claim to be minted\\n     */\\n    function nextClaimHash(ComplexPoolData storage self) public view returns (uint256) {\\n        return\\n            (self.maxClaims != 0 && self.nextClaimIdVal <= self.maxClaims) || self.maxClaims == 0\\n                ? uint256(keccak256(abi.encodePacked(\\\"claim\\\", address(self.pool), self.nextClaimIdVal)))\\n                : 0;\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function allTokenHashes(ComplexPoolData storage self, uint256 ndx) public view returns (uint256) {\\n        return self.tokenHashes[ndx];\\n    }\\n\\n    /**\\n     * @dev the claim amount for the given claim id\\n     */\\n    function claimAmount(ComplexPoolData storage self, uint256 claimHash) public view returns (uint256) {\\n        return self.claimAmountPaid[claimHash];\\n    }\\n\\n    /**\\n     * @dev the claim quantity (count of gems staked) for the given claim id\\n     */\\n    function claimQuantity(ComplexPoolData storage self, uint256 claimHash) public view returns (uint256) {\\n        return self.claimQuant[claimHash];\\n    }\\n\\n    /**\\n     * @dev the lock time for this claim. once past lock time a gema is minted\\n     */\\n    function claimUnlockTime(ComplexPoolData storage self, uint256 claimHash) public view returns (uint256) {\\n        return self.claimLockTimestamps[claimHash];\\n    }\\n\\n    /**\\n     * @dev claim token amount if paid using erc20\\n     */\\n    function claimTokenAmount(ComplexPoolData storage self, uint256 claimHash) public view returns (uint256) {\\n        return self.claimTokenAmountPaid[claimHash];\\n    }\\n\\n    /**\\n     * @dev the staked token if staking with erc20\\n     */\\n    function stakedToken(ComplexPoolData storage self, uint256 claimHash) public view returns (address) {\\n        return self.claimLockToken[claimHash];\\n    }\\n\\n    /**\\n     * @dev the public version of the above\\n     */\\n    function addAllowedToken(ComplexPoolData storage self, address token) public {\\n        if (!self.allowedTokens.exists(token)) {\\n            self.allowedTokens.insert(token);\\n        }\\n    }\\n\\n    /**\\n     * @dev the public version of the above\\n     */\\n    function removeAllowedToken(ComplexPoolData storage self, address token) public {\\n        if (self.allowedTokens.exists(token)) {\\n            self.allowedTokens.remove(token);\\n        }\\n    }\\n\\n    /**\\n     * @dev deposit into pool\\n     */\\n    function deposit(\\n        ComplexPoolData storage self,\\n        address erc20token,\\n        uint256 tokenAmount\\n    ) public {\\n        if (erc20token == address(0)) {\\n            require(msg.sender.balance >= tokenAmount);\\n            self.totalStakedEth = self.totalStakedEth.add(msg.sender.balance);\\n        } else {\\n            require(IERC20(erc20token).balanceOf(msg.sender) >= tokenAmount);\\n            IERC20(erc20token).transferFrom(msg.sender, address(self.pool), tokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev deposit into pool\\n     */\\n    function depositNFT(\\n        ComplexPoolData storage self,\\n        address erc1155token,\\n        uint256 tokenId,\\n        uint256 tokenAmount\\n    ) public {\\n        require(IERC1155(erc1155token).balanceOf(msg.sender, tokenId) >= tokenAmount);\\n        IERC1155(erc1155token).safeTransferFrom(msg.sender, address(self.pool), tokenId, tokenAmount, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev withdraw pool contents\\n     */\\n    function withdraw(\\n        ComplexPoolData storage self,\\n        address erc20token,\\n        address destination,\\n        uint256 tokenAmount\\n    ) public {\\n        require(destination != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(self.controllers[msg.sender] == true || msg.sender == self.governor, \\\"UNAUTHORIZED\\\");\\n        if (erc20token == address(0)) {\\n            payable(destination).transfer(tokenAmount);\\n        } else {\\n            IERC20(erc20token).transferFrom(address(self.pool), address(destination), tokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev withdraw pool contents\\n     */\\n    function withdrawNFT(\\n        ComplexPoolData storage self,\\n        address erc1155token,\\n        address destination,\\n        uint256 tokenId,\\n        uint256 tokenAmount\\n    ) public {\\n        require(self.controllers[msg.sender] == true || msg.sender == self.governor, \\\"UNAUTHORIZED\\\");\\n        require(erc1155token != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(destination != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(IERC1155(erc1155token).balanceOf(address(self.pool), tokenId) >= tokenAmount, \\\"INSUFFICIENT_BALANCE\\\");\\n        IERC1155(erc1155token).safeTransferFrom(address(self.pool), address(destination), tokenId, tokenAmount, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev mint the genesis gems earned by the pools creator and funder\\n     */\\n    function mintGenesisGems(\\n        ComplexPoolData storage self,\\n        address creator,\\n        address funder\\n    ) public {\\n        require(self.multitoken != address(0), \\\"NO_MULTITOKEN\\\");\\n        require(creator != address(0) && funder != address(0), \\\"ZERO_DESTINATION\\\");\\n        require(self.nextGemIdVal == 0, \\\"ALREADY_MINTED\\\");\\n\\n        uint256 gemHash = nextGemHash(self);\\n        INFTGemMultiToken(self.multitoken).mint(creator, gemHash, 1);\\n        addToken(self, gemHash, 2);\\n\\n        gemHash = nextGemHash(self);\\n        INFTGemMultiToken(self.multitoken).mint(creator, gemHash, 1);\\n        addToken(self, gemHash, 2);\\n    }\\n}\\n\",\"keccak256\":\"0x4eedcce42b778acc5aa63d5e0c70f3fb1a6950b59da3463c0164c299114e0c80\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "libraries": {
    "AddressSet": "0x86fca4de79B7DA4138cB961e0ce32FF17Bb1e3B3",
    "SafeMath": "0x753f0df0a61c5F8A0eB31c6Bf6e7363943Eb225B"
  },
  "devdoc": {
    "events": {
      "NFTGemClaimCreated(address,address,uint256,uint256,uint256,uint256)": {
        "details": "Event generated when an NFT claim is created using ETH"
      },
      "NFTGemClaimRedeemed(address,address,uint256,uint256,uint256,uint256)": {
        "details": "Event generated when an NFT claim is redeemed"
      },
      "NFTGemCreated(address,address,uint256,uint256,uint256)": {
        "details": "Event generated when a gem is created"
      },
      "NFTGemERC20ClaimCreated(address,address,uint256,uint256,address,uint256,uint256)": {
        "details": "Event generated when an NFT claim is created using ERC20 tokens"
      },
      "NFTGemERC20ClaimRedeemed(address,address,uint256,address,uint256,uint256,uint256,uint256)": {
        "details": "Event generated when an NFT claim is redeemed"
      }
    },
    "kind": "dev",
    "methods": {
      "addAllowedToken(ComplexPoolLib.ComplexPoolData storage,address)": {
        "details": "the public version of the above"
      },
      "addInputRequirement(ComplexPoolLib.ComplexPoolData storage,address,address,uint8,uint256,uint256,bool)": {
        "details": "add an input requirement for this token"
      },
      "addToken(ComplexPoolLib.ComplexPoolData storage,uint256,uint8)": {
        "details": "get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem"
      },
      "allInputRequirements(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "input requirements at index"
      },
      "allInputRequirementsLength(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "number of input requirements"
      },
      "allTokenHashes(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem"
      },
      "claimAmount(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "the claim amount for the given claim id"
      },
      "claimQuantity(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "the claim quantity (count of gems staked) for the given claim id"
      },
      "claimTokenAmount(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "claim token amount if paid using erc20"
      },
      "claimUnlockTime(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "the lock time for this claim. once past lock time a gema is minted"
      },
      "collectClaim(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)"
      },
      "createClaims(ComplexPoolLib.ComplexPoolData storage,uint256,uint256)": {
        "details": "attempt to create a claim using the given timeframe"
      },
      "createERC20Claims(ComplexPoolLib.ComplexPoolData storage,address,uint256,uint256)": {
        "details": "crate multiple gem claim using an erc20 token. this token must be tradeable in Uniswap or this call will fail"
      },
      "deposit(ComplexPoolLib.ComplexPoolData storage,address,uint256)": {
        "details": "deposit into pool"
      },
      "depositNFT(ComplexPoolLib.ComplexPoolData storage,address,uint256,uint256)": {
        "details": "deposit into pool"
      },
      "increaseDifficulty(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "increase the pool's difficulty by calculating the step increase portion and adding it to the eth price of the market"
      },
      "mintGenesisGems(ComplexPoolLib.ComplexPoolData storage,address,address)": {
        "details": "mint the genesis gems earned by the pools creator and funder"
      },
      "nextClaimHash(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "the hash of the next claim to be minted"
      },
      "nextClaimId(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "get the next claim id"
      },
      "nextGemHash(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "the hash of the next gem to be minted"
      },
      "nextGemId(ComplexPoolLib.ComplexPoolData storage)": {
        "details": "get the next gem id"
      },
      "removeAllowedToken(ComplexPoolLib.ComplexPoolData storage,address)": {
        "details": "the public version of the above"
      },
      "requireInputReqs(ComplexPoolLib.ComplexPoolData storage,address,uint256)": {
        "details": "Transfer a quantity of input reqs from to"
      },
      "stakedToken(ComplexPoolLib.ComplexPoolData storage,uint256)": {
        "details": "the staked token if staking with erc20"
      },
      "updateInputRequirement(ComplexPoolLib.ComplexPoolData storage,uint256,address,address,uint8,uint256,uint256,bool)": {
        "details": "update input requirements"
      },
      "withdraw(ComplexPoolLib.ComplexPoolData storage,address,address,uint256)": {
        "details": "withdraw pool contents"
      },
      "withdrawNFT(ComplexPoolLib.ComplexPoolData storage,address,address,uint256,uint256)": {
        "details": "withdraw pool contents"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}