{
  "address": "0xE62df3f63880D4e39dD940d29690D84977cD43C0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COIN",
      "outputs": [
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "coinQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethereum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethReserve",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "fac",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPathForCoinToToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "hasPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "f",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8a6777c21336852fdbcf056d8c07204f33893594ac2064e2a3c85d96ec53724f",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0xE62df3f63880D4e39dD940d29690D84977cD43C0",
    "transactionIndex": 0,
    "gasUsed": "662476",
    "logsBloom": "0x
    "blockHash": "0x0000510d00001e733c6979b4f4d9ad3e459f35791fac5925ce6e15628892196b",
    "transactionHash": "0x8a6777c21336852fdbcf056d8c07204f33893594ac2064e2a3c85d96ec53724f",
    "logs": [],
    "blockNumber": 11798240,
    "cumulativeGasUsed": "662476",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b06c540bf558ebe1763f6f5fe903171f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"coinQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethereum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fac\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPathForCoinToToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"hasPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Uniswap helpers\",\"kind\":\"dev\",\"methods\":{\"COIN()\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"coinQuote(address,uint256)\":{\"details\":\"Get a quote in Ethereum for the given ERC20 token / token amount\"},\"factory()\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"getPair(address,address)\":{\"details\":\"looks for a pool vs weth\"},\"getPathForCoinToToken(address)\":{\"details\":\"Get a path for ethereum to the given token\"},\"getReserves(address)\":{\"details\":\"Get the pair reserves given two erc20 tokens\"},\"hasPool(address)\":{\"details\":\"does token have a pool\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"},\"setFactory(address)\":{\"details\":\"set factory\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/swap/sushiswap/SushiSwapQueryHelper.sol\":\"SushiSwapQueryHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller)\\n        external\\n        override\\n        onlyController\\n    {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address)\\n        external\\n        view\\n        override\\n        returns (bool allowed)\\n    {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Remove the sender address from the list of controllers\\n     */\\n    function relinquishControl() external override onlyController {\\n        delete _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0xa31f752b3b092c788ea06a6dced266db79c4407d69733d78bc15e519f39e1d3f\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n    event ControllerRemoved(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2a44548d9ba1bcd73d5734b2265db6c1556c013ccc61df621a6cbd5cca42cfaf\",\"license\":\"MIT\"},\"src/interfaces/ISwapQueryHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ISwapQueryHelper {\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function factory() external view returns (address);\\n\\n    function COIN() external pure returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function hasPool(address token) external view returns (bool);\\n\\n    function getReserves(address pair) external view returns (uint256, uint256);\\n\\n    function getPathForCoinToToken(address token)\\n        external\\n        pure\\n        returns (address[] memory);\\n\\n    function setFactory(address f) external;\\n}\\n\",\"keccak256\":\"0x9b85b7f774e809680b6e5fd76ccdc1668139a2f9ef928a05f5ce7c79f0f6783f\",\"license\":\"MIT\"},\"src/swap/sushiswap/SushiSwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\n/**\\n * @dev Uniswap helpers\\n */\\nlibrary SushiSwapLib {\\n    address public constant UNISWAP_ROUTER_ADDRESS =\\n        0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;\\n\\n    /**\\n     * @dev Get a quote in Ethereum for the given ERC20 token / token amount\\n     */\\n    function ethQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256 ethereum,\\n            uint256 tokenReserve,\\n            uint256 ethReserve\\n        )\\n    {\\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(\\n            UNISWAP_ROUTER_ADDRESS\\n        );\\n        address _factory = uniswapRouter.factory();\\n        address _WETH = uniswapRouter.WETH();\\n        address _pair = IUniswapV2Factory(_factory).getPair(token, _WETH);\\n        (tokenReserve, ethReserve, ) = IUniswapV2Pair(_pair).getReserves();\\n        ethereum = quote(tokenAmount, tokenReserve, ethReserve);\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function factory() external pure returns (address fac) {\\n        fac = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS).factory();\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function WETH() external pure returns (address weth) {\\n        weth = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS).WETH();\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function hasPool(address token) external view returns (bool) {\\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(\\n            UNISWAP_ROUTER_ADDRESS\\n        );\\n        address _factory = uniswapRouter.factory();\\n        address _WETH = uniswapRouter.WETH();\\n        address _pair = IUniswapV2Factory(_factory).getPair(token, _WETH);\\n        return _pair != address(0);\\n    }\\n\\n    /**\\n     * @dev looks for a pool vs weth\\n     */\\n    function getPair(\\n        address _factory,\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair) {\\n        require(_factory != address(0), \\\"INVALID_TOKENS\\\");\\n        require(tokenA != address(0) && tokenB != address(0), \\\"INVALID_TOKENS\\\");\\n        pair = IUniswapV2Factory(_factory).getPair(tokenA, tokenB);\\n    }\\n\\n    /**\\n     * @dev Get the pair reserves given two erc20 tokens\\n     */\\n    function getReserves(address pair)\\n        external\\n        view\\n        returns (uint256 reserveA, uint256 reserveB)\\n    {\\n        (reserveA, reserveB, ) = IUniswapV2Pair(pair).getReserves();\\n    }\\n\\n    /**\\n     * @dev calculate pair address\\n     */\\n    function pairFor(\\n        address _factory,\\n        address tokenA,\\n        address tokenB\\n    ) external pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            _factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Get a path for ethereum to the given token\\n     */\\n    function getPathForETHToToken(address token)\\n        external\\n        pure\\n        returns (address[] memory)\\n    {\\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(\\n            UNISWAP_ROUTER_ADDRESS\\n        );\\n        address[] memory path = new address[](2);\\n        path[0] = token;\\n        path[1] = uniswapRouter.WETH();\\n        return path;\\n    }\\n\\n    /**\\n     * @dev given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n     */\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"Price: Price\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"Price: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = (amountA * (reserveB)) / reserveA;\\n    }\\n\\n    /**\\n     * @dev returns sorted token addresses, used to handle return values from pairs sorted in this order\\n     */\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"Price: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Price: ZERO_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xca5bf80325d759c3576c0a9b50a630b9d12325f0e19994966fcaea33179aa624\",\"license\":\"MIT\"},\"src/swap/sushiswap/SushiSwapQueryHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./SushiSwapLib.sol\\\";\\nimport \\\"../../interfaces/ISwapQueryHelper.sol\\\";\\nimport \\\"../../access/Controllable.sol\\\";\\n\\n/**\\n * @dev Uniswap helpers\\n */\\ncontract SushiSwapQueryHelper is ISwapQueryHelper, Controllable {\\n    address private customFactory;\\n\\n    /**\\n     * @dev Get a quote in Ethereum for the given ERC20 token / token amount\\n     */\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 ethereum,\\n            uint256 tokenReserve,\\n            uint256 ethReserve\\n        )\\n    {\\n        return SushiSwapLib.ethQuote(token, tokenAmount);\\n    }\\n\\n    function __factory() internal view returns (address fac) {\\n        fac = customFactory != address(0)\\n            ? customFactory\\n            : SushiSwapLib.factory();\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function factory() external view override returns (address fac) {\\n        fac = __factory();\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function COIN() external pure override returns (address weth) {\\n        weth = SushiSwapLib.WETH();\\n    }\\n\\n    /**\\n     * @dev looks for a pool vs weth\\n     */\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        override\\n        returns (address pair)\\n    {\\n        pair = SushiSwapLib.getPair(__factory(), tokenA, tokenB);\\n    }\\n\\n    /**\\n     * @dev Get the pair reserves given two erc20 tokens\\n     */\\n    function getReserves(address pair)\\n        external\\n        view\\n        override\\n        returns (uint256 reserveA, uint256 reserveB)\\n    {\\n        (reserveA, reserveB) = SushiSwapLib.getReserves(pair);\\n    }\\n\\n    /**\\n     * @dev does token have a pool\\n     */\\n    function hasPool(address token) external view override returns (bool) {\\n        return SushiSwapLib.hasPool(token);\\n    }\\n\\n    /**\\n     * @dev Get a path for ethereum to the given token\\n     */\\n    function getPathForCoinToToken(address token)\\n        external\\n        pure\\n        override\\n        returns (address[] memory)\\n    {\\n        return SushiSwapLib.getPathForETHToToken(token);\\n    }\\n\\n    /**\\n     * @dev set factory\\n     */\\n    function setFactory(address f) external override onlyController {\\n        customFactory = f;\\n    }\\n}\\n\",\"keccak256\":\"0xe05826b1c2f5bb6c949b46a5ddcc05a7ce67cb72b34af3a2568e1622b3a28f6b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b0c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c8063a54a72b711610081578063c45a01551161005b578063c45a0155146101aa578063e1c28bef146101b2578063e6a43905146101ba576100c9565b8063a54a72b71461016f578063a7fc7a0714610184578063b429afeb14610197576100c9565b80633e99c1e4116100b25780633e99c1e4146101175780635bb4780814610138578063868d2d1e1461014d576100c9565b806309666696146100ce5780631246dbf5146100f7575b600080fd5b6100e16100dc36600461079a565b6101cd565b6040516100ee91906109b6565b60405180910390f35b61010a61010536600461079a565b61029a565b6040516100ee9190610a03565b61012a61012536600461079a565b61033d565b6040516100ee929190610a6b565b61014b61014636600461079a565b6103d0565b005b61016061015b36600461080a565b610451565b6040516100ee93929190610a79565b6101776104ec565b6040516100ee9190610966565b61014b61019236600461079a565b61056f565b61010a6101a536600461079a565b6105d1565b6101776105ef565b61014b6105f9565b6101776101c83660046107d2565b610650565b6040517f7dddfe9f00000000000000000000000000000000000000000000000000000000815260609073170Fc2Cc67Edf2d10afB07e144719D67940564d990637dddfe9f90610220908590600401610966565b60006040518083038186803b15801561023857600080fd5b505af415801561024c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526102929190810190610835565b90505b919050565b6040517f1246dbf500000000000000000000000000000000000000000000000000000000815260009073170Fc2Cc67Edf2d10afB07e144719D67940564d990631246dbf5906102ed908590600401610966565b60206040518083038186803b15801561030557600080fd5b505af4158015610319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029291906108f6565b60008073170Fc2Cc67Edf2d10afB07e144719D67940564d9633e99c1e4846040518263ffffffff1660e01b81526004016103779190610966565b604080518083038186803b15801561038e57600080fd5b505af41580156103a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c69190610916565b9094909350915050565b3360009081526020819052604090205460ff161515600114806103f257503033145b6104175760405162461bcd60e51b815260040161040e90610a0e565b60405180910390fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080600073170Fc2Cc67Edf2d10afB07e144719D67940564d9631874f0a986866040518363ffffffff1660e01b815260040161048f92919061099d565b60606040518083038186803b1580156104a757600080fd5b505af41580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df9190610939565b9250925092509250925092565b600073170Fc2Cc67Edf2d10afB07e144719D67940564d963ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561053257600080fd5b505af4158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a91906107b6565b905090565b3360009081526020819052604090205460ff1615156001148061059157503033145b6105ad5760405162461bcd60e51b815260040161040e90610a0e565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6001600160a01b031660009081526020819052604090205460ff1690565b600061056a6106eb565b3360009081526020819052604090205460ff1615156001148061061b57503033145b6106375760405162461bcd60e51b815260040161040e90610a0e565b336000908152602081905260409020805460ff19169055565b600073170Fc2Cc67Edf2d10afB07e144719D67940564d96361e0b77f6106746106eb565b85856040518463ffffffff1660e01b81526004016106949392919061097a565b60206040518083038186803b1580156106ac57600080fd5b505af41580156106c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e491906107b6565b9392505050565b6001546000906001600160a01b031661077f5773170Fc2Cc67Edf2d10afB07e144719D67940564d963c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561074257600080fd5b505af4158015610756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077a91906107b6565b61056a565b506001546001600160a01b031690565b805161029581610abe565b6000602082840312156107ab578081fd5b81356106e481610abe565b6000602082840312156107c7578081fd5b81516106e481610abe565b600080604083850312156107e4578081fd5b82356107ef81610abe565b915060208301356107ff81610abe565b809150509250929050565b6000806040838503121561081c578182fd5b823561082781610abe565b946020939093013593505050565b60006020808385031215610847578182fd5b825167ffffffffffffffff8082111561085e578384fd5b818501915085601f830112610871578384fd5b81518181111561088357610883610a8f565b838102604051858282010181811085821117156108a2576108a2610a8f565b604052828152858101935084860182860187018a10156108c0578788fd5b8795505b838610156108e9576108d58161078f565b8552600195909501949386019386016108c4565b5098975050505050505050565b600060208284031215610907578081fd5b815180151581146106e4578182fd5b60008060408385031215610928578182fd5b505080516020909101519092909150565b60008060006060848603121561094d578081fd5b8351925060208401519150604084015190509250925092565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156109f75783516001600160a01b0316835292840192918401916001016109d2565b50909695505050505050565b901515815260200190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b918252602082015260400190565b9283526020830191909152604082015260600190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b0381168114610ad357600080fd5b5056fea2646970667358221220ded1b0c0f9d82b89d25f3de8356dd4eb4d4ebf854e6cacdfb856c2745066a7d764736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c8063a54a72b711610081578063c45a01551161005b578063c45a0155146101aa578063e1c28bef146101b2578063e6a43905146101ba576100c9565b8063a54a72b71461016f578063a7fc7a0714610184578063b429afeb14610197576100c9565b80633e99c1e4116100b25780633e99c1e4146101175780635bb4780814610138578063868d2d1e1461014d576100c9565b806309666696146100ce5780631246dbf5146100f7575b600080fd5b6100e16100dc36600461079a565b6101cd565b6040516100ee91906109b6565b60405180910390f35b61010a61010536600461079a565b61029a565b6040516100ee9190610a03565b61012a61012536600461079a565b61033d565b6040516100ee929190610a6b565b61014b61014636600461079a565b6103d0565b005b61016061015b36600461080a565b610451565b6040516100ee93929190610a79565b6101776104ec565b6040516100ee9190610966565b61014b61019236600461079a565b61056f565b61010a6101a536600461079a565b6105d1565b6101776105ef565b61014b6105f9565b6101776101c83660046107d2565b610650565b6040517f7dddfe9f00000000000000000000000000000000000000000000000000000000815260609073__$3f4ad620c49b6cb2369ffdc577d89662f3$__90637dddfe9f90610220908590600401610966565b60006040518083038186803b15801561023857600080fd5b505af415801561024c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526102929190810190610835565b90505b919050565b6040517f1246dbf500000000000000000000000000000000000000000000000000000000815260009073__$3f4ad620c49b6cb2369ffdc577d89662f3$__90631246dbf5906102ed908590600401610966565b60206040518083038186803b15801561030557600080fd5b505af4158015610319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029291906108f6565b60008073__$3f4ad620c49b6cb2369ffdc577d89662f3$__633e99c1e4846040518263ffffffff1660e01b81526004016103779190610966565b604080518083038186803b15801561038e57600080fd5b505af41580156103a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c69190610916565b9094909350915050565b3360009081526020819052604090205460ff161515600114806103f257503033145b6104175760405162461bcd60e51b815260040161040e90610a0e565b60405180910390fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080600073__$3f4ad620c49b6cb2369ffdc577d89662f3$__631874f0a986866040518363ffffffff1660e01b815260040161048f92919061099d565b60606040518083038186803b1580156104a757600080fd5b505af41580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df9190610939565b9250925092509250925092565b600073__$3f4ad620c49b6cb2369ffdc577d89662f3$__63ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561053257600080fd5b505af4158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a91906107b6565b905090565b3360009081526020819052604090205460ff1615156001148061059157503033145b6105ad5760405162461bcd60e51b815260040161040e90610a0e565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6001600160a01b031660009081526020819052604090205460ff1690565b600061056a6106eb565b3360009081526020819052604090205460ff1615156001148061061b57503033145b6106375760405162461bcd60e51b815260040161040e90610a0e565b336000908152602081905260409020805460ff19169055565b600073__$3f4ad620c49b6cb2369ffdc577d89662f3$__6361e0b77f6106746106eb565b85856040518463ffffffff1660e01b81526004016106949392919061097a565b60206040518083038186803b1580156106ac57600080fd5b505af41580156106c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e491906107b6565b9392505050565b6001546000906001600160a01b031661077f5773__$3f4ad620c49b6cb2369ffdc577d89662f3$__63c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561074257600080fd5b505af4158015610756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077a91906107b6565b61056a565b506001546001600160a01b031690565b805161029581610abe565b6000602082840312156107ab578081fd5b81356106e481610abe565b6000602082840312156107c7578081fd5b81516106e481610abe565b600080604083850312156107e4578081fd5b82356107ef81610abe565b915060208301356107ff81610abe565b809150509250929050565b6000806040838503121561081c578182fd5b823561082781610abe565b946020939093013593505050565b60006020808385031215610847578182fd5b825167ffffffffffffffff8082111561085e578384fd5b818501915085601f830112610871578384fd5b81518181111561088357610883610a8f565b838102604051858282010181811085821117156108a2576108a2610a8f565b604052828152858101935084860182860187018a10156108c0578788fd5b8795505b838610156108e9576108d58161078f565b8552600195909501949386019386016108c4565b5098975050505050505050565b600060208284031215610907578081fd5b815180151581146106e4578182fd5b60008060408385031215610928578182fd5b505080516020909101519092909150565b60008060006060848603121561094d578081fd5b8351925060208401519150604084015190509250925092565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156109f75783516001600160a01b0316835292840192918401916001016109d2565b50909695505050505050565b901515815260200190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b918252602082015260400190565b9283526020830191909152604082015260600190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b0381168114610ad357600080fd5b5056fea2646970667358221220ded1b0c0f9d82b89d25f3de8356dd4eb4d4ebf854e6cacdfb856c2745066a7d764736f6c63430008000033",
  "libraries": {
    "SushiSwapLib": "0x170Fc2Cc67Edf2d10afB07e144719D67940564d9"
  },
  "devdoc": {
    "details": "Uniswap helpers",
    "kind": "dev",
    "methods": {
      "COIN()": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "coinQuote(address,uint256)": {
        "details": "Get a quote in Ethereum for the given ERC20 token / token amount"
      },
      "factory()": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "getPair(address,address)": {
        "details": "looks for a pool vs weth"
      },
      "getPathForCoinToToken(address)": {
        "details": "Get a path for ethereum to the given token"
      },
      "getReserves(address)": {
        "details": "Get the pair reserves given two erc20 tokens"
      },
      "hasPool(address)": {
        "details": "does token have a pool"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "relinquishControl()": {
        "details": "Remove the sender address from the list of controllers"
      },
      "setFactory(address)": {
        "details": "set factory"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4752,
        "contract": "src/swap/sushiswap/SushiSwapQueryHelper.sol:SushiSwapQueryHelper",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17159,
        "contract": "src/swap/sushiswap/SushiSwapQueryHelper.sol:SushiSwapQueryHelper",
        "label": "customFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}