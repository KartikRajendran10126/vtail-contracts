{
  "address": "0x818393a9BA7de1c99b755Da04012651727562086",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "blockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryAggregate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryBlockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x49fbcc9c0ec1404cfcbaef0e495626075a10274b7e6afaabfd4c19ee95ccb654",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x818393a9BA7de1c99b755Da04012651727562086",
    "transactionIndex": 112,
    "gasUsed": "571638",
    "logsBloom": "0x
    "blockHash": "0xa596f36f26e0b2e5a3a2179245e2a03a9d09f874c755b8ef17021140cd028977",
    "transactionHash": "0x49fbcc9c0ec1404cfcbaef0e495626075a10274b7e6afaabfd4c19ee95ccb654",
    "logs": [],
    "blockNumber": 12535434,
    "cumulativeGasUsed": "9867064",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7f0eb5c2b9e822dfa673102a37376bb0",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Multicall2 - Aggregate results from multiple read-only function calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/multicall/Multicall2.sol\":\"Multicall2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"src/multicall/Multicall2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title Multicall2 - Aggregate results from multiple read-only function calls\\r\\n/// @author Michael Elliot <mike@makerdao.com>\\r\\n/// @author Joshua Levine <joshua@makerdao.com>\\r\\n/// @author Nick Johnson <arachnid@notdot.net>\\r\\n\\r\\ncontract Multicall2 {\\r\\n    struct Call {\\r\\n        address target;\\r\\n        bytes callData;\\r\\n    }\\r\\n    struct Result {\\r\\n        bool success;\\r\\n        bytes returnData;\\r\\n    }\\r\\n\\r\\n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\\r\\n        blockNumber = block.number;\\r\\n        returnData = new bytes[](calls.length);\\r\\n        for(uint256 i = 0; i < calls.length; i++) {\\r\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\r\\n            require(success, \\\"Multicall aggregate: call failed\\\");\\r\\n            returnData[i] = ret;\\r\\n        }\\r\\n    }\\r\\n    function blockAndAggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\r\\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(true, calls);\\r\\n    }\\r\\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\r\\n        blockHash = blockhash(blockNumber);\\r\\n    }\\r\\n    function getBlockNumber() public view returns (uint256 blockNumber) {\\r\\n        blockNumber = block.number;\\r\\n    }\\r\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\r\\n        coinbase = block.coinbase;\\r\\n    }\\r\\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\r\\n        difficulty = block.difficulty;\\r\\n    }\\r\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\r\\n        gaslimit = block.gaslimit;\\r\\n    }\\r\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\r\\n        timestamp = block.timestamp;\\r\\n    }\\r\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\r\\n        balance = addr.balance;\\r\\n    }\\r\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\r\\n        blockHash = blockhash(block.number - 1);\\r\\n    }\\r\\n    function tryAggregate(bool requireSuccess, Call[] memory calls) public returns (Result[] memory returnData) {\\r\\n        returnData = new Result[](calls.length);\\r\\n        for(uint256 i = 0; i < calls.length; i++) {\\r\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\r\\n\\r\\n            if (requireSuccess) {\\r\\n                require(success, \\\"Multicall2 aggregate: call failed\\\");\\r\\n            }\\r\\n\\r\\n            returnData[i] = Result(success, ret);\\r\\n        }\\r\\n    }\\r\\n    function tryBlockAndAggregate(bool requireSuccess, Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\r\\n        blockNumber = block.number;\\r\\n        blockHash = blockhash(block.number);\\r\\n        returnData = tryAggregate(requireSuccess, calls);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa5aeab4b3bfe625ede08bda87135fb6fc576b55529955d11098c22517b6fe6d5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610962806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806372425d9d11610081578063bce38bd71161005b578063bce38bd714610182578063c3077fa9146101a2578063ee82ac5e146101b5576100d4565b806372425d9d1461015d57806386d516e814610165578063a8b0574e1461016d576100d4565b8063399542e9116100b2578063399542e91461012057806342cbb15c146101425780634d2301cc1461014a576100d4565b80630f28c97d146100d9578063252dba42146100f757806327e86d6e14610118575b600080fd5b6100e16101c8565b6040516100ee91906107ad565b60405180910390f35b61010a61010536600461062d565b6101cc565b6040516100ee929190610848565b6100e161030b565b61013361012e366004610668565b610314565b6040516100ee939291906108b0565b6100e161032c565b6100e161015836600461060c565b610330565b6100e161033d565b6100e1610341565b610175610345565b6040516100ee9190610786565b610195610190366004610668565b610349565b6040516100ee919061079a565b6101336101b036600461062d565b61049f565b6100e16101c33660046106ba565b6104bc565b4290565b8051439060609067ffffffffffffffff811180156101e957600080fd5b5060405190808252806020026020018201604052801561021d57816020015b60608152602001906001900390816102085790505b50905060005b8351811015610305576000606085838151811061023c57fe5b6020026020010151600001516001600160a01b031686848151811061025d57fe5b602002602001015160200151604051610276919061076a565b6000604051808303816000865af19150503d80600081146102b3576040519150601f19603f3d011682016040523d82523d6000602084013e6102b8565b606091505b5091509150816102e35760405162461bcd60e51b81526004016102da90610813565b60405180910390fd5b808484815181106102f057fe5b60209081029190910101525050600101610223565b50915091565b60001943014090565b43804060606103238585610349565b90509250925092565b4390565b6001600160a01b03163190565b4490565b4590565b4190565b6060815167ffffffffffffffff8111801561036357600080fd5b5060405190808252806020026020018201604052801561039d57816020015b61038a6104c0565b8152602001906001900390816103825790505b50905060005b825181101561049857600060608483815181106103bc57fe5b6020026020010151600001516001600160a01b03168584815181106103dd57fe5b6020026020010151602001516040516103f6919061076a565b6000604051808303816000865af19150503d8060008114610433576040519150601f19603f3d011682016040523d82523d6000602084013e610438565b606091505b5091509150851561046057816104605760405162461bcd60e51b81526004016102da906107b6565b604051806040016040528083151581526020018281525084848151811061048357fe5b602090810291909101015250506001016103a3565b5092915050565b60008060606104af600185610314565b9196909550909350915050565b4090565b60408051808201909152600081526060602082015290565b80356001600160a01b03811681146104ef57600080fd5b919050565b6000601f8381840112610505578182fd5b823567ffffffffffffffff8082111561051a57fe5b602061052981828502016108d8565b838152945080850186820160005b858110156105ff57813589016040601f198181848f0301121561055957600080fd5b81518281018181108a8211171561056c57fe5b83526105798489016104d8565b8152828401358981111561058c57600080fd5b8085019450508d603f8501126105a157600080fd5b87840135898111156105af57fe5b6105be89848e840116016108d8565b92508083528e848287010111156105d457600080fd5b808486018a850137600090830189015280880191909152855250509183019190830190600101610537565b5050505050505092915050565b60006020828403121561061d578081fd5b610626826104d8565b9392505050565b60006020828403121561063e578081fd5b813567ffffffffffffffff811115610654578182fd5b610660848285016104f4565b949350505050565b6000806040838503121561067a578081fd5b82358015158114610689578182fd5b9150602083013567ffffffffffffffff8111156106a4578182fd5b6106b0858286016104f4565b9150509250929050565b6000602082840312156106cb578081fd5b5035919050565b60008282518085526020808601955080818302840101818601855b8481101561073157858303601f190189528151805115158452840151604085850181905261071d8186018361073e565b9a86019a94505050908301906001016106ed565b5090979650505050505050565b600081518084526107568160208601602086016108fc565b601f01601f19169290920160200192915050565b6000825161077c8184602087016108fc565b9190910192915050565b6001600160a01b0391909116815260200190565b60006020825261062660208301846106d2565b90815260200190565b60208082526021908201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560408201527f6400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c6564604082015260600190565b600060408201848352602060408185015281855180845260608601915060608382028701019350828701855b828110156108a257605f1988870301845261089086835161073e565b95509284019290840190600101610874565b509398975050505050505050565b6000848252836020830152606060408301526108cf60608301846106d2565b95945050505050565b60405181810167ffffffffffffffff811182821017156108f457fe5b604052919050565b60005b838110156109175781810151838201526020016108ff565b83811115610926576000848401525b5050505056fea2646970667358221220965e8e0561e50f0246f18c4ea10f535d08b1d61e4a0894232330c6d5438dc8cc64736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c806372425d9d11610081578063bce38bd71161005b578063bce38bd714610182578063c3077fa9146101a2578063ee82ac5e146101b5576100d4565b806372425d9d1461015d57806386d516e814610165578063a8b0574e1461016d576100d4565b8063399542e9116100b2578063399542e91461012057806342cbb15c146101425780634d2301cc1461014a576100d4565b80630f28c97d146100d9578063252dba42146100f757806327e86d6e14610118575b600080fd5b6100e16101c8565b6040516100ee91906107ad565b60405180910390f35b61010a61010536600461062d565b6101cc565b6040516100ee929190610848565b6100e161030b565b61013361012e366004610668565b610314565b6040516100ee939291906108b0565b6100e161032c565b6100e161015836600461060c565b610330565b6100e161033d565b6100e1610341565b610175610345565b6040516100ee9190610786565b610195610190366004610668565b610349565b6040516100ee919061079a565b6101336101b036600461062d565b61049f565b6100e16101c33660046106ba565b6104bc565b4290565b8051439060609067ffffffffffffffff811180156101e957600080fd5b5060405190808252806020026020018201604052801561021d57816020015b60608152602001906001900390816102085790505b50905060005b8351811015610305576000606085838151811061023c57fe5b6020026020010151600001516001600160a01b031686848151811061025d57fe5b602002602001015160200151604051610276919061076a565b6000604051808303816000865af19150503d80600081146102b3576040519150601f19603f3d011682016040523d82523d6000602084013e6102b8565b606091505b5091509150816102e35760405162461bcd60e51b81526004016102da90610813565b60405180910390fd5b808484815181106102f057fe5b60209081029190910101525050600101610223565b50915091565b60001943014090565b43804060606103238585610349565b90509250925092565b4390565b6001600160a01b03163190565b4490565b4590565b4190565b6060815167ffffffffffffffff8111801561036357600080fd5b5060405190808252806020026020018201604052801561039d57816020015b61038a6104c0565b8152602001906001900390816103825790505b50905060005b825181101561049857600060608483815181106103bc57fe5b6020026020010151600001516001600160a01b03168584815181106103dd57fe5b6020026020010151602001516040516103f6919061076a565b6000604051808303816000865af19150503d8060008114610433576040519150601f19603f3d011682016040523d82523d6000602084013e610438565b606091505b5091509150851561046057816104605760405162461bcd60e51b81526004016102da906107b6565b604051806040016040528083151581526020018281525084848151811061048357fe5b602090810291909101015250506001016103a3565b5092915050565b60008060606104af600185610314565b9196909550909350915050565b4090565b60408051808201909152600081526060602082015290565b80356001600160a01b03811681146104ef57600080fd5b919050565b6000601f8381840112610505578182fd5b823567ffffffffffffffff8082111561051a57fe5b602061052981828502016108d8565b838152945080850186820160005b858110156105ff57813589016040601f198181848f0301121561055957600080fd5b81518281018181108a8211171561056c57fe5b83526105798489016104d8565b8152828401358981111561058c57600080fd5b8085019450508d603f8501126105a157600080fd5b87840135898111156105af57fe5b6105be89848e840116016108d8565b92508083528e848287010111156105d457600080fd5b808486018a850137600090830189015280880191909152855250509183019190830190600101610537565b5050505050505092915050565b60006020828403121561061d578081fd5b610626826104d8565b9392505050565b60006020828403121561063e578081fd5b813567ffffffffffffffff811115610654578182fd5b610660848285016104f4565b949350505050565b6000806040838503121561067a578081fd5b82358015158114610689578182fd5b9150602083013567ffffffffffffffff8111156106a4578182fd5b6106b0858286016104f4565b9150509250929050565b6000602082840312156106cb578081fd5b5035919050565b60008282518085526020808601955080818302840101818601855b8481101561073157858303601f190189528151805115158452840151604085850181905261071d8186018361073e565b9a86019a94505050908301906001016106ed565b5090979650505050505050565b600081518084526107568160208601602086016108fc565b601f01601f19169290920160200192915050565b6000825161077c8184602087016108fc565b9190910192915050565b6001600160a01b0391909116815260200190565b60006020825261062660208301846106d2565b90815260200190565b60208082526021908201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560408201527f6400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c6564604082015260600190565b600060408201848352602060408185015281855180845260608601915060608382028701019350828701855b828110156108a257605f1988870301845261089086835161073e565b95509284019290840190600101610874565b509398975050505050505050565b6000848252836020830152606060408301526108cf60608301846106d2565b95945050505050565b60405181810167ffffffffffffffff811182821017156108f457fe5b604052919050565b60005b838110156109175781810151838201526020016108ff565b83811115610926576000848401525b5050505056fea2646970667358221220965e8e0561e50f0246f18c4ea10f535d08b1d61e4a0894232330c6d5438dc8cc64736f6c63430007030033",
  "libraries": {
    "GovernanceLib": "0xC42F611a14D8729ca37C63a55e5C225c4eBfD58B",
    "Strings": "0xAbd24e0Ed1fd83a2aa46312042fC79FA818e1B3d",
    "SafeMath": "0x7278CdFEaef0400293F30bE87dA7222d39eadE8A",
    "AddressSet": "0x9c13feb43EC10Ec755d05A836beef71da6193c99",
    "UInt256Set": "0x712021B608c352c36231b4d1DcaCE3970389B512",
    "Create2": "0x0c315760b903FEE9675fBEB7a83988843E531141",
    "ProposalsLib": "0x57B11De50cc51A795e3597B7d27dfabf9D6dA4ac",
    "ComplexPoolLib": "0x4A03Cc1F5733A08A2db0557E1075f3923d9D2392",
    "WrappedTokenLib": "0xb9e4019cF0613dFEd1D533313D8d1f302ED116f3",
    "Unigem20Library": "0x53eFB08AA8D4540F4e65D305373D74097a9CAEdd"
  },
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",
    "kind": "dev",
    "methods": {},
    "title": "Multicall2 - Aggregate results from multiple read-only function calls",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}