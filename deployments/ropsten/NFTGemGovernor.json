{
  "address": "0xcb66dc8044bB7108b781D10d17Aa8577bDCFF400",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBanned",
          "type": "bool"
        }
      ],
      "name": "AllowList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "FeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GovernanceTokenIssued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        }
      ],
      "name": "ProjectFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "diffStep",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxClaims",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "alllowedToken",
          "type": "address"
        }
      ],
      "name": "StakingPoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "feeDivisor",
          "type": "uint256"
        }
      ],
      "name": "createChangeFeeProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "descriptionUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "createFundProjectProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTIme",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diffStep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxClaims",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "allowedToken",
          "type": "address"
        }
      ],
      "name": "createNewPoolProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diffstep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxClaims",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "allowedToken",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalHash",
          "type": "uint256"
        }
      ],
      "name": "createProposalVoteTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diffstep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxClaims",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "allowedToken",
          "type": "address"
        }
      ],
      "name": "createSystemPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "newStatus",
          "type": "bool"
        }
      ],
      "name": "createUpdateAllowlistProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalHash",
          "type": "uint256"
        }
      ],
      "name": "destroyProposalVoteTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "propAddress",
          "type": "address"
        }
      ],
      "name": "executeProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "newPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_multitoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_proposalFactory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "issueFuelToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "issueInitialGovernanceTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "maybeIssueGovernanceToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf56a2b2ad246aa1b86cd348ad1bd3d571baa51c1736347209a2e4e9683ba32e1",
  "receipt": {
    "to": null,
    "from": "0x80EBffD553601340B688f246FD20a57BAab17AaD",
    "contractAddress": "0xcb66dc8044bB7108b781D10d17Aa8577bDCFF400",
    "transactionIndex": 4,
    "gasUsed": "2068023",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x190c6b040317dd687079d83a900bc3f4a73a6bc0440a62ca55b3d4c92ad358fb",
    "transactionHash": "0xf56a2b2ad246aa1b86cd348ad1bd3d571baa51c1736347209a2e4e9683ba32e1",
    "logs": [],
    "blockNumber": 10050396,
    "cumulativeGasUsed": "2446230",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c768d7d0d3c4589eff35419dd67a5ae3",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBanned\",\"type\":\"bool\"}],\"name\":\"AllowList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GovernanceTokenIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"ProjectFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"diffStep\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxClaims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"alllowedToken\",\"type\":\"address\"}],\"name\":\"StakingPoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeDivisor\",\"type\":\"uint256\"}],\"name\":\"createChangeFeeProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"descriptionUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"createFundProjectProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTIme\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaims\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowedToken\",\"type\":\"address\"}],\"name\":\"createNewPoolProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffstep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaims\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowedToken\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalHash\",\"type\":\"uint256\"}],\"name\":\"createProposalVoteTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffstep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaims\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowedToken\",\"type\":\"address\"}],\"name\":\"createSystemPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"createUpdateAllowlistProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalHash\",\"type\":\"uint256\"}],\"name\":\"destroyProposalVoteTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"propAddress\",\"type\":\"address\"}],\"name\":\"executeProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multitoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proposalFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issueFuelToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"issueInitialGovernanceTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maybeIssueGovernanceToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"createChangeFeeProposal(address,string,address,address,uint256)\":{\"details\":\"create a proposal to change fees for a token / pool\"},\"createFundProjectProposal(address,string,address,string,uint256)\":{\"details\":\"create a proposal to craete a project funding proposal\"},\"createNewPoolProposal(address,string,string,string,uint256,uint256,uint256,uint256,uint256,address)\":{\"details\":\"create a proposal to create a new pool\"},\"createPool(string,string,uint256,uint256,uint256,uint256,uint256,address)\":{\"details\":\"create a new pool - public, only callable by a controller of this contract\"},\"createProposalVoteTokens(uint256)\":{\"details\":\"create proposal vote tokens\"},\"createSystemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)\":{\"details\":\"create a new pool - public, only callable by a controller of this contract\"},\"createUpdateAllowlistProposal(address,string,address,address,bool)\":{\"details\":\"create a proposal to update the allowlist of a token/pool\"},\"destroyProposalVoteTokens(uint256)\":{\"details\":\"destroy proposal vote tokens\"},\"executeProposal(address)\":{\"details\":\"execute proposal\"},\"initialize(address,address,address,address)\":{\"details\":\"init this smart contract\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"issueFuelToken(address,uint256)\":{\"details\":\"maybe issue a governance token to receiver\"},\"issueInitialGovernanceTokens(address)\":{\"details\":\"issue initial governance tokens\"},\"maybeIssueGovernanceToken(address)\":{\"details\":\"maybe issue a governance token to receiver\"},\"relinquishControl()\":{\"details\":\"Check if this address is a controller\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/governance/NFTGemGovernor.sol\":\"NFTGemGovernor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller) external override onlyController {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address) external view override returns (bool allowed) {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function relinquishControl() external view override onlyController {\\n        _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0x3d92a7bc3f11d16541a85a0af7494d0ed57b34875b6d8567d3771d9e65de2573\",\"license\":\"MIT\"},\"src/governance/ChangeFeeProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\ncontract ChangeFeeProposalData is IChangeFeeProposalData {\\n    address private token;\\n    address private pool;\\n    uint256 private feeDivisor;\\n\\n    constructor(\\n        address _token,\\n        address _pool,\\n        uint256 _feeDivisor\\n    ) {\\n        token = _token;\\n        pool = _pool;\\n        feeDivisor = _feeDivisor;\\n    }\\n\\n    function data()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        return (token, pool, feeDivisor);\\n    }\\n}\\n\",\"keccak256\":\"0xacf19a9c4063dde64513460fa439ab07e63205a9ea9b9d907ba920aca2d17a68\",\"license\":\"MIT\"},\"src/governance/CreatePoolProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\ncontract CreatePoolProposalData is ICreatePoolProposalData {\\n    \\n    string private symbol;\\n    string private name;\\n    \\n    uint256 private ethPrice;\\n    uint256 private minTime;\\n    uint256 private maxTime;\\n    uint256 private diffstep;\\n    uint256 private maxClaims;\\n    \\n    address private allowedToken;\\n\\n    constructor(\\n        string memory _symbol,\\n        string memory _name,\\n\\n        uint256 _ethPrice,\\n        uint256 _minTIme,\\n        uint256 _maxTime,\\n        uint256 _diffStep,\\n        uint256 _maxCLaim,\\n        \\n        address _allowedToken\\n    ) {\\n        symbol = _symbol;\\n        name = _name;\\n        ethPrice = _ethPrice;\\n        minTime = _minTIme;\\n        maxTime = _maxTime;\\n        diffstep = _diffStep;\\n        maxClaims = _maxCLaim;\\n        allowedToken = _allowedToken;\\n    }\\n\\n    function data()\\n        external\\n        view\\n        override\\n        returns (\\n            string memory,\\n            string memory,\\n\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            \\n            address\\n        )\\n    {\\n        return (\\n            symbol, \\n            name, \\n            \\n            ethPrice, \\n            minTime, \\n            maxTime, \\n            diffstep, \\n            maxClaims, \\n            \\n            allowedToken);\\n\\n    }\\n}\\n\",\"keccak256\":\"0x557f66e0bab0bbb0badfff3b879ab59e829642118b91379400979bd781255d75\",\"license\":\"MIT\"},\"src/governance/FundProjectProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\ncontract FundProjectProposalData is IFundProjectProposalData {\\n    address private receiver;\\n    string private descriptionUrl;\\n    uint256 private ethAmount;\\n\\n    constructor(\\n        address _receiver,\\n        string memory _descriptionUrl,\\n        uint256 _ethAmount\\n    ) {\\n        receiver = _receiver;\\n        descriptionUrl = _descriptionUrl;\\n        ethAmount = _ethAmount;\\n    }\\n\\n    function data()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            string memory,\\n            uint256\\n        )\\n    {\\n        return (receiver, descriptionUrl, ethAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xee9c58dd35cb135654e954e586d64fe32131284b03aafefcbf9f606868fb144b\",\"license\":\"MIT\"},\"src/governance/GovernanceLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemPoolFactory.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/INFTGemPool.sol\\\";\\nimport \\\"../interfaces/IProposal.sol\\\";\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\n\\nlibrary GovernanceLib {\\n\\n    // calculates the CREATE2 address for the quantized erc20 without making any external calls\\n    function addressOfPropoal(\\n        address factory,\\n        address submitter,\\n        string memory title\\n    ) public pure returns (address govAddress) {\\n        govAddress = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(submitter, title)),\\n                        hex\\\"74f827a6bb3b7ed4cd86bd3c09b189a9496bc40d83635649e1e4df1c4e836ebf\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev create vote tokens to vote on given proposal\\n     */\\n    function createProposalVoteTokens(address multitoken, uint256 proposalHash) external {\\n        for (uint256 i = 0; i < INFTGemMultiToken(multitoken).allTokenHoldersLength(0); i++) {\\n            address holder = INFTGemMultiToken(multitoken).allTokenHolders(0, i);\\n            uint256 govTokens = IERC1155(multitoken).balanceOf(holder, 0);\\n            INFTGemMultiToken(multitoken).mint(holder, proposalHash, govTokens);\\n        }\\n    }\\n\\n    /**\\n     * @dev destroy the vote tokens for the given proposal\\n     */\\n    function destroyProposalVoteTokens(address multitoken, uint256 proposalHash) external {\\n        for (uint256 i = 0; i < INFTGemMultiToken(multitoken).allTokenHoldersLength(0); i++) {\\n            address holder = INFTGemMultiToken(multitoken).allTokenHolders(0, i);\\n            uint256 propTokens = IERC1155(multitoken).balanceOf(holder, proposalHash);\\n            INFTGemMultiToken(multitoken).burn(holder, proposalHash, propTokens);\\n        }\\n    }\\n\\n        /**\\n     * @dev execute craete pool proposal\\n     */\\n    function execute(\\n        address multitoken,\\n        address factory,\\n        address feeTracker,\\n        address proposalAddress) public returns (address newPool) {\\n        \\n        // get the data for the new pool from the proposal\\n        address proposalData = IProposal(proposalAddress).proposalData();\\n       \\n        (\\n            string memory symbol,\\n            string memory name,\\n\\n            uint256 ethPrice,\\n            uint256 minTime,\\n            uint256 maxTime,\\n            uint256 diffStep,\\n            uint256 maxClaims,\\n            \\n            address allowedToken\\n        ) = ICreatePoolProposalData(proposalData).data();\\n        \\n        // create the new pool\\n        newPool = createPool(\\n            factory,\\n            \\n            symbol,\\n            name,\\n            \\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffStep,\\n            maxClaims,\\n            \\n            allowedToken\\n        );\\n        // associate the pool with its relations\\n        associatePool(\\n            address(this),\\n            multitoken,\\n            feeTracker,\\n            IProposal(proposalAddress).creator(),\\n            IProposal(proposalAddress).funder(),\\n            newPool\\n        );\\n    }\\n\\n    /**\\n     * @dev create a new pool\\n     */\\n    function createPool(\\n        address factory,\\n\\n        string memory symbol,\\n        string memory name,\\n\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        \\n        address allowedToken\\n    ) public returns (address pool) {\\n        pool = INFTGemPoolFactory(factory).createNFTGemPool(\\n            symbol,\\n            name,\\n\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxClaims,\\n            \\n            allowedToken\\n        );\\n    }\\n\\n    /**\\n     * @dev associate the pool with its relations\\n     */\\n    function associatePool(\\n        address governor,\\n        address multitoken,\\n        address feeTracker,\\n        address creator,\\n        address funder,\\n        address pool\\n    ) public {\\n        IControllable(multitoken).addController(pool);\\n        IControllable(governor).addController(pool);\\n        INFTGemPool(pool).setMultiToken(multitoken);\\n        INFTGemPool(pool).setGovernor(governor);\\n        INFTGemPool(pool).setFeeTracker(feeTracker);\\n        INFTGemPool(pool).mintGenesisGems(creator, funder);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5dec37d6fa10b59c2d9d972eb727af9640c2d21b164a6ce734c19774c8624b65\",\"license\":\"MIT\"},\"src/governance/NFTGemGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../access/Controllable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/IProposalFactory.sol\\\";\\nimport \\\"../interfaces/IProposal.sol\\\";\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolFactory.sol\\\";\\nimport \\\"../interfaces/INFTGemPool.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\nimport \\\"../libs/SafeMath.sol\\\";\\nimport \\\"../governance/GovernanceLib.sol\\\";\\nimport \\\"../governance/ProposalsLib.sol\\\";\\n\\ncontract NFTGemGovernor is Initializable, Controllable, INFTGemGovernor {\\n    using SafeMath for uint256;\\n\\n    address private multitoken;\\n    address private factory;\\n    address private feeTracker;\\n    address private proposalFactory;\\n\\n    uint256 private constant GOVERNANCE = 0;\\n    uint256 private constant FUEL = 1;\\n    uint256 private constant GOV_TOKEN_INITIAL = 500000;\\n    uint256 private constant GOV_TOKEN_MAX = 1000000;\\n\\n    uint256 private governTokenDiff = type(uint256).max.sub(1);\\n    uint256 private sinceLastIncrease;\\n    bool private governanceIssued;\\n\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /**\\n     * @dev init this smart contract\\n     */\\n    function initialize(\\n        address _multitoken,\\n        address _factory,\\n        address _feeTracker,\\n        address _proposalFactory\\n    ) external override initializer {\\n        multitoken = _multitoken;\\n        factory = _factory;\\n        feeTracker = _feeTracker;\\n        proposalFactory = _proposalFactory;\\n    }\\n\\n    /**\\n     * @dev create proposal vote tokens\\n     */\\n    function createProposalVoteTokens(uint256 proposalHash) external override onlyController {\\n        GovernanceLib.createProposalVoteTokens(multitoken, proposalHash);\\n    }\\n\\n    /**\\n     * @dev destroy proposal vote tokens\\n     */\\n    function destroyProposalVoteTokens(uint256 proposalHash) external override onlyController {\\n        GovernanceLib.destroyProposalVoteTokens(multitoken, proposalHash);\\n    }\\n\\n    /**\\n     * @dev execute proposal\\n     */\\n    function executeProposal(address propAddress) external override onlyController returns (address newPool) {\\n        ProposalsLib.executeProposal(multitoken, factory, feeTracker, propAddress);\\n    }\\n\\n    /**\\n     * @dev issue initial governance tokens\\n     */\\n    function issueInitialGovernanceTokens(address receiver) external override returns (uint256) {\\n        require(!governanceIssued, \\\"ALREADY_ISSUED\\\");\\n        INFTGemMultiToken(multitoken).mint(receiver, GOVERNANCE, GOV_TOKEN_INITIAL);\\n        governanceIssued = true;\\n        emit GovernanceTokenIssued(receiver, GOV_TOKEN_INITIAL);\\n    }\\n\\n    function _checkHash(uint256 hashChecked) internal view returns (bool) {\\n        return hashChecked & governTokenDiff == hashChecked;\\n    }\\n\\n    /**\\n     * @dev maybe issue a governance token to receiver\\n     */\\n    function maybeIssueGovernanceToken(address receiver) external override onlyController returns (uint256) {\\n        uint256 totalSupplyOf = INFTGemMultiToken(multitoken).totalBalances(GOVERNANCE);\\n        if (totalSupplyOf >= GOV_TOKEN_MAX) {\\n            return 0;\\n        }\\n        if (_checkHash(uint256(receiver))) {\\n            INFTGemMultiToken(multitoken).mint(receiver, GOVERNANCE, 1);\\n            emit GovernanceTokenIssued(receiver, 1);\\n            sinceLastIncrease = sinceLastIncrease.add(1);\\n            if (sinceLastIncrease > totalSupplyOf.sub(GOV_TOKEN_INITIAL).div(4)) {\\n                sinceLastIncrease = 0;\\n                governTokenDiff = governTokenDiff << 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev maybe issue a governance token to receiver\\n     */\\n    function issueFuelToken(address receiver, uint256 amount) external override onlyController returns (uint256) {\\n        INFTGemMultiToken(multitoken).mint(receiver, FUEL, amount);\\n    }\\n\\n    /**\\n     * @dev create a new pool - public, only callable by a controller of this contract\\n     */\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n\\n        address allowedToken\\n    ) external override onlyController returns (address pool) {\\n        pool = GovernanceLib.createPool(\\n            factory,\\n\\n            symbol,\\n            name,\\n\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxClaims,\\n\\n            allowedToken\\n        );\\n        // associate the pool with its relations\\n        GovernanceLib.associatePool(\\n            address(this),\\n            multitoken,\\n            feeTracker,\\n            msg.sender,\\n            msg.sender,\\n            pool);\\n    }\\n\\n\\n    /**\\n     * @dev create a new pool - public, only callable by a controller of this contract\\n     */\\n    function createPool(\\n        string memory symbol,\\n        string memory name,\\n\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        \\n        address allowedToken\\n    ) external override onlyController returns (address pool) {\\n        pool = GovernanceLib.createPool(\\n            factory,\\n\\n            symbol,\\n            name,\\n\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxClaims,\\n\\n            allowedToken\\n        );\\n        // associate the pool with its relations\\n        GovernanceLib.associatePool(\\n            address(this),\\n            multitoken,\\n            feeTracker,\\n            IProposal(pool).creator(),\\n            IProposal(pool).funder(),\\n            pool);\\n    }\\n\\n    /**\\n     * @dev create a proposal to create a new pool\\n     */\\n    function createNewPoolProposal(\\n        address submitter,\\n        string memory title,\\n\\n        string memory symbol,\\n        string memory name,\\n\\n        uint256 ethPrice,\\n        uint256 minTIme,\\n        uint256 maxTime,\\n        uint256 diffStep,\\n        uint256 maxClaims,\\n\\n        address allowedToken\\n    ) external override returns (address proposal) {\\n        proposal = ProposalsLib.createNewPoolProposal(\\n            symbol,\\n            name,\\n\\n            ethPrice,\\n            minTIme,\\n            maxTime,\\n            diffStep,\\n            maxClaims,\\n\\n            allowedToken\\n        );\\n        ProposalsLib.associateProposal(\\n            address(this),\\n            multitoken,\\n            proposalFactory,\\n            submitter,\\n            IProposal.ProposalType.CREATE_POOL,\\n            title,\\n            proposal);\\n    }\\n\\n    /**\\n     * @dev create a proposal to change fees for a token / pool\\n     */\\n    function createChangeFeeProposal(\\n        address submitter,\\n        string memory title,\\n        address token,\\n        address pool,\\n        uint256 feeDivisor\\n    ) external override returns (address proposal) {\\n        proposal = ProposalsLib.createChangeFeeProposal(\\n            token,\\n            pool,\\n            feeDivisor\\n        );\\n        ProposalsLib.associateProposal(\\n            address(this),\\n            multitoken,\\n            proposalFactory,\\n            submitter,\\n            IProposal.ProposalType.CHANGE_FEE,\\n            title,\\n            proposal);\\n    }\\n\\n    /**\\n     * @dev create a proposal to craete a project funding proposal\\n     */\\n    function createFundProjectProposal(\\n        address submitter,\\n        string memory title,\\n        address receiver,\\n        string memory descriptionUrl,\\n        uint256 ethAmount\\n    ) external override returns (address proposal) {\\n        proposal = ProposalsLib.createFundProjectProposal(\\n            receiver,\\n            descriptionUrl,\\n            ethAmount\\n        );\\n        ProposalsLib.associateProposal(\\n            address(this),\\n            multitoken,\\n            proposalFactory,\\n            submitter,\\n            IProposal.ProposalType.FUND_PROJECT,\\n            title,\\n            proposal);\\n    }\\n\\n    /**\\n     * @dev create a proposal to update the allowlist of a token/pool\\n     */\\n    function createUpdateAllowlistProposal(\\n        address submitter,\\n        string memory title,\\n        address token,\\n        address pool,\\n        bool newStatus\\n    ) external override returns (address proposal) {\\n        proposal = ProposalsLib.createUpdateAllowlistProposal(\\n            token,\\n            pool,\\n            newStatus\\n        );\\n        ProposalsLib.associateProposal(\\n            address(this),\\n            multitoken,\\n            proposalFactory,\\n            submitter,\\n            IProposal.ProposalType.UPDATE_ALLOWLIST,\\n            title,\\n            proposal);\\n    }\\n}\\n\",\"keccak256\":\"0x88e5c433c3fe1859957b951944514d41550fb9f8a8f43d416d0dbcb6a543c2a6\",\"license\":\"MIT\"},\"src/governance/ProposalsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/IProposalFactory.sol\\\";\\nimport \\\"../interfaces/IProposal.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolData.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\n\\nimport \\\"../governance/ChangeFeeProposalData.sol\\\";\\nimport \\\"../governance/CreatePoolProposalData.sol\\\";\\nimport \\\"../governance/FundProjectProposalData.sol\\\";\\nimport \\\"../governance/UpdateAllowlistProposalData.sol\\\";\\n\\nimport \\\"./GovernanceLib.sol\\\";\\n\\nlibrary ProposalsLib {\\n    event GovernanceTokenIssued(address indexed receiver, uint256 amount);\\n    event FeeUpdated(address indexed proposal, address indexed token, uint256 newFee);\\n    event AllowList(address indexed proposal, address indexed pool, address indexed token, bool isBanned);\\n    event ProjectFunded(address indexed proposal, address indexed receiver, uint256 received);\\n\\n    // create a proposal and associate it with passed-in proposal data\\n    function associateProposal(\\n        address governor,\\n        address multitoken,\\n        address proposalFactory,\\n        address submitter,\\n        IProposal.ProposalType propType,\\n        string memory title,\\n        address data\\n    ) internal returns (address p) {\\n        p = IProposalFactory(proposalFactory).createProposal(submitter, title, data, propType);\\n        IProposal(p).setMultiToken(multitoken);\\n        IProposal(p).setGovernor(governor);\\n        IControllable(multitoken).addController(p);\\n        IControllable(governor).addController(p);\\n    }\\n\\n    // create a new pool proposal\\n    function createNewPoolProposal(\\n        string memory symbol,\\n        string memory name,\\n\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffStep,\\n        uint256 maxClaims,\\n\\n        address allowedToken\\n    ) public returns (address) {\\n        return\\n            address(\\n                new CreatePoolProposalData(\\n                    symbol, \\n                    name, \\n\\n                    ethPrice, \\n                    minTime, \\n                    maxTime, \\n                    diffStep, \\n                    maxClaims, \\n\\n                    allowedToken\\n                )\\n            );\\n    }\\n\\n    // create a fee change proposal\\n    function createChangeFeeProposal(\\n        address token,\\n        address pool,\\n        uint256 feeDivisor\\n    ) public returns (address) {\\n        return address(\\n            new ChangeFeeProposalData(\\n                token, \\n                pool, \\n                feeDivisor));\\n    }\\n\\n    // create a project funding proposal\\n    function createFundProjectProposal(\\n        address receiver,\\n        string memory descriptionUrl,\\n        uint256 ethAmount\\n    ) public returns (address) {\\n        return address(new FundProjectProposalData(\\n            receiver, \\n            descriptionUrl, \\n            ethAmount));\\n    }\\n\\n    // create an allowlist modify proposal\\n    function createUpdateAllowlistProposal(\\n        address token,\\n        address pool,\\n        bool newStatus\\n    ) public returns (address) {\\n        return address(new UpdateAllowlistProposalData(token, pool, newStatus));\\n    }\\n\\n    /**\\n     * @dev execute this proposal if it is in the right state. Anyone can execute a proposal\\n     */\\n    function executeProposal(\\n        address multitoken,\\n        address factory,\\n        address feeTracker,\\n        address proposalAddress\\n    ) external {\\n        require(proposalAddress != address(0), \\\"INVALID_PROPOSAL\\\");\\n        require(IProposal(proposalAddress).status() == IProposal.ProposalStatus.PASSED, \\\"PROPOSAL_NOT_PASSED\\\");\\n        address prop = IProposal(proposalAddress).proposalData();\\n        require(prop != address(0), \\\"INVALID_PROPOSAL_DATA\\\");\\n\\n        // craete a new NFT mining pool\\n        if (IProposal(proposalAddress).proposalType() == IProposal.ProposalType.CREATE_POOL) {\\n            GovernanceLib.execute(multitoken, factory, feeTracker, proposalAddress);\\n        }\\n        // fund a project\\n        else if (IProposal(proposalAddress).proposalType() == IProposal.ProposalType.FUND_PROJECT) {\\n            (address receiver, , uint256 amount) = IFundProjectProposalData(prop).data();\\n            INFTGemFeeManager(feeTracker).transferEth(payable(receiver), amount);\\n            emit ProjectFunded(address(proposalAddress), address(receiver), amount);\\n        }\\n        // change a fee\\n        else if (IProposal(proposalAddress).proposalType() == IProposal.ProposalType.CHANGE_FEE) {\\n            require(prop != address(0), \\\"INVALID_PROPOSAL_DATA\\\");\\n            address proposalData = IProposal(proposalAddress).proposalData();\\n            (address token, address pool, uint256 feeDiv) = IChangeFeeProposalData(proposalData).data();\\n            require(feeDiv != 0, \\\"INVALID_FEE\\\");\\n            if (token != address(0)) INFTGemFeeManager(feeTracker).setFeeDivisor(token, feeDiv);\\n            if (pool != address(0)) INFTGemFeeManager(feeTracker).setFeeDivisor(pool, feeDiv);\\n            if (token == address(0) && pool == address(0)) {\\n                INFTGemFeeManager(feeTracker).setDefaultFeeDivisor(feeDiv);\\n            }\\n        }\\n        // modify the allowlist\\n        else if (IProposal(proposalAddress).proposalType() == IProposal.ProposalType.UPDATE_ALLOWLIST) {\\n            address proposalData = IProposal(proposalAddress).proposalData();\\n            (address token, address pool, bool isAllowed) = IUpdateAllowlistProposalData(proposalData).data();\\n            require(token != address(0), \\\"INVALID_TOKEN\\\");\\n            if (isAllowed) {\\n                INFTGemPoolData(pool).addAllowedToken(token);\\n                emit AllowList(proposalAddress, pool, token, isAllowed);\\n            } else {\\n                INFTGemPoolData(pool).removeAllowedToken(token);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88fb2f76a09d4176af080cd9afa374ee0a64291ef44425ccb1419d265129d94a\",\"license\":\"MIT\"},\"src/governance/UpdateAllowlistProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\ncontract UpdateAllowlistProposalData is IUpdateAllowlistProposalData {\\n    address private token;\\n    address private pool;\\n    bool private newStatus;\\n\\n    constructor(\\n        address _token,\\n        address _pool,\\n        bool _newStatus\\n    ) {\\n        token = _token;\\n        pool = _pool;\\n        newStatus = _newStatus;\\n    }\\n\\n    function data()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            bool\\n        )\\n    {\\n        return (token, pool, newStatus);\\n    }\\n}\\n\",\"keccak256\":\"0x95f58c29687f5b3969ca1d6264687e5e498c59a57e728d6d03bcbeedfd2cbbc8\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(address indexed contractAddress, address indexed controllerAddress);\\n    event ControllerRemoved(address indexed contractAddress, address indexed controllerAddress);\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2f2d8600b126c9f7e41c2d3f94d9cf833ccd0312b74a9563c769743a192f81ca\",\"license\":\"MIT\"},\"src/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6e86542ba9c42a9ad56d81283264fd072ad07d7789113fd3482fe748a22428d6\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xacc13c3e2db32f3fbd54b5fe811690085679d84ca9c8a9b81374d811b30758b0\",\"license\":\"MIT\"},\"src/interfaces/INFTGemFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTGemFeeManager {\\n    event DefaultFeeDivisorChanged(address indexed operator, uint256 oldValue, uint256 value);\\n    event FeeDivisorChanged(address indexed operator, address indexed token, uint256 oldValue, uint256 value);\\n    event ETHReceived(address indexed manager, address sender, uint256 value);\\n\\n    function feeDivisor(address token) external view returns (uint256);\\n\\n    function defaultFeeDivisor() external view returns (uint256);\\n\\n    function setFeeDivisor(address token, uint256 _feeDivisor) external returns (uint256);\\n\\n    function setDefaultFeeDivisor(uint256 _feeDivisor) external returns (uint256);\\n\\n    function ethBalanceOf() external view returns (uint256);\\n\\n    function balanceOF(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfc8faf79df2db01f020e749b50fe3c34ec2b108b1f6d7feb63b529c4c495d38c\",\"license\":\"MIT\"},\"src/interfaces/INFTGemGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemGovernor {\\n    event GovernanceTokenIssued(address indexed receiver, uint256 amount);\\n    event FeeUpdated(address indexed proposal, address indexed token, uint256 newFee);\\n    event AllowList(address indexed proposal, address indexed token, bool isBanned);\\n    event ProjectFunded(address indexed proposal, address indexed receiver, uint256 received);\\n    event StakingPoolCreated(\\n        address indexed proposal,\\n        address indexed pool,\\n        string symbol,\\n        string name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffStep,\\n        uint256 maxClaims,\\n        address alllowedToken\\n    );\\n\\n    function initialize(\\n        address _multitoken,\\n        address _factory,\\n        address _feeTracker,\\n        address _proposalFactory\\n    ) external;\\n\\n    function createProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function destroyProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function executeProposal(address propAddress) external returns (address newPool);\\n\\n    function issueInitialGovernanceTokens(address receiver) external returns (uint256);\\n\\n    function maybeIssueGovernanceToken(address receiver) external returns (uint256);\\n\\n    function issueFuelToken(address receiver, uint256 amount) external returns (uint256);\\n\\n    function createPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createNewPoolProposal(\\n        address,\\n        string memory,\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external returns (address);\\n\\n    function createChangeFeeProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (address);\\n\\n    function createFundProjectProposal(\\n        address,\\n        string memory,\\n        address,\\n        string memory,\\n        uint256\\n    ) external returns (address);\\n\\n    function createUpdateAllowlistProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        bool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x59ca7f59ff914ba77b4b0781c83bdcd0f8ff1a52597ee72aee22697473251942\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function allHeldTokens(address holder, uint256 _idx) external view returns (uint256);\\n\\n    function allHeldTokensLength(address holder) external view returns (uint256);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx) external view returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token) external view returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa0220e1ea9897a331d997d3473a76808981c2d092e1c549f16bd96ae55b64c0d\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPool {\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(address account, address pool, uint256 claimHash, uint256 length, uint256 amountPaid);\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 amountPaid,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(address account, address pool, uint256 claimHash, uint256 gemHash);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint8 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(address erc20token, uint256 tokenAmount, uint8 count) external;\\n\\n    function collectClaim(uint256 claimHash) external;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0xff65fe3e019e75ef4da54bd031e09cc3db878dc87cbcc02717eaf4a6f1dbcba6\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTGemPoolData {\\n\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function ethPrice() external view returns (uint256);\\n    function minTime() external view returns (uint256);\\n    function maxTime() external view returns (uint256);\\n    function difficultyStep() external view returns (uint256);\\n    function maxClaims() external view returns (uint256);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n    function mintedCount() external view returns (uint256);\\n    function totalStakedEth() external view returns (uint256);\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n    function tokenType(uint256 tokenHash) external view returns (uint8);\\n    function allTokenHashesLength() external view returns (uint256);\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n    function nextClaimHash() external view returns (uint256);\\n    function nextGemHash() external view returns (uint256);\\n    function nextGemId() external view returns (uint256);\\n    function nextClaimId() external view returns (uint256);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n    function allowedTokens(uint256 idx) external view returns (address);\\n    function isTokenAllowed(address token) external view returns (bool);\\n    function addAllowedToken(address token) external;\\n    function removeAllowedToken(address token) external;\\n}\\n\",\"keccak256\":\"0xf99347b3f2210d35a56193091bb9542a95be5d5c62578b840e95369ae83634b8\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPoolFactory {\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event NFTGemPoolCreated(\\n        string gemSymbol,\\n        string gemName,\\n        uint256 ethPrice,\\n        uint256 mintTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    );\\n\\n    function getNFTGemPool(uint256 _symbolHash) external view returns (address);\\n\\n    function allNFTGemPools(uint256 idx) external view returns (address);\\n\\n    function allNFTGemPoolsLength() external view returns (uint256);\\n\\n    function createNFTGemPool(\\n        string memory gemSymbol,\\n        string memory gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    ) external returns (address payable);\\n}\\n\",\"keccak256\":\"0x86d91f8c7adf10de4a7b00094179fa1b90da5cc31adea6be5d833633212743ba\",\"license\":\"MIT\"},\"src/interfaces/IProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface IProposal {\\n    enum ProposalType {CREATE_POOL, FUND_PROJECT, CHANGE_FEE, UPDATE_ALLOWLIST}\\n\\n    enum ProposalStatus {NOT_FUNDED, ACTIVE, PASSED, FAILED, EXECUTED, CLOSED}\\n\\n    event ProposalCreated(address creator, address pool, uint256 proposalHash);\\n\\n    event ProposalExecuted(uint256 proposalHash);\\n\\n    event ProposalClosed(uint256 proposalHash);\\n\\n    function creator() external view returns (address);\\n\\n    function title() external view returns (string memory);\\n\\n    function funder() external view returns (address);\\n\\n    function expiration() external view returns (uint256);\\n\\n    function status() external view returns (ProposalStatus);\\n\\n    function proposalData() external view returns (address);\\n\\n    function proposalType() external view returns (ProposalType);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address gov) external;\\n\\n    function fund() external payable;\\n\\n    function execute() external;\\n\\n    function close() external;\\n\\n    function initialize(\\n        address,\\n        string memory,\\n        address,\\n        ProposalType\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5913ecf90344d4b65cf8a2d9e321b95ff6a7a65efb775c5a947ff63c28933146\",\"license\":\"MIT\"},\"src/interfaces/IProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface ICreatePoolProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            string memory,\\n            string memory,\\n\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            \\n            address\\n        );\\n}\\n\\ninterface IChangeFeeProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n}\\n\\ninterface IFundProjectProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            string memory,\\n            uint256\\n        );\\n}\\n\\ninterface IUpdateAllowlistProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0xbe13f993a795c9095bb53d8235f6c4a57f553ba536c2e84d0a894e552e621eac\",\"license\":\"MIT\"},\"src/interfaces/IProposalFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n\\nimport \\\"./IProposal.sol\\\";\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface IProposalFactory {\\n    /**\\n     * @dev emitted when a new gem pool proposal has been added to the system\\n     */\\n    event ProposalCreated(address creator, uint256 proposalType, address proposal);\\n\\n    event ProposalFunded(uint256 indexed proposalHash, address indexed funder, uint256 expDate);\\n\\n    event ProposalExecuted(uint256 indexed proposalHash, address pool);\\n\\n    event ProposalClosed(uint256 indexed proposalHash, address pool);\\n\\n    function getProposal(uint256 _symbolHash) external view returns (address);\\n\\n    function allProposals(uint256 idx) external view returns (address);\\n\\n    function allProposalsLength() external view returns (uint256);\\n\\n    function createProposal(\\n        address submitter,\\n        string memory title,\\n        address proposalData,\\n        IProposal.ProposalType proposalType\\n    ) external returns (address payable);\\n}\\n\",\"keccak256\":\"0x410b8cec0a372d436c4e4139d009e067cfee5391ba99ff77fc10f56470bc588d\",\"license\":\"MIT\"},\"src/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x688b57d8a4d5b6221b74de43b603ac03191e89f278c361ea7ceb257268882c4b\",\"license\":\"MIT\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x449514510d4ad1b6d147c8e25e9c9e2f7652ead618c4ed1b8021ce128778fad1\",\"license\":\"MIT\"},\"src/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xdda65747b0bb97e8f0cf0e3bb767d4de43420edf302dd11008536ba2aecf46a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526200002160016000196200004360201b62001f191790919060201c565b6006553480156200003157600080fd5b506200003d33620000a1565b620000c8565b6000828211156200009b576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6123b480620000d86000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063afc9350511610097578063e1c28bef11610066578063e1c28bef1461099c578063e4439785146109a4578063ea40a7a4146109ca578063f8c8765e146109f657610100565b8063afc9350514610725578063b429afeb14610875578063dac7f24d146108af578063e1431945146108cc57610100565b806377fa7d98116100d357806377fa7d981461039a5780638dbf88c8146104ee578063a67a03ab146106d9578063a7fc7a07146106ff57610100565b80631e4ad6a2146101055780632866519d14610124578063634b5b7d146102945780636e3c7c7f146102cc575b600080fd5b6101226004803603602081101561011b57600080fd5b5035610a34565b005b610278600480360361010081101561013b57600080fd5b81019060208101813564010000000081111561015657600080fd5b82018360208201111561016857600080fd5b8035906020019184600183028401116401000000008311171561018a57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156101dd57600080fd5b8201836020820111156101ef57600080fd5b8035906020019184600183028401116401000000008311171561021157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a001356001600160a01b0316610b2a565b604080516001600160a01b039092168252519081900360200190f35b6102ba600480360360208110156102aa57600080fd5b50356001600160a01b0316610df2565b60408051918252519081900360200190f35b610278600480360360a08110156102e257600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561030d57600080fd5b82018360208201111561031f57600080fd5b8035906020019184600183028401116401000000008311171561034157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506001600160a01b03833581169450602084013516926040013591506110229050565b61027860048036036101008110156103b157600080fd5b8101906020810181356401000000008111156103cc57600080fd5b8201836020820111156103de57600080fd5b8035906020019184600183028401116401000000008311171561040057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561045357600080fd5b82018360208201111561046557600080fd5b8035906020019184600183028401116401000000008311171561048757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a001356001600160a01b03166110f4565b610278600480360361014081101561050557600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561053057600080fd5b82018360208201111561054257600080fd5b8035906020019184600183028401116401000000008311171561056457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156105b757600080fd5b8201836020820111156105c957600080fd5b803590602001918460018302840111640100000000831117156105eb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561063e57600080fd5b82018360208201111561065057600080fd5b8035906020019184600183028401116401000000008311171561067257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a001356001600160a01b03166114b0565b610278600480360360208110156106ef57600080fd5b50356001600160a01b0316611664565b6101226004803603602081101561071557600080fd5b50356001600160a01b0316611774565b610278600480360360a081101561073b57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561076657600080fd5b82018360208201111561077857600080fd5b8035906020019184600183028401116401000000008311171561079a57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092956001600160a01b038535169590949093506040810192506020013590506401000000008111156107fe57600080fd5b82018360208201111561081057600080fd5b8035906020019184600183028401116401000000008311171561083257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250611817915050565b61089b6004803603602081101561088b57600080fd5b50356001600160a01b0316611935565b604080519115158252519081900360200190f35b610122600480360360208110156108c557600080fd5b5035611953565b610278600480360360a08110156108e257600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561090d57600080fd5b82018360208201111561091f57600080fd5b8035906020019184600183028401116401000000008311171561094157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506001600160a01b03833581169450602084013516926040013515159150611a2e9050565b610122611b07565b6102ba600480360360208110156109ba57600080fd5b50356001600160a01b0316611b70565b6102ba600480360360408110156109e057600080fd5b506001600160a01b038135169060200135611cca565b61012260048036036080811015610a0c57600080fd5b506001600160a01b038135811691602081013582169160408201358116916060013516611dba565b3360009081526001602081905260409091205460ff1615151480610a5757503033145b610a925760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b600254604080517f85efa54c0000000000000000000000000000000000000000000000000000000081526001600160a01b039092166004830152602482018390525173B22dB11bBB52ffCb45d832390829Ba67214C6fAa916385efa54c916044808301926000929190829003018186803b158015610b0f57600080fd5b505af4158015610b23573d6000803e3d6000fd5b5050505050565b33600090815260016020819052604082205460ff1615151480610b4c57503033145b610b875760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b73B22dB11bBB52ffCb45d832390829Ba67214C6fAa631500cfba600360009054906101000a90046001600160a01b03168b8b8b8b8b8b8b8b6040518a63ffffffff1660e01b8152600401808a6001600160a01b031681526020018060200180602001898152602001888152602001878152602001868152602001858152602001846001600160a01b0316815260200183810383528b818151815260200191508051906020019080838360005b83811015610c4b578181015183820152602001610c33565b50505050905090810190601f168015610c785780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b83811015610cab578181015183820152602001610c93565b50505050905090810190601f168015610cd85780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060206040518083038186803b158015610cfe57600080fd5b505af4158015610d12573d6000803e3d6000fd5b505050506040513d6020811015610d2857600080fd5b505160025460048054604080517fc8b3a99f00000000000000000000000000000000000000000000000000000000815230938101939093526001600160a01b03938416602484015290831660448301523360648301819052608483015291831660a4820152905191925073B22dB11bBB52ffCb45d832390829Ba67214C6fAa9163c8b3a99f9160c480820192600092909190829003018186803b158015610dce57600080fd5b505af4158015610de2573d6000803e3d6000fd5b5050505098975050505050505050565b33600090815260016020819052604082205460ff1615151480610e1457503033145b610e4f5760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b600254604080517fed7aae2b000000000000000000000000000000000000000000000000000000008152600060048201819052915191926001600160a01b03169163ed7aae2b91602480820192602092909190829003018186803b158015610eb657600080fd5b505afa158015610eca573d6000803e3d6000fd5b505050506040513d6020811015610ee057600080fd5b50519050620f42408110610ef857600091505061101d565b610f0a836001600160a01b0316611f76565b1561101b57600254604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260006024830181905260016044840152925193169263156e29f69260648084019391929182900301818387803b158015610f8257600080fd5b505af1158015610f96573d6000803e3d6000fd5b5050604080516001815290516001600160a01b03871693507f1b9ddf8f7c45e0567932349c127951357a3f9b5a821eeeec6e44d771debbb49092509081900360200190a2600754610fe8906001611f7f565b6007556110036004610ffd836207a120611f19565b90611fe0565b600754111561101b5760006007556006805460011b90555b505b919050565b600073D91d1Bc305B74d01D449D0C3E72a76d6A553c54B63f87924d08585856040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001828152602001935050505060206040518083038186803b15801561109557600080fd5b505af41580156110a9573d6000803e3d6000fd5b505050506040513d60208110156110bf57600080fd5b5051600280546005549293506110ea9230926001600160a01b0392831692909116908a908a87612047565b5095945050505050565b33600090815260016020819052604082205460ff161515148061111657503033145b6111515760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b73B22dB11bBB52ffCb45d832390829Ba67214C6fAa631500cfba600360009054906101000a90046001600160a01b03168b8b8b8b8b8b8b8b6040518a63ffffffff1660e01b8152600401808a6001600160a01b031681526020018060200180602001898152602001888152602001878152602001868152602001858152602001846001600160a01b0316815260200183810383528b818151815260200191508051906020019080838360005b838110156112155781810151838201526020016111fd565b50505050905090810190601f1680156112425780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b8381101561127557818101518382015260200161125d565b50505050905090810190601f1680156112a25780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060206040518083038186803b1580156112c857600080fd5b505af41580156112dc573d6000803e3d6000fd5b505050506040513d60208110156112f257600080fd5b505160025460048054604080517f02d05d3f000000000000000000000000000000000000000000000000000000008152905194955073B22dB11bBB52ffCb45d832390829Ba67214C6fAa9463c8b3a99f9430946001600160a01b0391821694821693918916926302d05d3f928083019260209291829003018186803b15801561137a57600080fd5b505afa15801561138e573d6000803e3d6000fd5b505050506040513d60208110156113a457600080fd5b5051604080517f041ae88000000000000000000000000000000000000000000000000000000000815290516001600160a01b0389169163041ae880916004808301926020929190829003018186803b1580156113ff57600080fd5b505afa158015611413573d6000803e3d6000fd5b505050506040513d602081101561142957600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e089901b1681526001600160a01b0396871660048201529486166024860152928516604485015290841660648401528316608483015291851660a4820152905160c4808301926000929190829003018186803b158015610dce57600080fd5b600073D91d1Bc305B74d01D449D0C3E72a76d6A553c54B6367083d6c8a8a8a8a8a8a8a8a6040518963ffffffff1660e01b8152600401808060200180602001898152602001888152602001878152602001868152602001858152602001846001600160a01b0316815260200183810383528b818151815260200191508051906020019080838360005b83811015611551578181015183820152602001611539565b50505050905090810190601f16801561157e5780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b838110156115b1578181015183820152602001611599565b50505050905090810190601f1680156115de5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060206040518083038186803b15801561160357600080fd5b505af4158015611617573d6000803e3d6000fd5b505050506040513d602081101561162d57600080fd5b50516002546005549192506116559130916001600160a01b0390811691168e60008f87612047565b509a9950505050505050505050565b33600090815260016020819052604082205460ff161515148061168657503033145b6116c15760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b60025460035460048054604080517f866db7cb0000000000000000000000000000000000000000000000000000000081526001600160a01b039586169381019390935292841660248301528316604482015291841660648301525173D91d1Bc305B74d01D449D0C3E72a76d6A553c54B9163866db7cb916084808301926000929190829003018186803b15801561175757600080fd5b505af415801561176b573d6000803e3d6000fd5b50505050919050565b3360009081526001602081905260409091205460ff161515148061179757503033145b6117d25760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b6001600160a01b0316600090815260016020819052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055565b600073D91d1Bc305B74d01D449D0C3E72a76d6A553c54B63c9ceb9518585856040518463ffffffff1660e01b815260040180846001600160a01b0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561189757818101518382015260200161187f565b50505050905090810190601f1680156118c45780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b1580156118e357600080fd5b505af41580156118f7573d6000803e3d6000fd5b505050506040513d602081101561190d57600080fd5b50516002546005549192506110ea9130916001600160a01b0390811691168960018a87612047565b6001600160a01b031660009081526001602052604090205460ff1690565b3360009081526001602081905260409091205460ff161515148061197657503033145b6119b15760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b600254604080517f8851debd0000000000000000000000000000000000000000000000000000000081526001600160a01b039092166004830152602482018390525173B22dB11bBB52ffCb45d832390829Ba67214C6fAa91638851debd916044808301926000929190829003018186803b158015610b0f57600080fd5b604080517fd6c49d760000000000000000000000000000000000000000000000000000000081526001600160a01b038086166004830152841660248201528215156044820152905160009173D91d1Bc305B74d01D449D0C3E72a76d6A553c54B9163d6c49d7691606480820192602092909190829003018186803b158015611ab557600080fd5b505af4158015611ac9573d6000803e3d6000fd5b505050506040513d6020811015611adf57600080fd5b50516002546005549192506110ea9130916001600160a01b0390811691168960038a87612047565b3360009081526001602081905260409091205460ff1615151480611b2a57503033145b611b655760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b336000526001602052565b60085460009060ff1615611bcb576040805162461bcd60e51b815260206004820152600e60248201527f414c52454144595f495353554544000000000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526000602483018190526207a1206044840152925193169263156e29f69260648084019391929182900301818387803b158015611c4057600080fd5b505af1158015611c54573d6000803e3d6000fd5b5050600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555050604080516207a120815290516001600160a01b038416917f1b9ddf8f7c45e0567932349c127951357a3f9b5a821eeeec6e44d771debbb490919081900360200190a2919050565b33600090815260016020819052604082205460ff1615151480611cec57503033145b611d275760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b600254604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260016024830152604482018690529151919092169163156e29f691606480830192600092919082900301818387803b158015611d9c57600080fd5b505af1158015611db0573d6000803e3d6000fd5b5050505092915050565b600054610100900460ff1680611dd35750611dd3612311565b80611de1575060005460ff16155b611e1c5760405162461bcd60e51b815260040180806020018281038252602e815260200180612329602e913960400191505060405180910390fd5b600054610100900460ff16158015611e8257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b600280546001600160a01b038088167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600380548784169083161790556004805486841690831617905560058054928516929091169190911790558015610b2357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555050505050565b600082821115611f70576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60065481161490565b600082820183811015611fd9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000808211612036576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161203f57fe5b049392505050565b6000856001600160a01b0316634c300076868585886040518563ffffffff1660e01b815260040180856001600160a01b0316815260200180602001846001600160a01b0316815260200183600381111561209d57fe5b8152602001828103825285818151815260200191508051906020019080838360005b838110156120d75781810151838201526020016120bf565b50505050905090810190601f1680156121045780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561212657600080fd5b505af115801561213a573d6000803e3d6000fd5b505050506040513d602081101561215057600080fd5b5051604080517fd104f8f50000000000000000000000000000000000000000000000000000000081526001600160a01b038a8116600483015291519293509083169163d104f8f59160248082019260009290919082900301818387803b1580156121b957600080fd5b505af11580156121cd573d6000803e3d6000fd5b50505050806001600160a01b031663c42cf535896040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561222057600080fd5b505af1158015612234573d6000803e3d6000fd5b50505050866001600160a01b031663a7fc7a07826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561228757600080fd5b505af115801561229b573d6000803e3d6000fd5b50505050876001600160a01b031663a7fc7a07826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156122ee57600080fd5b505af1158015612302573d6000803e3d6000fd5b50505050979650505050505050565b600061231c30612322565b15905090565b3b15159056fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f6e74726f6c6c6572a26469706673582212208c6361a64ddf1a7ad46e6c8b00e70bd66dcbfca0b79a76cfb97ae39ffe7d9e1864736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063afc9350511610097578063e1c28bef11610066578063e1c28bef1461099c578063e4439785146109a4578063ea40a7a4146109ca578063f8c8765e146109f657610100565b8063afc9350514610725578063b429afeb14610875578063dac7f24d146108af578063e1431945146108cc57610100565b806377fa7d98116100d357806377fa7d981461039a5780638dbf88c8146104ee578063a67a03ab146106d9578063a7fc7a07146106ff57610100565b80631e4ad6a2146101055780632866519d14610124578063634b5b7d146102945780636e3c7c7f146102cc575b600080fd5b6101226004803603602081101561011b57600080fd5b5035610a34565b005b610278600480360361010081101561013b57600080fd5b81019060208101813564010000000081111561015657600080fd5b82018360208201111561016857600080fd5b8035906020019184600183028401116401000000008311171561018a57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156101dd57600080fd5b8201836020820111156101ef57600080fd5b8035906020019184600183028401116401000000008311171561021157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a001356001600160a01b0316610b2a565b604080516001600160a01b039092168252519081900360200190f35b6102ba600480360360208110156102aa57600080fd5b50356001600160a01b0316610df2565b60408051918252519081900360200190f35b610278600480360360a08110156102e257600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561030d57600080fd5b82018360208201111561031f57600080fd5b8035906020019184600183028401116401000000008311171561034157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506001600160a01b03833581169450602084013516926040013591506110229050565b61027860048036036101008110156103b157600080fd5b8101906020810181356401000000008111156103cc57600080fd5b8201836020820111156103de57600080fd5b8035906020019184600183028401116401000000008311171561040057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561045357600080fd5b82018360208201111561046557600080fd5b8035906020019184600183028401116401000000008311171561048757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a001356001600160a01b03166110f4565b610278600480360361014081101561050557600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561053057600080fd5b82018360208201111561054257600080fd5b8035906020019184600183028401116401000000008311171561056457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156105b757600080fd5b8201836020820111156105c957600080fd5b803590602001918460018302840111640100000000831117156105eb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561063e57600080fd5b82018360208201111561065057600080fd5b8035906020019184600183028401116401000000008311171561067257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a001356001600160a01b03166114b0565b610278600480360360208110156106ef57600080fd5b50356001600160a01b0316611664565b6101226004803603602081101561071557600080fd5b50356001600160a01b0316611774565b610278600480360360a081101561073b57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561076657600080fd5b82018360208201111561077857600080fd5b8035906020019184600183028401116401000000008311171561079a57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092956001600160a01b038535169590949093506040810192506020013590506401000000008111156107fe57600080fd5b82018360208201111561081057600080fd5b8035906020019184600183028401116401000000008311171561083257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250611817915050565b61089b6004803603602081101561088b57600080fd5b50356001600160a01b0316611935565b604080519115158252519081900360200190f35b610122600480360360208110156108c557600080fd5b5035611953565b610278600480360360a08110156108e257600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561090d57600080fd5b82018360208201111561091f57600080fd5b8035906020019184600183028401116401000000008311171561094157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506001600160a01b03833581169450602084013516926040013515159150611a2e9050565b610122611b07565b6102ba600480360360208110156109ba57600080fd5b50356001600160a01b0316611b70565b6102ba600480360360408110156109e057600080fd5b506001600160a01b038135169060200135611cca565b61012260048036036080811015610a0c57600080fd5b506001600160a01b038135811691602081013582169160408201358116916060013516611dba565b3360009081526001602081905260409091205460ff1615151480610a5757503033145b610a925760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b600254604080517f85efa54c0000000000000000000000000000000000000000000000000000000081526001600160a01b039092166004830152602482018390525173__$415eb1c69eabc622d82690315fa0e33bfb$__916385efa54c916044808301926000929190829003018186803b158015610b0f57600080fd5b505af4158015610b23573d6000803e3d6000fd5b5050505050565b33600090815260016020819052604082205460ff1615151480610b4c57503033145b610b875760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b73__$415eb1c69eabc622d82690315fa0e33bfb$__631500cfba600360009054906101000a90046001600160a01b03168b8b8b8b8b8b8b8b6040518a63ffffffff1660e01b8152600401808a6001600160a01b031681526020018060200180602001898152602001888152602001878152602001868152602001858152602001846001600160a01b0316815260200183810383528b818151815260200191508051906020019080838360005b83811015610c4b578181015183820152602001610c33565b50505050905090810190601f168015610c785780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b83811015610cab578181015183820152602001610c93565b50505050905090810190601f168015610cd85780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060206040518083038186803b158015610cfe57600080fd5b505af4158015610d12573d6000803e3d6000fd5b505050506040513d6020811015610d2857600080fd5b505160025460048054604080517fc8b3a99f00000000000000000000000000000000000000000000000000000000815230938101939093526001600160a01b03938416602484015290831660448301523360648301819052608483015291831660a4820152905191925073__$415eb1c69eabc622d82690315fa0e33bfb$__9163c8b3a99f9160c480820192600092909190829003018186803b158015610dce57600080fd5b505af4158015610de2573d6000803e3d6000fd5b5050505098975050505050505050565b33600090815260016020819052604082205460ff1615151480610e1457503033145b610e4f5760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b600254604080517fed7aae2b000000000000000000000000000000000000000000000000000000008152600060048201819052915191926001600160a01b03169163ed7aae2b91602480820192602092909190829003018186803b158015610eb657600080fd5b505afa158015610eca573d6000803e3d6000fd5b505050506040513d6020811015610ee057600080fd5b50519050620f42408110610ef857600091505061101d565b610f0a836001600160a01b0316611f76565b1561101b57600254604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260006024830181905260016044840152925193169263156e29f69260648084019391929182900301818387803b158015610f8257600080fd5b505af1158015610f96573d6000803e3d6000fd5b5050604080516001815290516001600160a01b03871693507f1b9ddf8f7c45e0567932349c127951357a3f9b5a821eeeec6e44d771debbb49092509081900360200190a2600754610fe8906001611f7f565b6007556110036004610ffd836207a120611f19565b90611fe0565b600754111561101b5760006007556006805460011b90555b505b919050565b600073__$c2cf3eebb563d155e336d59c40be15cffe$__63f87924d08585856040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001828152602001935050505060206040518083038186803b15801561109557600080fd5b505af41580156110a9573d6000803e3d6000fd5b505050506040513d60208110156110bf57600080fd5b5051600280546005549293506110ea9230926001600160a01b0392831692909116908a908a87612047565b5095945050505050565b33600090815260016020819052604082205460ff161515148061111657503033145b6111515760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b73__$415eb1c69eabc622d82690315fa0e33bfb$__631500cfba600360009054906101000a90046001600160a01b03168b8b8b8b8b8b8b8b6040518a63ffffffff1660e01b8152600401808a6001600160a01b031681526020018060200180602001898152602001888152602001878152602001868152602001858152602001846001600160a01b0316815260200183810383528b818151815260200191508051906020019080838360005b838110156112155781810151838201526020016111fd565b50505050905090810190601f1680156112425780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b8381101561127557818101518382015260200161125d565b50505050905090810190601f1680156112a25780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060206040518083038186803b1580156112c857600080fd5b505af41580156112dc573d6000803e3d6000fd5b505050506040513d60208110156112f257600080fd5b505160025460048054604080517f02d05d3f000000000000000000000000000000000000000000000000000000008152905194955073__$415eb1c69eabc622d82690315fa0e33bfb$__9463c8b3a99f9430946001600160a01b0391821694821693918916926302d05d3f928083019260209291829003018186803b15801561137a57600080fd5b505afa15801561138e573d6000803e3d6000fd5b505050506040513d60208110156113a457600080fd5b5051604080517f041ae88000000000000000000000000000000000000000000000000000000000815290516001600160a01b0389169163041ae880916004808301926020929190829003018186803b1580156113ff57600080fd5b505afa158015611413573d6000803e3d6000fd5b505050506040513d602081101561142957600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e089901b1681526001600160a01b0396871660048201529486166024860152928516604485015290841660648401528316608483015291851660a4820152905160c4808301926000929190829003018186803b158015610dce57600080fd5b600073__$c2cf3eebb563d155e336d59c40be15cffe$__6367083d6c8a8a8a8a8a8a8a8a6040518963ffffffff1660e01b8152600401808060200180602001898152602001888152602001878152602001868152602001858152602001846001600160a01b0316815260200183810383528b818151815260200191508051906020019080838360005b83811015611551578181015183820152602001611539565b50505050905090810190601f16801561157e5780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b838110156115b1578181015183820152602001611599565b50505050905090810190601f1680156115de5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060206040518083038186803b15801561160357600080fd5b505af4158015611617573d6000803e3d6000fd5b505050506040513d602081101561162d57600080fd5b50516002546005549192506116559130916001600160a01b0390811691168e60008f87612047565b509a9950505050505050505050565b33600090815260016020819052604082205460ff161515148061168657503033145b6116c15760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b60025460035460048054604080517f866db7cb0000000000000000000000000000000000000000000000000000000081526001600160a01b039586169381019390935292841660248301528316604482015291841660648301525173__$c2cf3eebb563d155e336d59c40be15cffe$__9163866db7cb916084808301926000929190829003018186803b15801561175757600080fd5b505af415801561176b573d6000803e3d6000fd5b50505050919050565b3360009081526001602081905260409091205460ff161515148061179757503033145b6117d25760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b6001600160a01b0316600090815260016020819052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055565b600073__$c2cf3eebb563d155e336d59c40be15cffe$__63c9ceb9518585856040518463ffffffff1660e01b815260040180846001600160a01b0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561189757818101518382015260200161187f565b50505050905090810190601f1680156118c45780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b1580156118e357600080fd5b505af41580156118f7573d6000803e3d6000fd5b505050506040513d602081101561190d57600080fd5b50516002546005549192506110ea9130916001600160a01b0390811691168960018a87612047565b6001600160a01b031660009081526001602052604090205460ff1690565b3360009081526001602081905260409091205460ff161515148061197657503033145b6119b15760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b600254604080517f8851debd0000000000000000000000000000000000000000000000000000000081526001600160a01b039092166004830152602482018390525173__$415eb1c69eabc622d82690315fa0e33bfb$__91638851debd916044808301926000929190829003018186803b158015610b0f57600080fd5b604080517fd6c49d760000000000000000000000000000000000000000000000000000000081526001600160a01b038086166004830152841660248201528215156044820152905160009173__$c2cf3eebb563d155e336d59c40be15cffe$__9163d6c49d7691606480820192602092909190829003018186803b158015611ab557600080fd5b505af4158015611ac9573d6000803e3d6000fd5b505050506040513d6020811015611adf57600080fd5b50516002546005549192506110ea9130916001600160a01b0390811691168960038a87612047565b3360009081526001602081905260409091205460ff1615151480611b2a57503033145b611b655760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b336000526001602052565b60085460009060ff1615611bcb576040805162461bcd60e51b815260206004820152600e60248201527f414c52454144595f495353554544000000000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526000602483018190526207a1206044840152925193169263156e29f69260648084019391929182900301818387803b158015611c4057600080fd5b505af1158015611c54573d6000803e3d6000fd5b5050600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555050604080516207a120815290516001600160a01b038416917f1b9ddf8f7c45e0567932349c127951357a3f9b5a821eeeec6e44d771debbb490919081900360200190a2919050565b33600090815260016020819052604082205460ff1615151480611cec57503033145b611d275760405162461bcd60e51b81526004018080602001828103825260288152602001806123576028913960400191505060405180910390fd5b600254604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260016024830152604482018690529151919092169163156e29f691606480830192600092919082900301818387803b158015611d9c57600080fd5b505af1158015611db0573d6000803e3d6000fd5b5050505092915050565b600054610100900460ff1680611dd35750611dd3612311565b80611de1575060005460ff16155b611e1c5760405162461bcd60e51b815260040180806020018281038252602e815260200180612329602e913960400191505060405180910390fd5b600054610100900460ff16158015611e8257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b600280546001600160a01b038088167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600380548784169083161790556004805486841690831617905560058054928516929091169190911790558015610b2357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555050505050565b600082821115611f70576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60065481161490565b600082820183811015611fd9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000808211612036576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161203f57fe5b049392505050565b6000856001600160a01b0316634c300076868585886040518563ffffffff1660e01b815260040180856001600160a01b0316815260200180602001846001600160a01b0316815260200183600381111561209d57fe5b8152602001828103825285818151815260200191508051906020019080838360005b838110156120d75781810151838201526020016120bf565b50505050905090810190601f1680156121045780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561212657600080fd5b505af115801561213a573d6000803e3d6000fd5b505050506040513d602081101561215057600080fd5b5051604080517fd104f8f50000000000000000000000000000000000000000000000000000000081526001600160a01b038a8116600483015291519293509083169163d104f8f59160248082019260009290919082900301818387803b1580156121b957600080fd5b505af11580156121cd573d6000803e3d6000fd5b50505050806001600160a01b031663c42cf535896040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561222057600080fd5b505af1158015612234573d6000803e3d6000fd5b50505050866001600160a01b031663a7fc7a07826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561228757600080fd5b505af115801561229b573d6000803e3d6000fd5b50505050876001600160a01b031663a7fc7a07826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156122ee57600080fd5b505af1158015612302573d6000803e3d6000fd5b50505050979650505050505050565b600061231c30612322565b15905090565b3b15159056fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f6e74726f6c6c6572a26469706673582212208c6361a64ddf1a7ad46e6c8b00e70bd66dcbfca0b79a76cfb97ae39ffe7d9e1864736f6c63430007030033",
  "libraries": {
    "GovernanceLib": "0xB22dB11bBB52ffCb45d832390829Ba67214C6fAa",
    "Strings": "0x14528C987867F4cBfC37010bF62eC95b6A95aF06",
    "SafeMath": "0x31C39200452Ba593fF2083421aeFa7921B830eb2",
    "NFTGemLib": "0x4A6bcA3C92caC20f16f6DA6dE30caa7E03772ABf",
    "ProposalsLib": "0xD91d1Bc305B74d01D449D0C3E72a76d6A553c54B",
    "UniswapLib": "0x047a12B6Be14AEE36B3346CC27fF5b4C9A8d03F9",
    "Create2": "0x543e712c216CF072992d58059e6716873040549B"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "createChangeFeeProposal(address,string,address,address,uint256)": {
        "details": "create a proposal to change fees for a token / pool"
      },
      "createFundProjectProposal(address,string,address,string,uint256)": {
        "details": "create a proposal to craete a project funding proposal"
      },
      "createNewPoolProposal(address,string,string,string,uint256,uint256,uint256,uint256,uint256,address)": {
        "details": "create a proposal to create a new pool"
      },
      "createPool(string,string,uint256,uint256,uint256,uint256,uint256,address)": {
        "details": "create a new pool - public, only callable by a controller of this contract"
      },
      "createProposalVoteTokens(uint256)": {
        "details": "create proposal vote tokens"
      },
      "createSystemPool(string,string,uint256,uint256,uint256,uint256,uint256,address)": {
        "details": "create a new pool - public, only callable by a controller of this contract"
      },
      "createUpdateAllowlistProposal(address,string,address,address,bool)": {
        "details": "create a proposal to update the allowlist of a token/pool"
      },
      "destroyProposalVoteTokens(uint256)": {
        "details": "destroy proposal vote tokens"
      },
      "executeProposal(address)": {
        "details": "execute proposal"
      },
      "initialize(address,address,address,address)": {
        "details": "init this smart contract"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "issueFuelToken(address,uint256)": {
        "details": "maybe issue a governance token to receiver"
      },
      "issueInitialGovernanceTokens(address)": {
        "details": "issue initial governance tokens"
      },
      "maybeIssueGovernanceToken(address)": {
        "details": "maybe issue a governance token to receiver"
      },
      "relinquishControl()": {
        "details": "Check if this address is a controller"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11190,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11193,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 709,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2155,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "multitoken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2157,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "factory",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2159,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "feeTracker",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2161,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "proposalFactory",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2183,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "governTokenDiff",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2185,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "sinceLastIncrease",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2187,
        "contract": "src/governance/NFTGemGovernor.sol:NFTGemGovernor",
        "label": "governanceIssued",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}