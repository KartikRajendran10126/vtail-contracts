{
  "address": "0xc5AFB9F659B149A20D2171daa1E45DA19Fc88ccD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_mintingMax",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "imx",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "blueprint",
          "type": "bytes"
        }
      ],
      "name": "AssetMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allTokenHashes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "baseUri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blueprints",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenHash",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "mintingBlob",
          "type": "bytes"
        }
      ],
      "name": "mintFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "owns",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_result",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "royaltyOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseU",
          "type": "string"
        }
      ],
      "name": "setBaseTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "valu",
          "type": "address"
        }
      ],
      "name": "setProxyRegistryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "supportsIface",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "_tokenUri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb94a1f3faeb0ec879aac12a1ce29bd78fb58285ec186a4578c61414b38e4664",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0xc5AFB9F659B149A20D2171daa1E45DA19Fc88ccD",
    "transactionIndex": 4,
    "gasUsed": "2638934",
    "logsBloom": "0x
    "blockHash": "0x8dac065226b8d70614a8fb76849451a480fd7734f618c1c81c7507d16ca303bf",
    "transactionHash": "0xeb94a1f3faeb0ec879aac12a1ce29bd78fb58285ec186a4578c61414b38e4664",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 11321399,
        "transactionHash": "0xeb94a1f3faeb0ec879aac12a1ce29bd78fb58285ec186a4578c61414b38e4664",
        "address": "0xc5AFB9F659B149A20D2171daa1E45DA19Fc88ccD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e5e82ae456c04ad0879785b4f678a4fcace12aaf"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x8dac065226b8d70614a8fb76849451a480fd7734f618c1c81c7507d16ca303bf"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 11321399,
        "transactionHash": "0xeb94a1f3faeb0ec879aac12a1ce29bd78fb58285ec186a4578c61414b38e4664",
        "address": "0xc5AFB9F659B149A20D2171daa1E45DA19Fc88ccD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000e5e82ae456c04ad0879785b4f678a4fcace12aaf",
          "0x000000000000000000000000e5e82ae456c04ad0879785b4f678a4fcace12aaf"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x8dac065226b8d70614a8fb76849451a480fd7734f618c1c81c7507d16ca303bf"
      }
    ],
    "blockNumber": 11321399,
    "cumulativeGasUsed": "3342125",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Scary Devils",
    "DEVILS",
    9999,
    "https://scarydevils.nft/",
    "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "0x4527be8f31e2ebfbef4fcaddb5a17447b27d2aef"
  ],
  "solcInputHash": "21cb6fc5229af78c1b03b2428276b37d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_mintingMax\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"imx\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"blueprint\",\"type\":\"bytes\"}],\"name\":\"AssetMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTokenHashes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blueprints\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenHash\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"mintingBlob\",\"type\":\"bytes\"}],\"name\":\"mintFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"owns\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_result\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"royaltyOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseU\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valu\",\"type\":\"address\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supportsIface\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_tokenUri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"see  [EIP-20: Basic token standard]\",\"kind\":\"dev\",\"methods\":{\"_totalSupply()\":{\"details\":\"mint an NFT of the given id to the target address\",\"returns\":{\"totalSupply\":\"the total supply of the token\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseTokenURI()\":{\"returns\":{\"baseUri\":\"- the base URI\"}},\"constructor\":{\"details\":\"Initializes the contract with the minter, the mintingMax and the total supply.\",\"params\":{\"_mintingMax\":\"the total number of tokens  to be minted\",\"_uri\":\"the base uri for the token\",\"name\":\"the token name\",\"symbol\":\"the token symbol\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getFee(uint256)\":{\"params\":{\"_id\":\"- id of the token hash \"},\"returns\":{\"fee\":\"- the fee\"}},\"getMinter()\":{\"details\":\"get the allowed minter\"},\"mint(address,uint256)\":{\"details\":\"mint an NFT of the given id to the target address\",\"params\":{\"receiver\":\"the tokenHash to mint them\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxyRegistryAddress()\":{\"returns\":{\"_0\":\"baseUri - the base URI\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"ERC2981 - return the receiver and royalty payment given the id and sale price\",\"params\":{\"_salePrice\":\"the price of the token\",\"_tokenId\":\"the id of the token\"},\"returns\":{\"receiver\":\"the receiver\",\"royaltyAmount\":\"the royalty payment\"}},\"royaltyOwner(uint256)\":{\"params\":{\"_id\":\"- id of the token hash \"},\"returns\":{\"owner\":\"- the royalty owner\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setFee(uint256,uint256)\":{\"params\":{\"_fee\":\"- the fee permilliage to set\",\"_id\":\"- id of the token hash \"}},\"setMinter(address)\":{\"details\":\"set the allowed minter\"},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"- the interface id to check\"},\"returns\":{\"supportsIface\":\"- whether the interface is supported\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"_tokenId\":\"- the interface id to check\"},\"returns\":{\"_tokenUri\":\"- the token  URI\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferOwnership(uint256,address)\":{\"params\":{\"_id\":\"- id of the token hash \",\"_newOwner\":\"- address of the new owners \"}}},\"title\":\"ERC721 contract for VTail.com\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"baseTokenURI()\":{\"notice\":\"the base token URI\"},\"getFee(uint256)\":{\"notice\":\"get the fee permilliage for a token hash\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\"},\"proxyRegistryAddress()\":{\"notice\":\"the base token URI\"},\"royaltyOwner(uint256)\":{\"notice\":\"get the royalty receiver for a token hash\"},\"setBaseTokenURI(string)\":{\"notice\":\"the base token URI\"},\"setFee(uint256,uint256)\":{\"notice\":\"set the fee permilliage for a token hash\"},\"setProxyRegistryAddress(address)\":{\"notice\":\"the base token URI\"},\"supportsInterface(bytes4)\":{\"notice\":\"ERC165 interface responder for this contract\"},\"tokenURI(uint256)\":{\"notice\":\"the base token URI\"},\"transferOwnership(uint256,address)\":{\"notice\":\"get the royalty receiver for a token hash\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/VTailERC721.sol\":\"VTailERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2222},\"remappings\":[]},\"sources\":{\"@imtbl/imx-contracts/contracts/IMintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IMintable {\\n    function mintFor(\\n        address to,\\n        uint256 id,\\n        bytes calldata blueprint\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7abf7a933667e6b3f57955076c3f49a16be0246d1e44b054d5e58d86ed6f1281\",\"license\":\"MIT\"},\"@imtbl/imx-contracts/contracts/Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IMintable.sol\\\";\\nimport \\\"./utils/Minting.sol\\\";\\n\\nabstract contract Mintable is Ownable, IMintable {\\n    address public imx;\\n    mapping(uint256 => bytes) public blueprints;\\n\\n    event AssetMinted(address to, uint256 id, bytes blueprint);\\n\\n    constructor(address _owner, address _imx) {\\n        imx = _imx;\\n        require(_owner != address(0), \\\"Owner must not be empty\\\");\\n        transferOwnership(_owner);\\n    }\\n\\n    modifier onlyIMX() {\\n        require(msg.sender == imx, \\\"Function can only be called by IMX\\\");\\n        _;\\n    }\\n\\n    function mintFor(\\n        address user,\\n        uint256 quantity,\\n        bytes calldata mintingBlob\\n    ) external override onlyIMX {\\n        require(quantity == 1, \\\"Mintable: invalid quantity\\\");\\n        (uint256 id, bytes memory blueprint) = Minting.split(mintingBlob);\\n        _mintFor(user, id, blueprint);\\n        blueprints[id] = blueprint;\\n        emit AssetMinted(user, id, blueprint);\\n    }\\n\\n    function _mintFor(\\n        address to,\\n        uint256 id,\\n        bytes memory blueprint\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0xe741900bccb3bc4bb000e8babc7f134ef4d3798c61b748d200a1ca4233d91f53\",\"license\":\"MIT\"},\"@imtbl/imx-contracts/contracts/utils/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary Bytes {\\n    /**\\n     * @dev Converts a `uint256` to a `string`.\\n     * via OraclizeAPI - MIT licence\\n     * https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n     */\\n    function fromUint(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + (temp % 10)));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    bytes constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * Index Of\\n     *\\n     * Locates and returns the position of a character within a string starting\\n     * from a defined offset\\n     *\\n     * @param _base When being used for a data type this is the extended object\\n     *              otherwise this is the string acting as the haystack to be\\n     *              searched\\n     * @param _value The needle to search for, at present this is currently\\n     *               limited to one character\\n     * @param _offset The starting point to start searching from which can start\\n     *                from 0, but must not exceed the length of the string\\n     * @return int The position of the needle starting from 0 and returning -1\\n     *             in the case of no matches found\\n     */\\n    function indexOf(\\n        bytes memory _base,\\n        string memory _value,\\n        uint256 _offset\\n    ) internal pure returns (int256) {\\n        bytes memory _valueBytes = bytes(_value);\\n\\n        assert(_valueBytes.length == 1);\\n\\n        for (uint256 i = _offset; i < _base.length; i++) {\\n            if (_base[i] == _valueBytes[0]) {\\n                return int256(i);\\n            }\\n        }\\n\\n        return -1;\\n    }\\n\\n    function substring(\\n        bytes memory strBytes,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) internal pure returns (string memory) {\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            result[i - startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n\\n    function toUint(bytes memory b) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            uint256 val = uint256(uint8(b[i]));\\n            if (val >= 48 && val <= 57) {\\n                result = result * 10 + (val - 48);\\n            }\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd04da25afaa2f618356baebd9dc1f38604e2dc52ec666f5c50afc02bbbf3ade0\",\"license\":\"MIT\"},\"@imtbl/imx-contracts/contracts/utils/Minting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Bytes.sol\\\";\\n\\nlibrary Minting {\\n    // Split the minting blob into token_id and blueprint portions\\n    // {token_id}:{blueprint}\\n\\n    function split(bytes calldata blob)\\n        internal\\n        pure\\n        returns (uint256, bytes memory)\\n    {\\n        int256 index = Bytes.indexOf(blob, \\\":\\\", 0);\\n        require(index >= 0, \\\"Separator must exist\\\");\\n        // Trim the { and } from the parameters\\n        uint256 tokenID = Bytes.toUint(blob[1:uint256(index) - 1]);\\n        uint256 blueprintLength = blob.length - uint256(index) - 3;\\n        if (blueprintLength == 0) {\\n            return (tokenID, bytes(\\\"\\\"));\\n        }\\n        bytes calldata blueprint = blob[uint256(index) + 2:blob.length - 1];\\n        return (tokenID, blueprint);\\n    }\\n}\\n\",\"keccak256\":\"0x40205ad3ae7575ee24847b05de53f1c1851270b885cffaec46994642cebd3083\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x2f27682302bd27f76399273e73cedecd2de098aa101401a3b5f2196f520da6c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0x4edcfd287868aeccefbb15099987aa9fc44b209dd00545c8b048d4e9a64ba94f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/ERC2981.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"./IERC2981Holder.sol\\\";\\r\\nimport \\\"./IERC2981.sol\\\";\\r\\n\\r\\n///\\r\\n/// @dev An implementor for the NFT Royalty Standard. Provides interface\\r\\n/// response to erc2981 as well as a way to modify the royalty fees\\r\\n/// per token and a way to transfer ownership of a token.\\r\\n///\\r\\nabstract contract ERC2981 is ERC165, IERC2981, IERC2981Holder {\\r\\n\\r\\n    // royalty receivers by token hash \\r\\n    mapping(uint256 => address) internal royaltyReceiversByHash;\\r\\n\\r\\n    // royalties for each token hash - expressed as permilliage of total supply\\r\\n    mapping(uint256 => uint256) internal royaltyFeesByHash;\\r\\n\\r\\n    bytes4 internal constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\r\\n\\r\\n    /// @dev only the royalty owner shall pass\\r\\n    modifier onlyRoyaltyOwner(uint256 _id) {\\r\\n        require(royaltyReceiversByHash[_id] == msg.sender, \\r\\n        \\\"Only the owner can modify the royalty fees\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev ERC2981 - return the receiver and royalty payment given the id and sale price\\r\\n     * @param _tokenId the id of the token\\r\\n     * @param _salePrice the price of the token\\r\\n     * @return receiver the receiver\\r\\n     * @return royaltyAmount the royalty payment\\r\\n     */\\r\\n    function royaltyInfo(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _salePrice\\r\\n    ) external view override returns (\\r\\n        address receiver,\\r\\n        uint256 royaltyAmount\\r\\n    ) {\\r\\n        require(_salePrice > 0, \\\"Sale price must be greater than 0\\\");\\r\\n        require(_tokenId > 0, \\\"Token Id must be valid\\\");\\r\\n        \\r\\n        // get the receiver of the royalty\\r\\n        receiver = royaltyReceiversByHash[_tokenId];\\r\\n\\r\\n        // calculate the royalty amount. royalty is expressed as permilliage of total supply\\r\\n        royaltyAmount = royaltyFeesByHash[_tokenId] / 1000000 * _salePrice;\\r\\n    }\\r\\n\\r\\n    /// @notice ERC165 interface responder for this contract\\r\\n    /// @param interfaceId - the interface id to check\\r\\n    /// @return supportsIface - whether the interface is supported\\r\\n    function supportsInterface(bytes4 interfaceId) \\r\\n        public \\r\\n        view \\r\\n        virtual \\r\\n        override returns (bool supportsIface) {\\r\\n        supportsIface = interfaceId == type(IERC2981).interfaceId \\r\\n        || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /// @notice set the fee permilliage for a token hash\\r\\n    /// @param _id - id of the token hash \\r\\n    /// @param _fee - the fee permilliage to set\\r\\n    function setFee(uint256 _id, uint256 _fee) onlyRoyaltyOwner(_id) external override {\\r\\n        require(_id != 0, \\\"Fee cannot be zero\\\");\\r\\n        royaltyFeesByHash[_id] = _fee;\\r\\n    }\\r\\n\\r\\n    /// @notice get the fee permilliage for a token hash\\r\\n    /// @param _id - id of the token hash \\r\\n    /// @return fee - the fee\\r\\n    function getFee(uint256 _id) external view override returns (uint256 fee) {\\r\\n        fee = royaltyFeesByHash[_id];\\r\\n    }\\r\\n\\r\\n    /// @notice get the royalty receiver for a token hash\\r\\n    /// @param _id - id of the token hash \\r\\n    /// @return owner - the royalty owner\\r\\n    function royaltyOwner(uint256 _id) external view override returns (address owner) {\\r\\n        owner = royaltyReceiversByHash[_id];\\r\\n    }\\r\\n\\r\\n    /// @notice get the royalty receiver for a token hash\\r\\n    /// @param _id - id of the token hash \\r\\n    /// @param _newOwner - address of the new owners \\r\\n    function transferOwnership(uint256 _id, address _newOwner) onlyRoyaltyOwner(_id) external override {\\r\\n        require(_id != 0 && _newOwner != address(0), \\\"Invalid token id or new owner\\\");\\r\\n        royaltyReceiversByHash[_id] = _newOwner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x78c6ff958388549ed6c0e305fbd6e12a81c5c8db132c4299cf2e684b81a529f6\",\"license\":\"Unlicense\"},\"src/IERC2981.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\r\\n\\r\\n///\\r\\n/// @dev Interface for the NFT Royalty Standard\\r\\n///\\r\\ninterface IERC2981 {\\r\\n\\r\\n    /// @notice Called with the sale price to determine how much royalty\\r\\n    //          is owed and to whom.\\r\\n    /// @param _tokenId - the NFT asset queried for royalty information\\r\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\r\\n    /// @return receiver - address of who should be sent the royalty payment\\r\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\r\\n    function royaltyInfo(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _salePrice\\r\\n    ) external view returns (\\r\\n        address receiver,\\r\\n        uint256 royaltyAmount\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x4cc373a167aa82dcd02e777c24f0a69d3a4b6b71a386d9d75eeab3136059e12e\",\"license\":\"Unlicense\"},\"src/IERC2981Holder.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\r\\n\\r\\n///\\r\\n/// @dev interface for a holder (owner) of an ERC2981-enabled token\\r\\n/// @dev to modify the fee amount as well as transfer ownership of\\r\\n/// @dev royalty to someone else.\\r\\n///\\r\\ninterface IERC2981Holder {\\r\\n\\r\\n    function setFee(uint256 _id, uint256 _fee) external;\\r\\n    function getFee(uint256 _id) external returns (uint256);\\r\\n\\r\\n    function royaltyOwner(uint256 _id) external returns (address);\\r\\n    function transferOwnership(uint256 _id, address _newOwner) external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x27a589a1cfe2cb4a294f83091a912d769d32fecc1966ad601058736599eef87b\",\"license\":\"Unlicense\"},\"src/ITokenSale.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface ITokenSale {\\n\\n    /// @notice Called to purchase some quantity of a token\\n    /// @param receiver - the address of the account receiving the item\\n    /// @param quantity - the quantity to purchase. max 5.\\n    function purchase(address receiver, uint256 quantity) external payable returns (TokenMinting[] memory mintings);\\n\\n    /// @notice returns the sale price in ETH for the given quantity.\\n    /// @param quantity - the quantity to purchase. max 5.\\n    /// @return price - the sale price for the given quantity\\n    function salePrice(uint256 quantity) external view returns (uint256 price);\\n\\n    /// @notice Mint a specific tokenhash to a specific address ( up to har-cap limit)\\n    /// only for controller of token\\n    /// @param receiver - the address of the account receiving the item\\n    /// @param tokenHash - token hash to mint to the receiver\\n    function mint(address receiver, uint256 tokenHash) external;\\n\\n    /// @notice set the revenue partner on this tokensale. we split revenue with the partner\\n    /// only for controller of token\\n    /// @param partner - the address of the partner. will receive x%% of the revenue\\n    /// @param permill - permilliage of the revenue to be split. min 0 max 1000000\\n    function setRevenuePartner(address partner, uint256 permill) external;\\n\\n    /// @notice get the revenue partner on this tokensale. we split revenue with the partner\\n    /// @return partner - the address of the partner. will receive x%% of the revenue\\n    /// @return permill - permilliage of the revenue to be split. permill = 1 / 1000000\\n    function getRevenuePartner() external view returns (address , uint256);\\n\\n    /// @notice open / close the tokensale\\n    /// only for controller of token\\n    /// @param openState - the open state of the tokensale\\n    function setOpenState(bool openState) external;\\n\\n    /// @notice get the token sale open state\\n    /// @return openState - the open state of the tokensale\\n    function getOpenState() external view returns (bool);\\n\\n    /// @notice set the psale price\\n    /// only for controller of token\\n    /// @param _salePrice - the open state of the tokensale\\n    function setSalePrice(uint256 _salePrice) external;\\n\\n    /// @notice get the token sale price\\n    /// @return salePrice - the open state of the tokensale\\n    function getSalePrice() external view returns(uint256);\\n\\n\\n    /// @notice get the address of the sole token\\n    /// @return token - the address of the sole token\\n    function getSaleToken() external view returns(address);\\n\\n    /// @notice get the primary token sale payee\\n    /// @return payee_ the token sale payee\\n    function getPayee() external view returns (address payee_);\\n\\n    /// @notice set the primary token sale payee\\n    /// @param _payee - the token sale payee\\n    function setPayee(address _payee) external;\\n\\n    /// @notice return the mintee list\\n    /// @return _list the token sale payee\\n    function minterList() external view returns (TokenMinting[] memory _list);\\n\\n    /// @notice return the purchaser list\\n    /// @return _list the token sale payee\\n    function purchaserList() external view returns (TokenMinting[] memory _list);\\n\\n    struct TokenMinting {\\n        address recipient;\\n        uint256 tokenHash;\\n    }\\n\\n    event TokenSold(address indexed receiver, uint256 tokenHash);\\n    event PayeeChanged(address indexed receiver);\\n    event RevenuePartnerChanged(address indexed partner, uint256 permill);\\n}\\n\\ninterface IMintableToken {\\n    function mint(address receiver, uint256 tokenHash) external;\\n    function getMinter() external view returns (address);\\n}\\n\\n\",\"keccak256\":\"0x1545eda52bbeda10815931729eef2402f250083098b0fe4244e283bbb9d2aa8c\",\"license\":\"Unlicense\"},\"src/IVTailERC721.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\nimport \\\"./ITokenSale.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface IVTailERC721 is IERC721, IMintableToken {\\n    // OpenSEA proxy registry\\n    function setProxyRegistryAddress(address valu) external;\\n    function proxyRegistryAddress() external view returns (address);\\n    // base tokewn URI\\n    function setBaseTokenURI(string memory _baseU) external;\\n    function baseTokenURI() external view returns (string memory);\\n\\n    // utility - checks if user owns the given tokens\\n    function owns(address owner, uint256[] memory tokenIds) external view returns (bool[] memory);\\n    // utility - return all token owners\\n    function allTokenHashes() external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xae37f0855f0c329b6410c724451982a0b79b88bfe3da2628c706b238954ca066\",\"license\":\"Unlicense\"},\"src/VTailERC721.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./ERC2981.sol\\\";\\nimport \\\"./ITokenSale.sol\\\";\\nimport \\\"./IVTailERC721.sol\\\";\\n\\nimport \\\"@imtbl/imx-contracts/contracts/Mintable.sol\\\";\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\n/**\\n * @title ERC721 contract for VTail.com\\n * @dev see  [EIP-20: Basic token standard]\\n */\\ncontract VTailERC721 is IVTailERC721, ERC721, ERC2981, Ownable, Mintable {\\n\\n    // the base URI for URI calls\\n    string private _baseUri;\\n\\n    // the proxy registry address\\n    address _proxyRegistryAddress;\\n\\n    // the minter of this token - it is minted on demand\\n    address private minter;\\n\\n    // the max quantity that can be minted\\n    uint256 private mintingMax;\\n\\n    // the max quantity that can be minted\\n    uint256 private nextIndexValue;\\n\\n    // the token owners\\n    uint256[] private tokenHashes;\\n\\n    // mofifier - only minter can mint\\n    modifier onlyMinter() {\\n        require(msg.sender == minter, \\\"Only the minter can mint tokens\\\");\\n        _;\\n    }\\n    /**\\n     * @dev Initializes the contract with the minter, the mintingMax and the total supply.\\n     * @param name the token name\\n     * @param symbol the token symbol\\n     * @param _mintingMax the total number of tokens  to be minted\\n     * @param _uri the base uri for the token\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 _mintingMax,\\n        string memory _uri,\\n        address _owner,\\n        address imx) ERC721(name, symbol) Mintable(_owner, imx) {\\n            // set the minter and mintinx max\\n            mintingMax = _mintingMax;\\n            _baseUri = _uri;\\n            nextIndexValue = 1;\\n    }\\n\\n    /**\\n     * @dev mint an NFT of the given id to the target address\\n     * @return totalSupply the total supply of the token\\n     */\\n    function _totalSupply() public view returns (uint256 totalSupply) {\\n        totalSupply = nextIndexValue - 1;\\n    }\\n\\n    /**\\n     * @dev set the allowed minter\\n     */\\n    function setMinter(address minter_) public {\\n        require(minter == address(0), 'immutable');\\n        minter = minter_;\\n    }\\n\\n    /**\\n     * @dev get the allowed minter\\n     */\\n    function getMinter() external view override returns (address) {\\n        return minter;\\n    }\\n\\n    /**\\n     * @dev mint an NFT of the given id to the target address\\n     * @param receiver the address of the mintee\\n      * @param receiver the tokenHash to mint them\\n     */\\n    function mint(address receiver, uint256 tokenHash) external override onlyMinter {\\n\\n        // require that less than mintingMax tokens have been minted\\n        require(_totalSupply() <= mintingMax, \\\"Minting max reached\\\");\\n        // set the initial royalty receiver to the receiver of the token\\n        royaltyReceiversByHash[tokenHash] = receiver;\\n        tokenHashes.push(tokenHash);\\n        nextIndexValue++;\\n        // mint the token\\n        _mint(receiver, tokenHash);\\n    }\\n\\n    /**\\n     * @dev _mintFor - immutable x minting\\n     * @param to the address of the mintee\\n      * @param id the tokenHash to mint them\\n     */\\n    function _mintFor(\\n        address to,\\n        uint256 id,\\n        bytes memory\\n    ) internal override {\\n        _mint(to, id);\\n    }\\n\\n    /// @notice ERC165 interface responder for this contract\\n    /// @param interfaceId - the interface id to check\\n    /// @return supportsIface - whether the interface is supported\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC2981, ERC721, IERC165) returns (bool supportsIface) {\\n        supportsIface = interfaceId == type(IERC2981).interfaceId\\n        || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts\\n     * to enable gas-less listings.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        override(ERC721, IERC721)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        if(_proxyRegistryAddress != address(0)) {\\n            // Whitelist OpenSea proxy contract for easy trading.\\n            ProxyRegistry proxyRegistry = ProxyRegistry(_proxyRegistryAddress);\\n            if (address(proxyRegistry.proxies(owner)) == operator) {\\n                return true;\\n            }\\n        }\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    /// @notice the base token URI\\n    /// @return baseUri - the base URI\\n    function baseTokenURI()\\n        external override\\n        view returns (string memory baseUri) {\\n        baseUri = _baseUri;\\n    }\\n\\n    /// @notice the base token URI\\n    function setBaseTokenURI(string memory _baseU)\\n        external override onlyOwner {\\n        _baseUri = _baseU;\\n    }\\n\\n    /// @notice the base token URI\\n    /// @return baseUri - the base URI\\n    function proxyRegistryAddress()\\n        external override\\n        view returns (address) {\\n        return _proxyRegistryAddress;\\n    }\\n\\n    /// @notice the base token URI\\n    function setProxyRegistryAddress(address valu)\\n        external override onlyOwner {\\n        _proxyRegistryAddress = valu;\\n    }\\n\\n    /// @notice the base token URI\\n    /// @param _tokenId - the interface id to check\\n    /// @return _tokenUri - the token  URI\\n    function tokenURI(uint256 _tokenId)\\n        override\\n        public\\n        view returns (string memory _tokenUri) {\\n        _tokenUri = string(\\n            abi.encodePacked(_baseUri, Strings.toString(_tokenId))\\n        );\\n    }\\n\\n    // utility - checks if user owns the given tokens\\n    function owns(address owner, uint256[] memory tokenIds) external view override returns (bool[] memory _result) {\\n        _result = new bool[](tokenIds.length);\\n        for(uint256 i = 0; i < tokenIds.length; i++) {\\n            _result[i] = ownerOf(tokenIds[i]) == owner;\\n        }\\n    }\\n\\n    // utility - return all token owners\\n    function allTokenHashes() external view override returns (uint256[] memory) {\\n        return tokenHashes;\\n    }\\n}\\n\",\"keccak256\":\"0x2cb256e8a3d09884804173b062a62c3577b8ad109eba3a3ca5cba06fa41eb5d8\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003089380380620030898339810160408190526200003491620003ce565b8181878781600090805190602001906200005092919062000258565b5080516200006690600190602084019062000258565b505050620000836200007d6200013160201b60201c565b62000135565b600980546001600160a01b0319166001600160a01b03838116919091179091558216620000f75760405162461bcd60e51b815260206004820152601760248201527f4f776e6572206d757374206e6f7420626520656d70747900000000000000000060448201526064015b60405180910390fd5b620001028262000187565b5050600e84905582516200011e90600b90602086019062000258565b50506001600f5550620004dc9350505050565b3390565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6008546001600160a01b03163314620001e35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000ee565b6001600160a01b0381166200024a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000ee565b620002558162000135565b50565b828054620002669062000489565b90600052602060002090601f0160209004810192826200028a5760008555620002d5565b82601f10620002a557805160ff1916838001178555620002d5565b82800160010185558215620002d5579182015b82811115620002d5578251825591602001919060010190620002b8565b50620002e3929150620002e7565b5090565b5b80821115620002e35760008155600101620002e8565b80516001600160a01b03811681146200031657600080fd5b919050565b600082601f8301126200032c578081fd5b81516001600160401b0380821115620003495762000349620004c6565b604051601f8301601f19908116603f01168101908282118183101715620003745762000374620004c6565b8160405283815260209250868385880101111562000390578485fd5b8491505b83821015620003b3578582018301518183018401529082019062000394565b83821115620003c457848385830101525b9695505050505050565b60008060008060008060c08789031215620003e7578182fd5b86516001600160401b0380821115620003fe578384fd5b6200040c8a838b016200031b565b9750602089015191508082111562000422578384fd5b620004308a838b016200031b565b96506040890151955060608901519150808211156200044d578384fd5b506200045c89828a016200031b565b9350506200046d60808801620002fe565b91506200047d60a08801620002fe565b90509295509295509295565b600181811c908216806200049e57607f821691505b60208210811415620004c057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612b9d80620004ec6000396000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c806370a082311161012a578063c87b56dd116100bd578063e985e9c51161008c578063f366751711610071578063f3667517146104cb578063fca3b5aa146104dc578063fcee45f4146104ef57600080fd5b8063e985e9c5146104a5578063f2fde38b146104b857600080fd5b8063c87b56dd14610466578063cd7c032614610479578063d26ea6c01461048a578063d547cfb71461049d57600080fd5b806395d89b41116100f957806395d89b4114610418578063a22cb46514610420578063b151683114610433578063b88d4fde1461045357600080fd5b806370a08231146103d7578063715018a6146103ea5780638a86993b146103f25780638da5cb5b1461040757600080fd5b806329507f73116101bd57806340c10f191161018c57806352f7c9881161017157806352f7c9881461039e5780636352211e146103b157806366bf33be146103c457600080fd5b806340c10f191461037857806342842e0e1461038b57600080fd5b806329507f731461030a5780632a55205a1461031d57806330176e131461034f5780633eaaf86b1461036257600080fd5b80630f08025f116101f95780630f08025f146102a857806319ee6e3f146102bb57806323b872dd146102ce57806326fc0209146102e157600080fd5b806301ffc9a71461022b57806306fdde0314610253578063081812fc14610268578063095ea7b314610293575b600080fd5b61023e6102393660046126cf565b61050f565b60405190151581526020015b60405180910390f35b61025b610553565b60405161024a9190612996565b61027b610276366004612769565b6105e5565b6040516001600160a01b03909116815260200161024a565b6102a66102a1366004612620565b610690565b005b60095461027b906001600160a01b031681565b6102a66102c936600461264b565b6107c2565b6102a66102dc366004612475565b610911565b61027b6102ef366004612769565b6000908152600660205260409020546001600160a01b031690565b6102a6610318366004612781565b610998565b61033061032b3660046127a5565b610ac5565b604080516001600160a01b03909316835260208301919091520161024a565b6102a661035d366004612723565b610bd9565b61036a610c4a565b60405190815260200161024a565b6102a6610386366004612620565b610c60565b6102a6610399366004612475565b610d96565b6102a66103ac3660046127a5565b610db1565b61027b6103bf366004612769565b610e9f565b61025b6103d2366004612769565b610f2a565b61036a6103e5366004612421565b610fc4565b6102a661105e565b6103fa6110c4565b60405161024a919061295e565b6008546001600160a01b031661027b565b61025b61111b565b6102a661042e3660046125ef565b61112a565b610446610441366004612532565b6111ef565b60405161024a9190612918565b6102a66104613660046124b5565b6112de565b61025b610474366004612769565b61136c565b600c546001600160a01b031661027b565b6102a6610498366004612421565b6113a0565b61025b611429565b61023e6104b336600461243d565b611438565b6102a66104c6366004612421565b611533565b600d546001600160a01b031661027b565b6102a66104ea366004612421565b611615565b61036a6104fd366004612769565b60009081526007602052604090205490565b60006001600160e01b031982167f2a55205a00000000000000000000000000000000000000000000000000000000148061054d575061054d8261169d565b92915050565b60606000805461056290612a90565b80601f016020809104026020016040519081016040528092919081815260200182805461058e90612a90565b80156105db5780601f106105b0576101008083540402835291602001916105db565b820191906000526020600020905b8154815290600101906020018083116105be57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166106745760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061069b82610e9f565b9050806001600160a01b0316836001600160a01b031614156107255760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161066b565b336001600160a01b038216148061074157506107418133611438565b6107b35760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161066b565b6107bd83836116db565b505050565b6009546001600160a01b031633146108425760405162461bcd60e51b815260206004820152602260248201527f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279204960448201527f4d58000000000000000000000000000000000000000000000000000000000000606482015260840161066b565b826001146108925760405162461bcd60e51b815260206004820152601a60248201527f4d696e7461626c653a20696e76616c6964207175616e74697479000000000000604482015260640161066b565b60008061089f8484611756565b915091506108ae868383611936565b6000828152600a6020908152604090912082516108cd92840190612330565b507f31e594f6b36b98ec520a91cbbba7b8724b1cec27393f86d8f0f6aa6084db0aaf868383604051610901939291906128f0565b60405180910390a1505050505050565b61091b3382611940565b61098d5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161066b565b6107bd838383611a28565b60008281526006602052604090205482906001600160a01b03163314610a265760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c7920746865206f776e65722063616e206d6f646966792074686520726f60448201527f79616c7479206665657300000000000000000000000000000000000000000000606482015260840161066b565b8215801590610a3d57506001600160a01b03821615155b610a895760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420746f6b656e206964206f72206e6577206f776e6572000000604482015260640161066b565b50600091825260066020526040909120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055565b60008060008311610b3e5760405162461bcd60e51b815260206004820152602160248201527f53616c65207072696365206d7573742062652067726561746572207468616e2060448201527f3000000000000000000000000000000000000000000000000000000000000000606482015260840161066b565b60008411610b8e5760405162461bcd60e51b815260206004820152601660248201527f546f6b656e204964206d7573742062652076616c696400000000000000000000604482015260640161066b565b6000848152600660209081526040808320546007909252909120546001600160a01b0390911692508390610bc690620f424090612a1a565b610bd09190612a2e565b90509250929050565b6008546001600160a01b03163314610c335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b8051610c4690600b906020840190612330565b5050565b60006001600f54610c5b9190612a4d565b905090565b600d546001600160a01b03163314610cba5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920746865206d696e7465722063616e206d696e7420746f6b656e7300604482015260640161066b565b600e54610cc5610c4a565b1115610d135760405162461bcd60e51b815260206004820152601360248201527f4d696e74696e67206d6178207265616368656400000000000000000000000000604482015260640161066b565b6000818152600660205260408120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055601080546001810182559082527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67201829055600f805491610d8783612acb565b9190505550610c468282611c02565b6107bd838383604051806020016040528060008152506112de565b60008281526006602052604090205482906001600160a01b03163314610e3f5760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c7920746865206f776e65722063616e206d6f646966792074686520726f60448201527f79616c7479206665657300000000000000000000000000000000000000000000606482015260840161066b565b82610e8c5760405162461bcd60e51b815260206004820152601260248201527f4665652063616e6e6f74206265207a65726f0000000000000000000000000000604482015260640161066b565b5060009182526007602052604090912055565b6000818152600260205260408120546001600160a01b03168061054d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e0000000000000000000000000000000000000000000000606482015260840161066b565b600a6020526000908152604090208054610f4390612a90565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6f90612a90565b8015610fbc5780601f10610f9157610100808354040283529160200191610fbc565b820191906000526020600020905b815481529060010190602001808311610f9f57829003601f168201915b505050505081565b60006001600160a01b0382166110425760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f206164647265737300000000000000000000000000000000000000000000606482015260840161066b565b506001600160a01b031660009081526003602052604090205490565b6008546001600160a01b031633146110b85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b6110c26000611d51565b565b606060108054806020026020016040519081016040528092919081815260200182805480156105db57602002820191906000526020600020905b8154815260200190600101908083116110fe575050505050905090565b60606001805461056290612a90565b6001600160a01b0382163314156111835760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161066b565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6060815167ffffffffffffffff81111561121957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611242578160200160208202803683370190505b50905060005b82518110156112d757836001600160a01b031661128b84838151811061127e57634e487b7160e01b600052603260045260246000fd5b6020026020010151610e9f565b6001600160a01b0316148282815181106112b557634e487b7160e01b600052603260045260246000fd5b91151560209283029190910190910152806112cf81612acb565b915050611248565b5092915050565b6112e83383611940565b61135a5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161066b565b61136684848484611db0565b50505050565b6060600b61137983611e39565b60405160200161138a92919061280e565b6040516020818303038152906040529050919050565b6008546001600160a01b031633146113fa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6060600b805461056290612a90565b600c546000906001600160a01b03161561150257600c546040517fc45527910000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291821691841690829063c45527919060240160206040518083038186803b1580156114af57600080fd5b505afa1580156114c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e79190612707565b6001600160a01b0316141561150057600191505061054d565b505b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff165b9392505050565b6008546001600160a01b0316331461158d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b6001600160a01b0381166116095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161066b565b61161281611d51565b50565b600d546001600160a01b03161561166e5760405162461bcd60e51b815260206004820152600960248201527f696d6d757461626c650000000000000000000000000000000000000000000000604482015260640161066b565b600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006001600160e01b031982167f2a55205a00000000000000000000000000000000000000000000000000000000148061054d575061054d82611f87565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061171d82610e9f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000606060006117d085858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060408051808201909152600181527f3a000000000000000000000000000000000000000000000000000000000000006020820152935091506120229050565b905060008112156118235760405162461bcd60e51b815260206004820152601460248201527f536570617261746f72206d757374206578697374000000000000000000000000604482015260640161066b565b600061187d866001876118368287612a4d565b92611843939291906129da565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061211492505050565b90506000600361188d8488612a4d565b6118979190612a4d565b9050806118bb5781604051806020016040528060008152509450945050505061192f565b36600088886118cb876002612a02565b906118d760018c612a4d565b926118e4939291906129da565b9150915083828281818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250959c50919a50505050505050505050505b9250929050565b6107bd8383611c02565b6000818152600260205260408120546001600160a01b03166119ca5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606482015260840161066b565b60006119d583610e9f565b9050806001600160a01b0316846001600160a01b03161480611a105750836001600160a01b0316611a05846105e5565b6001600160a01b0316145b80611a205750611a208185611438565b949350505050565b826001600160a01b0316611a3b82610e9f565b6001600160a01b031614611ab75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e0000000000000000000000000000000000000000000000606482015260840161066b565b6001600160a01b038216611b325760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161066b565b611b3d6000826116db565b6001600160a01b0383166000908152600360205260408120805460019290611b66908490612a4d565b90915550506001600160a01b0382166000908152600360205260408120805460019290611b94908490612a02565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216611c585760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161066b565b6000818152600260205260409020546001600160a01b031615611cbd5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161066b565b6001600160a01b0382166000908152600360205260408120805460019290611ce6908490612a02565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600880546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611dbb848484611a28565b611dc78484848461219b565b6113665760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161066b565b606081611e7957505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115611ea35780611e8d81612acb565b9150611e9c9050600a83612a1a565b9150611e7d565b60008167ffffffffffffffff811115611ecc57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611ef6576020820181803683370190505b5090505b8415611a2057611f0b600183612a4d565b9150611f18600a86612ae6565b611f23906030612a02565b60f81b818381518110611f4657634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611f80600a86612a1a565b9450611efa565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480611fea57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061054d57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461054d565b8151600090839060011461204657634e487b7160e01b600052600160045260246000fd5b825b8551811015612107578160008151811061207257634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168682815181106120bf57634e487b7160e01b600052603260045260246000fd5b01602001517fff000000000000000000000000000000000000000000000000000000000000001614156120f557915061152c9050565b806120ff81612acb565b915050612048565b5060001995945050505050565b600080805b83518110156112d757600084828151811061214457634e487b7160e01b600052603260045260246000fd5b016020015160f81c905060308110801590612160575060398111155b1561218857612170603082612a4d565b61217b84600a612a2e565b6121859190612a02565b92505b508061219381612acb565b915050612119565b60006001600160a01b0384163b15612325576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a02906121f89033908990889088906004016128b4565b602060405180830381600087803b15801561221257600080fd5b505af1925050508015612242575060408051601f3d908101601f1916820190925261223f918101906126eb565b60015b6122f2573d808015612270576040519150601f19603f3d011682016040523d82523d6000602084013e612275565b606091505b5080516122ea5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161066b565b805181602001fd5b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149050611a20565b506001949350505050565b82805461233c90612a90565b90600052602060002090601f01602090048101928261235e57600085556123a4565b82601f1061237757805160ff19168380011785556123a4565b828001600101855582156123a4579182015b828111156123a4578251825591602001919060010190612389565b506123b09291506123b4565b5090565b5b808211156123b057600081556001016123b5565b600067ffffffffffffffff8311156123e3576123e3612b26565b6123f66020601f19601f860116016129a9565b905082815283838301111561240a57600080fd5b828260208301376000602084830101529392505050565b600060208284031215612432578081fd5b813561152c81612b3c565b6000806040838503121561244f578081fd5b823561245a81612b3c565b9150602083013561246a81612b3c565b809150509250929050565b600080600060608486031215612489578081fd5b833561249481612b3c565b925060208401356124a481612b3c565b929592945050506040919091013590565b600080600080608085870312156124ca578081fd5b84356124d581612b3c565b935060208501356124e581612b3c565b925060408501359150606085013567ffffffffffffffff811115612507578182fd5b8501601f81018713612517578182fd5b612526878235602084016123c9565b91505092959194509250565b60008060408385031215612544578182fd5b823561254f81612b3c565b915060208381013567ffffffffffffffff8082111561256c578384fd5b818601915086601f83011261257f578384fd5b81358181111561259157612591612b26565b8060051b91506125a28483016129a9565b8181528481019084860184860187018b10156125bc578788fd5b8795505b838610156125de5780358352600195909501949186019186016125c0565b508096505050505050509250929050565b60008060408385031215612601578182fd5b823561260c81612b3c565b91506020830135801515811461246a578182fd5b60008060408385031215612632578182fd5b823561263d81612b3c565b946020939093013593505050565b60008060008060608587031215612660578384fd5b843561266b81612b3c565b935060208501359250604085013567ffffffffffffffff8082111561268e578384fd5b818701915087601f8301126126a1578384fd5b8135818111156126af578485fd5b8860208285010111156126c0578485fd5b95989497505060200194505050565b6000602082840312156126e0578081fd5b813561152c81612b51565b6000602082840312156126fc578081fd5b815161152c81612b51565b600060208284031215612718578081fd5b815161152c81612b3c565b600060208284031215612734578081fd5b813567ffffffffffffffff81111561274a578182fd5b8201601f8101841361275a578182fd5b611a20848235602084016123c9565b60006020828403121561277a578081fd5b5035919050565b60008060408385031215612793578182fd5b82359150602083013561246a81612b3c565b600080604083850312156127b7578182fd5b50508035926020909101359150565b600081518084526127de816020860160208601612a64565b601f01601f19169290920160200192915050565b60008151612804818560208601612a64565b9290920192915050565b600080845482600182811c91508083168061282a57607f831692505b602080841082141561284a57634e487b7160e01b87526022600452602487fd5b81801561285e576001811461286f5761289b565b60ff1986168952848901965061289b565b60008b815260209020885b868110156128935781548b82015290850190830161287a565b505084890196505b5050505050506128ab81856127f2565b95945050505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526128e660808301846127c6565b9695505050505050565b6001600160a01b03841681528260208201526060604082015260006128ab60608301846127c6565b6020808252825182820181905260009190848201906040850190845b81811015612952578351151583529284019291840191600101612934565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156129525783518352928401929184019160010161297a565b60208152600061152c60208301846127c6565b604051601f8201601f1916810167ffffffffffffffff811182821017156129d2576129d2612b26565b604052919050565b600080858511156129e9578182fd5b838611156129f5578182fd5b5050820193919092039150565b60008219821115612a1557612a15612afa565b500190565b600082612a2957612a29612b10565b500490565b6000816000190483118215151615612a4857612a48612afa565b500290565b600082821015612a5f57612a5f612afa565b500390565b60005b83811015612a7f578181015183820152602001612a67565b838111156113665750506000910152565b600181811c90821680612aa457607f821691505b60208210811415612ac557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612adf57612adf612afa565b5060010190565b600082612af557612af5612b10565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461161257600080fd5b6001600160e01b03198116811461161257600080fdfea2646970667358221220dc5273933b19e5e346cc377b680d48baec9e8a3a285081778741ec03e0857dde64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102265760003560e01c806370a082311161012a578063c87b56dd116100bd578063e985e9c51161008c578063f366751711610071578063f3667517146104cb578063fca3b5aa146104dc578063fcee45f4146104ef57600080fd5b8063e985e9c5146104a5578063f2fde38b146104b857600080fd5b8063c87b56dd14610466578063cd7c032614610479578063d26ea6c01461048a578063d547cfb71461049d57600080fd5b806395d89b41116100f957806395d89b4114610418578063a22cb46514610420578063b151683114610433578063b88d4fde1461045357600080fd5b806370a08231146103d7578063715018a6146103ea5780638a86993b146103f25780638da5cb5b1461040757600080fd5b806329507f73116101bd57806340c10f191161018c57806352f7c9881161017157806352f7c9881461039e5780636352211e146103b157806366bf33be146103c457600080fd5b806340c10f191461037857806342842e0e1461038b57600080fd5b806329507f731461030a5780632a55205a1461031d57806330176e131461034f5780633eaaf86b1461036257600080fd5b80630f08025f116101f95780630f08025f146102a857806319ee6e3f146102bb57806323b872dd146102ce57806326fc0209146102e157600080fd5b806301ffc9a71461022b57806306fdde0314610253578063081812fc14610268578063095ea7b314610293575b600080fd5b61023e6102393660046126cf565b61050f565b60405190151581526020015b60405180910390f35b61025b610553565b60405161024a9190612996565b61027b610276366004612769565b6105e5565b6040516001600160a01b03909116815260200161024a565b6102a66102a1366004612620565b610690565b005b60095461027b906001600160a01b031681565b6102a66102c936600461264b565b6107c2565b6102a66102dc366004612475565b610911565b61027b6102ef366004612769565b6000908152600660205260409020546001600160a01b031690565b6102a6610318366004612781565b610998565b61033061032b3660046127a5565b610ac5565b604080516001600160a01b03909316835260208301919091520161024a565b6102a661035d366004612723565b610bd9565b61036a610c4a565b60405190815260200161024a565b6102a6610386366004612620565b610c60565b6102a6610399366004612475565b610d96565b6102a66103ac3660046127a5565b610db1565b61027b6103bf366004612769565b610e9f565b61025b6103d2366004612769565b610f2a565b61036a6103e5366004612421565b610fc4565b6102a661105e565b6103fa6110c4565b60405161024a919061295e565b6008546001600160a01b031661027b565b61025b61111b565b6102a661042e3660046125ef565b61112a565b610446610441366004612532565b6111ef565b60405161024a9190612918565b6102a66104613660046124b5565b6112de565b61025b610474366004612769565b61136c565b600c546001600160a01b031661027b565b6102a6610498366004612421565b6113a0565b61025b611429565b61023e6104b336600461243d565b611438565b6102a66104c6366004612421565b611533565b600d546001600160a01b031661027b565b6102a66104ea366004612421565b611615565b61036a6104fd366004612769565b60009081526007602052604090205490565b60006001600160e01b031982167f2a55205a00000000000000000000000000000000000000000000000000000000148061054d575061054d8261169d565b92915050565b60606000805461056290612a90565b80601f016020809104026020016040519081016040528092919081815260200182805461058e90612a90565b80156105db5780601f106105b0576101008083540402835291602001916105db565b820191906000526020600020905b8154815290600101906020018083116105be57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166106745760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061069b82610e9f565b9050806001600160a01b0316836001600160a01b031614156107255760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161066b565b336001600160a01b038216148061074157506107418133611438565b6107b35760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161066b565b6107bd83836116db565b505050565b6009546001600160a01b031633146108425760405162461bcd60e51b815260206004820152602260248201527f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279204960448201527f4d58000000000000000000000000000000000000000000000000000000000000606482015260840161066b565b826001146108925760405162461bcd60e51b815260206004820152601a60248201527f4d696e7461626c653a20696e76616c6964207175616e74697479000000000000604482015260640161066b565b60008061089f8484611756565b915091506108ae868383611936565b6000828152600a6020908152604090912082516108cd92840190612330565b507f31e594f6b36b98ec520a91cbbba7b8724b1cec27393f86d8f0f6aa6084db0aaf868383604051610901939291906128f0565b60405180910390a1505050505050565b61091b3382611940565b61098d5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161066b565b6107bd838383611a28565b60008281526006602052604090205482906001600160a01b03163314610a265760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c7920746865206f776e65722063616e206d6f646966792074686520726f60448201527f79616c7479206665657300000000000000000000000000000000000000000000606482015260840161066b565b8215801590610a3d57506001600160a01b03821615155b610a895760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420746f6b656e206964206f72206e6577206f776e6572000000604482015260640161066b565b50600091825260066020526040909120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055565b60008060008311610b3e5760405162461bcd60e51b815260206004820152602160248201527f53616c65207072696365206d7573742062652067726561746572207468616e2060448201527f3000000000000000000000000000000000000000000000000000000000000000606482015260840161066b565b60008411610b8e5760405162461bcd60e51b815260206004820152601660248201527f546f6b656e204964206d7573742062652076616c696400000000000000000000604482015260640161066b565b6000848152600660209081526040808320546007909252909120546001600160a01b0390911692508390610bc690620f424090612a1a565b610bd09190612a2e565b90509250929050565b6008546001600160a01b03163314610c335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b8051610c4690600b906020840190612330565b5050565b60006001600f54610c5b9190612a4d565b905090565b600d546001600160a01b03163314610cba5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920746865206d696e7465722063616e206d696e7420746f6b656e7300604482015260640161066b565b600e54610cc5610c4a565b1115610d135760405162461bcd60e51b815260206004820152601360248201527f4d696e74696e67206d6178207265616368656400000000000000000000000000604482015260640161066b565b6000818152600660205260408120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055601080546001810182559082527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67201829055600f805491610d8783612acb565b9190505550610c468282611c02565b6107bd838383604051806020016040528060008152506112de565b60008281526006602052604090205482906001600160a01b03163314610e3f5760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c7920746865206f776e65722063616e206d6f646966792074686520726f60448201527f79616c7479206665657300000000000000000000000000000000000000000000606482015260840161066b565b82610e8c5760405162461bcd60e51b815260206004820152601260248201527f4665652063616e6e6f74206265207a65726f0000000000000000000000000000604482015260640161066b565b5060009182526007602052604090912055565b6000818152600260205260408120546001600160a01b03168061054d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e0000000000000000000000000000000000000000000000606482015260840161066b565b600a6020526000908152604090208054610f4390612a90565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6f90612a90565b8015610fbc5780601f10610f9157610100808354040283529160200191610fbc565b820191906000526020600020905b815481529060010190602001808311610f9f57829003601f168201915b505050505081565b60006001600160a01b0382166110425760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f206164647265737300000000000000000000000000000000000000000000606482015260840161066b565b506001600160a01b031660009081526003602052604090205490565b6008546001600160a01b031633146110b85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b6110c26000611d51565b565b606060108054806020026020016040519081016040528092919081815260200182805480156105db57602002820191906000526020600020905b8154815260200190600101908083116110fe575050505050905090565b60606001805461056290612a90565b6001600160a01b0382163314156111835760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161066b565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6060815167ffffffffffffffff81111561121957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611242578160200160208202803683370190505b50905060005b82518110156112d757836001600160a01b031661128b84838151811061127e57634e487b7160e01b600052603260045260246000fd5b6020026020010151610e9f565b6001600160a01b0316148282815181106112b557634e487b7160e01b600052603260045260246000fd5b91151560209283029190910190910152806112cf81612acb565b915050611248565b5092915050565b6112e83383611940565b61135a5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161066b565b61136684848484611db0565b50505050565b6060600b61137983611e39565b60405160200161138a92919061280e565b6040516020818303038152906040529050919050565b6008546001600160a01b031633146113fa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6060600b805461056290612a90565b600c546000906001600160a01b03161561150257600c546040517fc45527910000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291821691841690829063c45527919060240160206040518083038186803b1580156114af57600080fd5b505afa1580156114c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e79190612707565b6001600160a01b0316141561150057600191505061054d565b505b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff165b9392505050565b6008546001600160a01b0316331461158d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b6001600160a01b0381166116095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161066b565b61161281611d51565b50565b600d546001600160a01b03161561166e5760405162461bcd60e51b815260206004820152600960248201527f696d6d757461626c650000000000000000000000000000000000000000000000604482015260640161066b565b600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006001600160e01b031982167f2a55205a00000000000000000000000000000000000000000000000000000000148061054d575061054d82611f87565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061171d82610e9f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000606060006117d085858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060408051808201909152600181527f3a000000000000000000000000000000000000000000000000000000000000006020820152935091506120229050565b905060008112156118235760405162461bcd60e51b815260206004820152601460248201527f536570617261746f72206d757374206578697374000000000000000000000000604482015260640161066b565b600061187d866001876118368287612a4d565b92611843939291906129da565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061211492505050565b90506000600361188d8488612a4d565b6118979190612a4d565b9050806118bb5781604051806020016040528060008152509450945050505061192f565b36600088886118cb876002612a02565b906118d760018c612a4d565b926118e4939291906129da565b9150915083828281818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250959c50919a50505050505050505050505b9250929050565b6107bd8383611c02565b6000818152600260205260408120546001600160a01b03166119ca5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606482015260840161066b565b60006119d583610e9f565b9050806001600160a01b0316846001600160a01b03161480611a105750836001600160a01b0316611a05846105e5565b6001600160a01b0316145b80611a205750611a208185611438565b949350505050565b826001600160a01b0316611a3b82610e9f565b6001600160a01b031614611ab75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e0000000000000000000000000000000000000000000000606482015260840161066b565b6001600160a01b038216611b325760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161066b565b611b3d6000826116db565b6001600160a01b0383166000908152600360205260408120805460019290611b66908490612a4d565b90915550506001600160a01b0382166000908152600360205260408120805460019290611b94908490612a02565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216611c585760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161066b565b6000818152600260205260409020546001600160a01b031615611cbd5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161066b565b6001600160a01b0382166000908152600360205260408120805460019290611ce6908490612a02565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600880546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611dbb848484611a28565b611dc78484848461219b565b6113665760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161066b565b606081611e7957505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115611ea35780611e8d81612acb565b9150611e9c9050600a83612a1a565b9150611e7d565b60008167ffffffffffffffff811115611ecc57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611ef6576020820181803683370190505b5090505b8415611a2057611f0b600183612a4d565b9150611f18600a86612ae6565b611f23906030612a02565b60f81b818381518110611f4657634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611f80600a86612a1a565b9450611efa565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480611fea57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061054d57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461054d565b8151600090839060011461204657634e487b7160e01b600052600160045260246000fd5b825b8551811015612107578160008151811061207257634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168682815181106120bf57634e487b7160e01b600052603260045260246000fd5b01602001517fff000000000000000000000000000000000000000000000000000000000000001614156120f557915061152c9050565b806120ff81612acb565b915050612048565b5060001995945050505050565b600080805b83518110156112d757600084828151811061214457634e487b7160e01b600052603260045260246000fd5b016020015160f81c905060308110801590612160575060398111155b1561218857612170603082612a4d565b61217b84600a612a2e565b6121859190612a02565b92505b508061219381612acb565b915050612119565b60006001600160a01b0384163b15612325576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a02906121f89033908990889088906004016128b4565b602060405180830381600087803b15801561221257600080fd5b505af1925050508015612242575060408051601f3d908101601f1916820190925261223f918101906126eb565b60015b6122f2573d808015612270576040519150601f19603f3d011682016040523d82523d6000602084013e612275565b606091505b5080516122ea5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161066b565b805181602001fd5b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149050611a20565b506001949350505050565b82805461233c90612a90565b90600052602060002090601f01602090048101928261235e57600085556123a4565b82601f1061237757805160ff19168380011785556123a4565b828001600101855582156123a4579182015b828111156123a4578251825591602001919060010190612389565b506123b09291506123b4565b5090565b5b808211156123b057600081556001016123b5565b600067ffffffffffffffff8311156123e3576123e3612b26565b6123f66020601f19601f860116016129a9565b905082815283838301111561240a57600080fd5b828260208301376000602084830101529392505050565b600060208284031215612432578081fd5b813561152c81612b3c565b6000806040838503121561244f578081fd5b823561245a81612b3c565b9150602083013561246a81612b3c565b809150509250929050565b600080600060608486031215612489578081fd5b833561249481612b3c565b925060208401356124a481612b3c565b929592945050506040919091013590565b600080600080608085870312156124ca578081fd5b84356124d581612b3c565b935060208501356124e581612b3c565b925060408501359150606085013567ffffffffffffffff811115612507578182fd5b8501601f81018713612517578182fd5b612526878235602084016123c9565b91505092959194509250565b60008060408385031215612544578182fd5b823561254f81612b3c565b915060208381013567ffffffffffffffff8082111561256c578384fd5b818601915086601f83011261257f578384fd5b81358181111561259157612591612b26565b8060051b91506125a28483016129a9565b8181528481019084860184860187018b10156125bc578788fd5b8795505b838610156125de5780358352600195909501949186019186016125c0565b508096505050505050509250929050565b60008060408385031215612601578182fd5b823561260c81612b3c565b91506020830135801515811461246a578182fd5b60008060408385031215612632578182fd5b823561263d81612b3c565b946020939093013593505050565b60008060008060608587031215612660578384fd5b843561266b81612b3c565b935060208501359250604085013567ffffffffffffffff8082111561268e578384fd5b818701915087601f8301126126a1578384fd5b8135818111156126af578485fd5b8860208285010111156126c0578485fd5b95989497505060200194505050565b6000602082840312156126e0578081fd5b813561152c81612b51565b6000602082840312156126fc578081fd5b815161152c81612b51565b600060208284031215612718578081fd5b815161152c81612b3c565b600060208284031215612734578081fd5b813567ffffffffffffffff81111561274a578182fd5b8201601f8101841361275a578182fd5b611a20848235602084016123c9565b60006020828403121561277a578081fd5b5035919050565b60008060408385031215612793578182fd5b82359150602083013561246a81612b3c565b600080604083850312156127b7578182fd5b50508035926020909101359150565b600081518084526127de816020860160208601612a64565b601f01601f19169290920160200192915050565b60008151612804818560208601612a64565b9290920192915050565b600080845482600182811c91508083168061282a57607f831692505b602080841082141561284a57634e487b7160e01b87526022600452602487fd5b81801561285e576001811461286f5761289b565b60ff1986168952848901965061289b565b60008b815260209020885b868110156128935781548b82015290850190830161287a565b505084890196505b5050505050506128ab81856127f2565b95945050505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526128e660808301846127c6565b9695505050505050565b6001600160a01b03841681528260208201526060604082015260006128ab60608301846127c6565b6020808252825182820181905260009190848201906040850190845b81811015612952578351151583529284019291840191600101612934565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156129525783518352928401929184019160010161297a565b60208152600061152c60208301846127c6565b604051601f8201601f1916810167ffffffffffffffff811182821017156129d2576129d2612b26565b604052919050565b600080858511156129e9578182fd5b838611156129f5578182fd5b5050820193919092039150565b60008219821115612a1557612a15612afa565b500190565b600082612a2957612a29612b10565b500490565b6000816000190483118215151615612a4857612a48612afa565b500290565b600082821015612a5f57612a5f612afa565b500390565b60005b83811015612a7f578181015183820152602001612a67565b838111156113665750506000910152565b600181811c90821680612aa457607f821691505b60208210811415612ac557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612adf57612adf612afa565b5060010190565b600082612af557612af5612b10565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461161257600080fd5b6001600160e01b03198116811461161257600080fdfea2646970667358221220dc5273933b19e5e346cc377b680d48baec9e8a3a285081778741ec03e0857dde64736f6c63430008040033",
  "devdoc": {
    "details": "see  [EIP-20: Basic token standard]",
    "kind": "dev",
    "methods": {
      "_totalSupply()": {
        "details": "mint an NFT of the given id to the target address",
        "returns": {
          "totalSupply": "the total supply of the token"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "baseTokenURI()": {
        "returns": {
          "baseUri": "- the base URI"
        }
      },
      "constructor": {
        "details": "Initializes the contract with the minter, the mintingMax and the total supply.",
        "params": {
          "_mintingMax": "the total number of tokens  to be minted",
          "_uri": "the base uri for the token",
          "name": "the token name",
          "symbol": "the token symbol"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getFee(uint256)": {
        "params": {
          "_id": "- id of the token hash "
        },
        "returns": {
          "fee": "- the fee"
        }
      },
      "getMinter()": {
        "details": "get the allowed minter"
      },
      "mint(address,uint256)": {
        "details": "mint an NFT of the given id to the target address",
        "params": {
          "receiver": "the tokenHash to mint them"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxyRegistryAddress()": {
        "returns": {
          "_0": "baseUri - the base URI"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "ERC2981 - return the receiver and royalty payment given the id and sale price",
        "params": {
          "_salePrice": "the price of the token",
          "_tokenId": "the id of the token"
        },
        "returns": {
          "receiver": "the receiver",
          "royaltyAmount": "the royalty payment"
        }
      },
      "royaltyOwner(uint256)": {
        "params": {
          "_id": "- id of the token hash "
        },
        "returns": {
          "owner": "- the royalty owner"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setFee(uint256,uint256)": {
        "params": {
          "_fee": "- the fee permilliage to set",
          "_id": "- id of the token hash "
        }
      },
      "setMinter(address)": {
        "details": "set the allowed minter"
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "- the interface id to check"
        },
        "returns": {
          "supportsIface": "- whether the interface is supported"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "_tokenId": "- the interface id to check"
        },
        "returns": {
          "_tokenUri": "- the token  URI"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferOwnership(uint256,address)": {
        "params": {
          "_id": "- id of the token hash ",
          "_newOwner": "- address of the new owners "
        }
      }
    },
    "title": "ERC721 contract for VTail.com",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "baseTokenURI()": {
        "notice": "the base token URI"
      },
      "getFee(uint256)": {
        "notice": "get the fee permilliage for a token hash"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings."
      },
      "proxyRegistryAddress()": {
        "notice": "the base token URI"
      },
      "royaltyOwner(uint256)": {
        "notice": "get the royalty receiver for a token hash"
      },
      "setBaseTokenURI(string)": {
        "notice": "the base token URI"
      },
      "setFee(uint256,uint256)": {
        "notice": "set the fee permilliage for a token hash"
      },
      "setProxyRegistryAddress(address)": {
        "notice": "the base token URI"
      },
      "supportsInterface(bytes4)": {
        "notice": "ERC165 interface responder for this contract"
      },
      "tokenURI(uint256)": {
        "notice": "the base token URI"
      },
      "transferOwnership(uint256,address)": {
        "notice": "get the royalty receiver for a token hash"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1431,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1433,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1437,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1441,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1445,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1451,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3048,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "royaltyReceiversByHash",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3052,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "royaltyFeesByHash",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 479,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 22,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "imx",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 26,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "blueprints",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 4241,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "_baseUri",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 4243,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "_proxyRegistryAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 4245,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "minter",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 4247,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "mintingMax",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4249,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "nextIndexValue",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 4252,
        "contract": "src/VTailERC721.sol:VTailERC721",
        "label": "tokenHashes",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}