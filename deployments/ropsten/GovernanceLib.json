{
  "address": "0xB22dB11bBB52ffCb45d832390829Ba67214C6fAa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        }
      ],
      "name": "addressOfPropoal",
      "outputs": [
        {
          "internalType": "address",
          "name": "govAddress",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xdbcba52f4cc9ccd2334e441e6e422248e06ea66c8f1183d45228ee19e7ddea36",
  "receipt": {
    "to": null,
    "from": "0x80EBffD553601340B688f246FD20a57BAab17AaD",
    "contractAddress": "0xB22dB11bBB52ffCb45d832390829Ba67214C6fAa",
    "transactionIndex": 45,
    "gasUsed": "1123195",
    "logsBloom": "0x
    "blockHash": "0x2932b826ec6c4f2080959dd33ee1e55ad12ed3e9d89082a79fc3ebd678544d7f",
    "transactionHash": "0xdbcba52f4cc9ccd2334e441e6e422248e06ea66c8f1183d45228ee19e7ddea36",
    "logs": [],
    "blockNumber": 10050378,
    "cumulativeGasUsed": "6848870",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c768d7d0d3c4589eff35419dd67a5ae3",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"addressOfPropoal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"govAddress\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"associatePool(address,address,address,address,address,address)\":{\"details\":\"associate the pool with its relations\"},\"createPool(address,string,string,uint256,uint256,uint256,uint256,uint256,address)\":{\"details\":\"create a new pool\"},\"createProposalVoteTokens(address,uint256)\":{\"details\":\"create vote tokens to vote on given proposal\"},\"destroyProposalVoteTokens(address,uint256)\":{\"details\":\"destroy the vote tokens for the given proposal\"},\"execute(address,address,address,address)\":{\"details\":\"execute craete pool proposal\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/governance/GovernanceLib.sol\":\"GovernanceLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"src/governance/GovernanceLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemPoolFactory.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/INFTGemPool.sol\\\";\\nimport \\\"../interfaces/IProposal.sol\\\";\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\n\\nlibrary GovernanceLib {\\n\\n    // calculates the CREATE2 address for the quantized erc20 without making any external calls\\n    function addressOfPropoal(\\n        address factory,\\n        address submitter,\\n        string memory title\\n    ) public pure returns (address govAddress) {\\n        govAddress = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(submitter, title)),\\n                        hex\\\"74f827a6bb3b7ed4cd86bd3c09b189a9496bc40d83635649e1e4df1c4e836ebf\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev create vote tokens to vote on given proposal\\n     */\\n    function createProposalVoteTokens(address multitoken, uint256 proposalHash) external {\\n        for (uint256 i = 0; i < INFTGemMultiToken(multitoken).allTokenHoldersLength(0); i++) {\\n            address holder = INFTGemMultiToken(multitoken).allTokenHolders(0, i);\\n            uint256 govTokens = IERC1155(multitoken).balanceOf(holder, 0);\\n            INFTGemMultiToken(multitoken).mint(holder, proposalHash, govTokens);\\n        }\\n    }\\n\\n    /**\\n     * @dev destroy the vote tokens for the given proposal\\n     */\\n    function destroyProposalVoteTokens(address multitoken, uint256 proposalHash) external {\\n        for (uint256 i = 0; i < INFTGemMultiToken(multitoken).allTokenHoldersLength(0); i++) {\\n            address holder = INFTGemMultiToken(multitoken).allTokenHolders(0, i);\\n            uint256 propTokens = IERC1155(multitoken).balanceOf(holder, proposalHash);\\n            INFTGemMultiToken(multitoken).burn(holder, proposalHash, propTokens);\\n        }\\n    }\\n\\n        /**\\n     * @dev execute craete pool proposal\\n     */\\n    function execute(\\n        address multitoken,\\n        address factory,\\n        address feeTracker,\\n        address proposalAddress) public returns (address newPool) {\\n        \\n        // get the data for the new pool from the proposal\\n        address proposalData = IProposal(proposalAddress).proposalData();\\n       \\n        (\\n            string memory symbol,\\n            string memory name,\\n\\n            uint256 ethPrice,\\n            uint256 minTime,\\n            uint256 maxTime,\\n            uint256 diffStep,\\n            uint256 maxClaims,\\n            \\n            address allowedToken\\n        ) = ICreatePoolProposalData(proposalData).data();\\n        \\n        // create the new pool\\n        newPool = createPool(\\n            factory,\\n            \\n            symbol,\\n            name,\\n            \\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffStep,\\n            maxClaims,\\n            \\n            allowedToken\\n        );\\n        // associate the pool with its relations\\n        associatePool(\\n            address(this),\\n            multitoken,\\n            feeTracker,\\n            IProposal(proposalAddress).creator(),\\n            IProposal(proposalAddress).funder(),\\n            newPool\\n        );\\n    }\\n\\n    /**\\n     * @dev create a new pool\\n     */\\n    function createPool(\\n        address factory,\\n\\n        string memory symbol,\\n        string memory name,\\n\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        \\n        address allowedToken\\n    ) public returns (address pool) {\\n        pool = INFTGemPoolFactory(factory).createNFTGemPool(\\n            symbol,\\n            name,\\n\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxClaims,\\n            \\n            allowedToken\\n        );\\n    }\\n\\n    /**\\n     * @dev associate the pool with its relations\\n     */\\n    function associatePool(\\n        address governor,\\n        address multitoken,\\n        address feeTracker,\\n        address creator,\\n        address funder,\\n        address pool\\n    ) public {\\n        IControllable(multitoken).addController(pool);\\n        IControllable(governor).addController(pool);\\n        INFTGemPool(pool).setMultiToken(multitoken);\\n        INFTGemPool(pool).setGovernor(governor);\\n        INFTGemPool(pool).setFeeTracker(feeTracker);\\n        INFTGemPool(pool).mintGenesisGems(creator, funder);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5dec37d6fa10b59c2d9d972eb727af9640c2d21b164a6ce734c19774c8624b65\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(address indexed contractAddress, address indexed controllerAddress);\\n    event ControllerRemoved(address indexed contractAddress, address indexed controllerAddress);\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2f2d8600b126c9f7e41c2d3f94d9cf833ccd0312b74a9563c769743a192f81ca\",\"license\":\"MIT\"},\"src/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6e86542ba9c42a9ad56d81283264fd072ad07d7789113fd3482fe748a22428d6\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xacc13c3e2db32f3fbd54b5fe811690085679d84ca9c8a9b81374d811b30758b0\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function allHeldTokens(address holder, uint256 _idx) external view returns (uint256);\\n\\n    function allHeldTokensLength(address holder) external view returns (uint256);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx) external view returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token) external view returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa0220e1ea9897a331d997d3473a76808981c2d092e1c549f16bd96ae55b64c0d\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPool {\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(address account, address pool, uint256 claimHash, uint256 length, uint256 amountPaid);\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 amountPaid,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(address account, address pool, uint256 claimHash, uint256 gemHash);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint8 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(address erc20token, uint256 tokenAmount, uint8 count) external;\\n\\n    function collectClaim(uint256 claimHash) external;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0xff65fe3e019e75ef4da54bd031e09cc3db878dc87cbcc02717eaf4a6f1dbcba6\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPoolFactory {\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event NFTGemPoolCreated(\\n        string gemSymbol,\\n        string gemName,\\n        uint256 ethPrice,\\n        uint256 mintTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    );\\n\\n    function getNFTGemPool(uint256 _symbolHash) external view returns (address);\\n\\n    function allNFTGemPools(uint256 idx) external view returns (address);\\n\\n    function allNFTGemPoolsLength() external view returns (uint256);\\n\\n    function createNFTGemPool(\\n        string memory gemSymbol,\\n        string memory gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    ) external returns (address payable);\\n}\\n\",\"keccak256\":\"0x86d91f8c7adf10de4a7b00094179fa1b90da5cc31adea6be5d833633212743ba\",\"license\":\"MIT\"},\"src/interfaces/IProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface IProposal {\\n    enum ProposalType {CREATE_POOL, FUND_PROJECT, CHANGE_FEE, UPDATE_ALLOWLIST}\\n\\n    enum ProposalStatus {NOT_FUNDED, ACTIVE, PASSED, FAILED, EXECUTED, CLOSED}\\n\\n    event ProposalCreated(address creator, address pool, uint256 proposalHash);\\n\\n    event ProposalExecuted(uint256 proposalHash);\\n\\n    event ProposalClosed(uint256 proposalHash);\\n\\n    function creator() external view returns (address);\\n\\n    function title() external view returns (string memory);\\n\\n    function funder() external view returns (address);\\n\\n    function expiration() external view returns (uint256);\\n\\n    function status() external view returns (ProposalStatus);\\n\\n    function proposalData() external view returns (address);\\n\\n    function proposalType() external view returns (ProposalType);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address gov) external;\\n\\n    function fund() external payable;\\n\\n    function execute() external;\\n\\n    function close() external;\\n\\n    function initialize(\\n        address,\\n        string memory,\\n        address,\\n        ProposalType\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5913ecf90344d4b65cf8a2d9e321b95ff6a7a65efb775c5a947ff63c28933146\",\"license\":\"MIT\"},\"src/interfaces/IProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface ICreatePoolProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            string memory,\\n            string memory,\\n\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            \\n            address\\n        );\\n}\\n\\ninterface IChangeFeeProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n}\\n\\ninterface IFundProjectProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            string memory,\\n            uint256\\n        );\\n}\\n\\ninterface IUpdateAllowlistProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0xbe13f993a795c9095bb53d8235f6c4a57f553ba536c2e84d0a894e552e621eac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x611367610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061007c5760003560e01c80638851debd1161005a5780638851debd1461034957806396660a941461038f578063c8b3a99f146103e75761007c565b80631500cfba1461008157806326740ac01461023557806385efa54c14610301575b600080fd5b81801561008d57600080fd5b5061020c60048036036101208110156100a557600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156100dd57600080fd5b8201836020820111156100ef57600080fd5b8035906020019184600183028401116401000000008311171561011157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561016457600080fd5b82018360208201111561017657600080fd5b8035906020019184600183028401116401000000008311171561019857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a0013573ffffffffffffffffffffffffffffffffffffffff1661044f565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61020c6004803603606081101561024b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359091169181019060608101604082013564010000000081111561028c57600080fd5b82018360208201111561029e57600080fd5b803590602001918460018302840111640100000000831117156102c057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506105ed945050505050565b81801561030d57600080fd5b506103476004803603604081101561032457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561073f565b005b81801561035557600080fd5b506103476004803603604081101561036c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356109a4565b81801561039b57600080fd5b5061020c600480360360808110156103b257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201358116916060013516610c03565b8180156103f357600080fd5b50610347600480360360c081101561040a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201358116916060810135821691608082013581169160a0013516611005565b60008973ffffffffffffffffffffffffffffffffffffffff16634ff8f07e8a8a8a8a8a8a8a8a6040518963ffffffff1660e01b81526004018080602001806020018981526020018881526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b818151815260200191508051906020019080838360005b838110156104ff5781810151838201526020016104e7565b50505050905090810190601f16801561052c5780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b8381101561055f578181015183820152602001610547565b50505050905090810190601f16801561058c5780820380516001836020036101000a031916815260200191505b509a5050505050505050505050602060405180830381600087803b1580156105b357600080fd5b505af11580156105c7573d6000803e3d6000fd5b505050506040513d60208110156105dd57600080fd5b50519a9950505050505050505050565b6000838383604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b815260140182805190602001908083835b6020831061066157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610624565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040528051906020012060405160200180807fff000000000000000000000000000000000000000000000000000000000000008152506001018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001807f74f827a6bb3b7ed4cd86bd3c09b189a9496bc40d83635649e1e4df1c4e836ebf815250602001925050506040516020818303038152906040528051906020012060001c90509392505050565b60005b8273ffffffffffffffffffffffffffffffffffffffff1663f68ee90e60006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561079457600080fd5b505afa1580156107a8573d6000803e3d6000fd5b505050506040513d60208110156107be57600080fd5b505181101561099f5760008373ffffffffffffffffffffffffffffffffffffffff1663740ec99e6000846040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b15801561082357600080fd5b505afa158015610837573d6000803e3d6000fd5b505050506040513d602081101561084d57600080fd5b5051604080517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152600060248301819052925193945091929187169162fdd58e91604480820192602092909190829003018186803b1580156108cb57600080fd5b505afa1580156108df573d6000803e3d6000fd5b505050506040513d60208110156108f557600080fd5b5051604080517f156e29f600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018890526044820184905291519293509087169163156e29f69160648082019260009290919082900301818387803b15801561097957600080fd5b505af115801561098d573d6000803e3d6000fd5b50506001909401935061074292505050565b505050565b60005b8273ffffffffffffffffffffffffffffffffffffffff1663f68ee90e60006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156109f957600080fd5b505afa158015610a0d573d6000803e3d6000fd5b505050506040513d6020811015610a2357600080fd5b505181101561099f5760008373ffffffffffffffffffffffffffffffffffffffff1663740ec99e6000846040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b158015610a8857600080fd5b505afa158015610a9c573d6000803e3d6000fd5b505050506040513d6020811015610ab257600080fd5b5051604080517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301526024820187905291519293506000929187169162fdd58e91604480820192602092909190829003018186803b158015610b2f57600080fd5b505afa158015610b43573d6000803e3d6000fd5b505050506040513d6020811015610b5957600080fd5b5051604080517ff5298aca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018890526044820184905291519293509087169163f5298aca9160648082019260009290919082900301818387803b158015610bdd57600080fd5b505af1158015610bf1573d6000803e3d6000fd5b5050600190940193506109a792505050565b6000808273ffffffffffffffffffffffffffffffffffffffff16634258292f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4c57600080fd5b505afa158015610c60573d6000803e3d6000fd5b505050506040513d6020811015610c7657600080fd5b810190808051906020019092919050505090506060806000806000806000808873ffffffffffffffffffffffffffffffffffffffff166373d4a13a6040518163ffffffff1660e01b815260040160006040518083038186803b158015610cdb57600080fd5b505afa158015610cef573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610100811015610d3757600080fd5b8101908080516040519392919084640100000000821115610d5757600080fd5b908301906020820185811115610d6c57600080fd5b8251640100000000811182820188101715610d8657600080fd5b82525081516020918201929091019080838360005b83811015610db3578181015183820152602001610d9b565b50505050905090810190601f168015610de05780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084640100000000821115610e0357600080fd5b908301906020820185811115610e1857600080fd5b8251640100000000811182820188101715610e3257600080fd5b82525081516020918201929091019080838360005b83811015610e5f578181015183820152602001610e47565b50505050905090810190601f168015610e8c5780820380516001836020036101000a031916815260200191505b5060405260200180519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505097509750975097509750975097509750610ef38d898989898989898961044f565b9950610ff4308f8e8e73ffffffffffffffffffffffffffffffffffffffff166302d05d3f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4157600080fd5b505afa158015610f55573d6000803e3d6000fd5b505050506040513d6020811015610f6b57600080fd5b81019080805190602001909291905050508f73ffffffffffffffffffffffffffffffffffffffff1663041ae8806040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc257600080fd5b505afa158015610fd6573d6000803e3d6000fd5b505050506040513d6020811015610fec57600080fd5b50518f611005565b505050505050505050949350505050565b8473ffffffffffffffffffffffffffffffffffffffff1663a7fc7a07826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561106e57600080fd5b505af1158015611082573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663a7fc7a07826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156110ef57600080fd5b505af1158015611103573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663d104f8f5866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561117057600080fd5b505af1158015611184573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663c42cf535876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156111f157600080fd5b505af1158015611205573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16639277a185856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561127257600080fd5b505af1158015611286573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632449ef5184846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561131157600080fd5b505af1158015611325573d6000803e3d6000fd5b5050505050505050505056fea26469706673582212207dcb6365175a0bccc436d0ba4aac274399c644e26e33f94da0e32caf610d4d1f64736f6c63430007030033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061007c5760003560e01c80638851debd1161005a5780638851debd1461034957806396660a941461038f578063c8b3a99f146103e75761007c565b80631500cfba1461008157806326740ac01461023557806385efa54c14610301575b600080fd5b81801561008d57600080fd5b5061020c60048036036101208110156100a557600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156100dd57600080fd5b8201836020820111156100ef57600080fd5b8035906020019184600183028401116401000000008311171561011157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561016457600080fd5b82018360208201111561017657600080fd5b8035906020019184600183028401116401000000008311171561019857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a0013573ffffffffffffffffffffffffffffffffffffffff1661044f565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61020c6004803603606081101561024b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359091169181019060608101604082013564010000000081111561028c57600080fd5b82018360208201111561029e57600080fd5b803590602001918460018302840111640100000000831117156102c057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506105ed945050505050565b81801561030d57600080fd5b506103476004803603604081101561032457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561073f565b005b81801561035557600080fd5b506103476004803603604081101561036c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356109a4565b81801561039b57600080fd5b5061020c600480360360808110156103b257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201358116916060013516610c03565b8180156103f357600080fd5b50610347600480360360c081101561040a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201358116916060810135821691608082013581169160a0013516611005565b60008973ffffffffffffffffffffffffffffffffffffffff16634ff8f07e8a8a8a8a8a8a8a8a6040518963ffffffff1660e01b81526004018080602001806020018981526020018881526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b818151815260200191508051906020019080838360005b838110156104ff5781810151838201526020016104e7565b50505050905090810190601f16801561052c5780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b8381101561055f578181015183820152602001610547565b50505050905090810190601f16801561058c5780820380516001836020036101000a031916815260200191505b509a5050505050505050505050602060405180830381600087803b1580156105b357600080fd5b505af11580156105c7573d6000803e3d6000fd5b505050506040513d60208110156105dd57600080fd5b50519a9950505050505050505050565b6000838383604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b815260140182805190602001908083835b6020831061066157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610624565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040528051906020012060405160200180807fff000000000000000000000000000000000000000000000000000000000000008152506001018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001807f74f827a6bb3b7ed4cd86bd3c09b189a9496bc40d83635649e1e4df1c4e836ebf815250602001925050506040516020818303038152906040528051906020012060001c90509392505050565b60005b8273ffffffffffffffffffffffffffffffffffffffff1663f68ee90e60006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561079457600080fd5b505afa1580156107a8573d6000803e3d6000fd5b505050506040513d60208110156107be57600080fd5b505181101561099f5760008373ffffffffffffffffffffffffffffffffffffffff1663740ec99e6000846040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b15801561082357600080fd5b505afa158015610837573d6000803e3d6000fd5b505050506040513d602081101561084d57600080fd5b5051604080517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152600060248301819052925193945091929187169162fdd58e91604480820192602092909190829003018186803b1580156108cb57600080fd5b505afa1580156108df573d6000803e3d6000fd5b505050506040513d60208110156108f557600080fd5b5051604080517f156e29f600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018890526044820184905291519293509087169163156e29f69160648082019260009290919082900301818387803b15801561097957600080fd5b505af115801561098d573d6000803e3d6000fd5b50506001909401935061074292505050565b505050565b60005b8273ffffffffffffffffffffffffffffffffffffffff1663f68ee90e60006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156109f957600080fd5b505afa158015610a0d573d6000803e3d6000fd5b505050506040513d6020811015610a2357600080fd5b505181101561099f5760008373ffffffffffffffffffffffffffffffffffffffff1663740ec99e6000846040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b158015610a8857600080fd5b505afa158015610a9c573d6000803e3d6000fd5b505050506040513d6020811015610ab257600080fd5b5051604080517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301526024820187905291519293506000929187169162fdd58e91604480820192602092909190829003018186803b158015610b2f57600080fd5b505afa158015610b43573d6000803e3d6000fd5b505050506040513d6020811015610b5957600080fd5b5051604080517ff5298aca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018890526044820184905291519293509087169163f5298aca9160648082019260009290919082900301818387803b158015610bdd57600080fd5b505af1158015610bf1573d6000803e3d6000fd5b5050600190940193506109a792505050565b6000808273ffffffffffffffffffffffffffffffffffffffff16634258292f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4c57600080fd5b505afa158015610c60573d6000803e3d6000fd5b505050506040513d6020811015610c7657600080fd5b810190808051906020019092919050505090506060806000806000806000808873ffffffffffffffffffffffffffffffffffffffff166373d4a13a6040518163ffffffff1660e01b815260040160006040518083038186803b158015610cdb57600080fd5b505afa158015610cef573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610100811015610d3757600080fd5b8101908080516040519392919084640100000000821115610d5757600080fd5b908301906020820185811115610d6c57600080fd5b8251640100000000811182820188101715610d8657600080fd5b82525081516020918201929091019080838360005b83811015610db3578181015183820152602001610d9b565b50505050905090810190601f168015610de05780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084640100000000821115610e0357600080fd5b908301906020820185811115610e1857600080fd5b8251640100000000811182820188101715610e3257600080fd5b82525081516020918201929091019080838360005b83811015610e5f578181015183820152602001610e47565b50505050905090810190601f168015610e8c5780820380516001836020036101000a031916815260200191505b5060405260200180519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505097509750975097509750975097509750610ef38d898989898989898961044f565b9950610ff4308f8e8e73ffffffffffffffffffffffffffffffffffffffff166302d05d3f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4157600080fd5b505afa158015610f55573d6000803e3d6000fd5b505050506040513d6020811015610f6b57600080fd5b81019080805190602001909291905050508f73ffffffffffffffffffffffffffffffffffffffff1663041ae8806040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc257600080fd5b505afa158015610fd6573d6000803e3d6000fd5b505050506040513d6020811015610fec57600080fd5b50518f611005565b505050505050505050949350505050565b8473ffffffffffffffffffffffffffffffffffffffff1663a7fc7a07826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561106e57600080fd5b505af1158015611082573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663a7fc7a07826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156110ef57600080fd5b505af1158015611103573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663d104f8f5866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561117057600080fd5b505af1158015611184573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663c42cf535876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156111f157600080fd5b505af1158015611205573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16639277a185856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561127257600080fd5b505af1158015611286573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632449ef5184846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561131157600080fd5b505af1158015611325573d6000803e3d6000fd5b5050505050505050505056fea26469706673582212207dcb6365175a0bccc436d0ba4aac274399c644e26e33f94da0e32caf610d4d1f64736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "associatePool(address,address,address,address,address,address)": {
        "details": "associate the pool with its relations"
      },
      "createPool(address,string,string,uint256,uint256,uint256,uint256,uint256,address)": {
        "details": "create a new pool"
      },
      "createProposalVoteTokens(address,uint256)": {
        "details": "create vote tokens to vote on given proposal"
      },
      "destroyProposalVoteTokens(address,uint256)": {
        "details": "destroy the vote tokens for the given proposal"
      },
      "execute(address,address,address,address)": {
        "details": "execute craete pool proposal"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}