{
  "address": "0xD91d1Bc305B74d01D449D0C3E72a76d6A553c54B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBanned",
          "type": "bool"
        }
      ],
      "name": "AllowList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "FeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GovernanceTokenIssued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        }
      ],
      "name": "ProjectFunded",
      "type": "event"
    }
  ],
  "transactionHash": "0xa74a31bc5bdeefb3f647c45c426332a53a4cc48197404047e8a95af61da2e6a6",
  "receipt": {
    "to": null,
    "from": "0x80EBffD553601340B688f246FD20a57BAab17AaD",
    "contractAddress": "0xD91d1Bc305B74d01D449D0C3E72a76d6A553c54B",
    "transactionIndex": 13,
    "gasUsed": "1996346",
    "logsBloom": "0x
    "blockHash": "0x8266c77c8bd0b9f6fe163d63b6f2d0f9e828e4bc6e9904d29b5d685cdf224028",
    "transactionHash": "0xa74a31bc5bdeefb3f647c45c426332a53a4cc48197404047e8a95af61da2e6a6",
    "logs": [],
    "blockNumber": 10050386,
    "cumulativeGasUsed": "2690304",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c768d7d0d3c4589eff35419dd67a5ae3",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBanned\",\"type\":\"bool\"}],\"name\":\"AllowList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GovernanceTokenIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"ProjectFunded\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeProposal(address,address,address,address)\":{\"details\":\"execute this proposal if it is in the right state. Anyone can execute a proposal\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/governance/ProposalsLib.sol\":\"ProposalsLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"src/governance/ChangeFeeProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\ncontract ChangeFeeProposalData is IChangeFeeProposalData {\\n    address private token;\\n    address private pool;\\n    uint256 private feeDivisor;\\n\\n    constructor(\\n        address _token,\\n        address _pool,\\n        uint256 _feeDivisor\\n    ) {\\n        token = _token;\\n        pool = _pool;\\n        feeDivisor = _feeDivisor;\\n    }\\n\\n    function data()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        return (token, pool, feeDivisor);\\n    }\\n}\\n\",\"keccak256\":\"0xacf19a9c4063dde64513460fa439ab07e63205a9ea9b9d907ba920aca2d17a68\",\"license\":\"MIT\"},\"src/governance/CreatePoolProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\ncontract CreatePoolProposalData is ICreatePoolProposalData {\\n    \\n    string private symbol;\\n    string private name;\\n    \\n    uint256 private ethPrice;\\n    uint256 private minTime;\\n    uint256 private maxTime;\\n    uint256 private diffstep;\\n    uint256 private maxClaims;\\n    \\n    address private allowedToken;\\n\\n    constructor(\\n        string memory _symbol,\\n        string memory _name,\\n\\n        uint256 _ethPrice,\\n        uint256 _minTIme,\\n        uint256 _maxTime,\\n        uint256 _diffStep,\\n        uint256 _maxCLaim,\\n        \\n        address _allowedToken\\n    ) {\\n        symbol = _symbol;\\n        name = _name;\\n        ethPrice = _ethPrice;\\n        minTime = _minTIme;\\n        maxTime = _maxTime;\\n        diffstep = _diffStep;\\n        maxClaims = _maxCLaim;\\n        allowedToken = _allowedToken;\\n    }\\n\\n    function data()\\n        external\\n        view\\n        override\\n        returns (\\n            string memory,\\n            string memory,\\n\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            \\n            address\\n        )\\n    {\\n        return (\\n            symbol, \\n            name, \\n            \\n            ethPrice, \\n            minTime, \\n            maxTime, \\n            diffstep, \\n            maxClaims, \\n            \\n            allowedToken);\\n\\n    }\\n}\\n\",\"keccak256\":\"0x557f66e0bab0bbb0badfff3b879ab59e829642118b91379400979bd781255d75\",\"license\":\"MIT\"},\"src/governance/FundProjectProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\ncontract FundProjectProposalData is IFundProjectProposalData {\\n    address private receiver;\\n    string private descriptionUrl;\\n    uint256 private ethAmount;\\n\\n    constructor(\\n        address _receiver,\\n        string memory _descriptionUrl,\\n        uint256 _ethAmount\\n    ) {\\n        receiver = _receiver;\\n        descriptionUrl = _descriptionUrl;\\n        ethAmount = _ethAmount;\\n    }\\n\\n    function data()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            string memory,\\n            uint256\\n        )\\n    {\\n        return (receiver, descriptionUrl, ethAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xee9c58dd35cb135654e954e586d64fe32131284b03aafefcbf9f606868fb144b\",\"license\":\"MIT\"},\"src/governance/GovernanceLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\n\\nimport \\\"../interfaces/INFTGemPoolFactory.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/INFTGemPool.sol\\\";\\nimport \\\"../interfaces/IProposal.sol\\\";\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\n\\nlibrary GovernanceLib {\\n\\n    // calculates the CREATE2 address for the quantized erc20 without making any external calls\\n    function addressOfPropoal(\\n        address factory,\\n        address submitter,\\n        string memory title\\n    ) public pure returns (address govAddress) {\\n        govAddress = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(submitter, title)),\\n                        hex\\\"74f827a6bb3b7ed4cd86bd3c09b189a9496bc40d83635649e1e4df1c4e836ebf\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev create vote tokens to vote on given proposal\\n     */\\n    function createProposalVoteTokens(address multitoken, uint256 proposalHash) external {\\n        for (uint256 i = 0; i < INFTGemMultiToken(multitoken).allTokenHoldersLength(0); i++) {\\n            address holder = INFTGemMultiToken(multitoken).allTokenHolders(0, i);\\n            uint256 govTokens = IERC1155(multitoken).balanceOf(holder, 0);\\n            INFTGemMultiToken(multitoken).mint(holder, proposalHash, govTokens);\\n        }\\n    }\\n\\n    /**\\n     * @dev destroy the vote tokens for the given proposal\\n     */\\n    function destroyProposalVoteTokens(address multitoken, uint256 proposalHash) external {\\n        for (uint256 i = 0; i < INFTGemMultiToken(multitoken).allTokenHoldersLength(0); i++) {\\n            address holder = INFTGemMultiToken(multitoken).allTokenHolders(0, i);\\n            uint256 propTokens = IERC1155(multitoken).balanceOf(holder, proposalHash);\\n            INFTGemMultiToken(multitoken).burn(holder, proposalHash, propTokens);\\n        }\\n    }\\n\\n        /**\\n     * @dev execute craete pool proposal\\n     */\\n    function execute(\\n        address multitoken,\\n        address factory,\\n        address feeTracker,\\n        address proposalAddress) public returns (address newPool) {\\n        \\n        // get the data for the new pool from the proposal\\n        address proposalData = IProposal(proposalAddress).proposalData();\\n       \\n        (\\n            string memory symbol,\\n            string memory name,\\n\\n            uint256 ethPrice,\\n            uint256 minTime,\\n            uint256 maxTime,\\n            uint256 diffStep,\\n            uint256 maxClaims,\\n            \\n            address allowedToken\\n        ) = ICreatePoolProposalData(proposalData).data();\\n        \\n        // create the new pool\\n        newPool = createPool(\\n            factory,\\n            \\n            symbol,\\n            name,\\n            \\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffStep,\\n            maxClaims,\\n            \\n            allowedToken\\n        );\\n        // associate the pool with its relations\\n        associatePool(\\n            address(this),\\n            multitoken,\\n            feeTracker,\\n            IProposal(proposalAddress).creator(),\\n            IProposal(proposalAddress).funder(),\\n            newPool\\n        );\\n    }\\n\\n    /**\\n     * @dev create a new pool\\n     */\\n    function createPool(\\n        address factory,\\n\\n        string memory symbol,\\n        string memory name,\\n\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        \\n        address allowedToken\\n    ) public returns (address pool) {\\n        pool = INFTGemPoolFactory(factory).createNFTGemPool(\\n            symbol,\\n            name,\\n\\n            ethPrice,\\n            minTime,\\n            maxTime,\\n            diffstep,\\n            maxClaims,\\n            \\n            allowedToken\\n        );\\n    }\\n\\n    /**\\n     * @dev associate the pool with its relations\\n     */\\n    function associatePool(\\n        address governor,\\n        address multitoken,\\n        address feeTracker,\\n        address creator,\\n        address funder,\\n        address pool\\n    ) public {\\n        IControllable(multitoken).addController(pool);\\n        IControllable(governor).addController(pool);\\n        INFTGemPool(pool).setMultiToken(multitoken);\\n        INFTGemPool(pool).setGovernor(governor);\\n        INFTGemPool(pool).setFeeTracker(feeTracker);\\n        INFTGemPool(pool).mintGenesisGems(creator, funder);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5dec37d6fa10b59c2d9d972eb727af9640c2d21b164a6ce734c19774c8624b65\",\"license\":\"MIT\"},\"src/governance/ProposalsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/IProposalFactory.sol\\\";\\nimport \\\"../interfaces/IProposal.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolData.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\n\\nimport \\\"../governance/ChangeFeeProposalData.sol\\\";\\nimport \\\"../governance/CreatePoolProposalData.sol\\\";\\nimport \\\"../governance/FundProjectProposalData.sol\\\";\\nimport \\\"../governance/UpdateAllowlistProposalData.sol\\\";\\n\\nimport \\\"./GovernanceLib.sol\\\";\\n\\nlibrary ProposalsLib {\\n    event GovernanceTokenIssued(address indexed receiver, uint256 amount);\\n    event FeeUpdated(address indexed proposal, address indexed token, uint256 newFee);\\n    event AllowList(address indexed proposal, address indexed pool, address indexed token, bool isBanned);\\n    event ProjectFunded(address indexed proposal, address indexed receiver, uint256 received);\\n\\n    // create a proposal and associate it with passed-in proposal data\\n    function associateProposal(\\n        address governor,\\n        address multitoken,\\n        address proposalFactory,\\n        address submitter,\\n        IProposal.ProposalType propType,\\n        string memory title,\\n        address data\\n    ) internal returns (address p) {\\n        p = IProposalFactory(proposalFactory).createProposal(submitter, title, data, propType);\\n        IProposal(p).setMultiToken(multitoken);\\n        IProposal(p).setGovernor(governor);\\n        IControllable(multitoken).addController(p);\\n        IControllable(governor).addController(p);\\n    }\\n\\n    // create a new pool proposal\\n    function createNewPoolProposal(\\n        string memory symbol,\\n        string memory name,\\n\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffStep,\\n        uint256 maxClaims,\\n\\n        address allowedToken\\n    ) public returns (address) {\\n        return\\n            address(\\n                new CreatePoolProposalData(\\n                    symbol, \\n                    name, \\n\\n                    ethPrice, \\n                    minTime, \\n                    maxTime, \\n                    diffStep, \\n                    maxClaims, \\n\\n                    allowedToken\\n                )\\n            );\\n    }\\n\\n    // create a fee change proposal\\n    function createChangeFeeProposal(\\n        address token,\\n        address pool,\\n        uint256 feeDivisor\\n    ) public returns (address) {\\n        return address(\\n            new ChangeFeeProposalData(\\n                token, \\n                pool, \\n                feeDivisor));\\n    }\\n\\n    // create a project funding proposal\\n    function createFundProjectProposal(\\n        address receiver,\\n        string memory descriptionUrl,\\n        uint256 ethAmount\\n    ) public returns (address) {\\n        return address(new FundProjectProposalData(\\n            receiver, \\n            descriptionUrl, \\n            ethAmount));\\n    }\\n\\n    // create an allowlist modify proposal\\n    function createUpdateAllowlistProposal(\\n        address token,\\n        address pool,\\n        bool newStatus\\n    ) public returns (address) {\\n        return address(new UpdateAllowlistProposalData(token, pool, newStatus));\\n    }\\n\\n    /**\\n     * @dev execute this proposal if it is in the right state. Anyone can execute a proposal\\n     */\\n    function executeProposal(\\n        address multitoken,\\n        address factory,\\n        address feeTracker,\\n        address proposalAddress\\n    ) external {\\n        require(proposalAddress != address(0), \\\"INVALID_PROPOSAL\\\");\\n        require(IProposal(proposalAddress).status() == IProposal.ProposalStatus.PASSED, \\\"PROPOSAL_NOT_PASSED\\\");\\n        address prop = IProposal(proposalAddress).proposalData();\\n        require(prop != address(0), \\\"INVALID_PROPOSAL_DATA\\\");\\n\\n        // craete a new NFT mining pool\\n        if (IProposal(proposalAddress).proposalType() == IProposal.ProposalType.CREATE_POOL) {\\n            GovernanceLib.execute(multitoken, factory, feeTracker, proposalAddress);\\n        }\\n        // fund a project\\n        else if (IProposal(proposalAddress).proposalType() == IProposal.ProposalType.FUND_PROJECT) {\\n            (address receiver, , uint256 amount) = IFundProjectProposalData(prop).data();\\n            INFTGemFeeManager(feeTracker).transferEth(payable(receiver), amount);\\n            emit ProjectFunded(address(proposalAddress), address(receiver), amount);\\n        }\\n        // change a fee\\n        else if (IProposal(proposalAddress).proposalType() == IProposal.ProposalType.CHANGE_FEE) {\\n            require(prop != address(0), \\\"INVALID_PROPOSAL_DATA\\\");\\n            address proposalData = IProposal(proposalAddress).proposalData();\\n            (address token, address pool, uint256 feeDiv) = IChangeFeeProposalData(proposalData).data();\\n            require(feeDiv != 0, \\\"INVALID_FEE\\\");\\n            if (token != address(0)) INFTGemFeeManager(feeTracker).setFeeDivisor(token, feeDiv);\\n            if (pool != address(0)) INFTGemFeeManager(feeTracker).setFeeDivisor(pool, feeDiv);\\n            if (token == address(0) && pool == address(0)) {\\n                INFTGemFeeManager(feeTracker).setDefaultFeeDivisor(feeDiv);\\n            }\\n        }\\n        // modify the allowlist\\n        else if (IProposal(proposalAddress).proposalType() == IProposal.ProposalType.UPDATE_ALLOWLIST) {\\n            address proposalData = IProposal(proposalAddress).proposalData();\\n            (address token, address pool, bool isAllowed) = IUpdateAllowlistProposalData(proposalData).data();\\n            require(token != address(0), \\\"INVALID_TOKEN\\\");\\n            if (isAllowed) {\\n                INFTGemPoolData(pool).addAllowedToken(token);\\n                emit AllowList(proposalAddress, pool, token, isAllowed);\\n            } else {\\n                INFTGemPoolData(pool).removeAllowedToken(token);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88fb2f76a09d4176af080cd9afa374ee0a64291ef44425ccb1419d265129d94a\",\"license\":\"MIT\"},\"src/governance/UpdateAllowlistProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IProposalData.sol\\\";\\n\\ncontract UpdateAllowlistProposalData is IUpdateAllowlistProposalData {\\n    address private token;\\n    address private pool;\\n    bool private newStatus;\\n\\n    constructor(\\n        address _token,\\n        address _pool,\\n        bool _newStatus\\n    ) {\\n        token = _token;\\n        pool = _pool;\\n        newStatus = _newStatus;\\n    }\\n\\n    function data()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            bool\\n        )\\n    {\\n        return (token, pool, newStatus);\\n    }\\n}\\n\",\"keccak256\":\"0x95f58c29687f5b3969ca1d6264687e5e498c59a57e728d6d03bcbeedfd2cbbc8\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(address indexed contractAddress, address indexed controllerAddress);\\n    event ControllerRemoved(address indexed contractAddress, address indexed controllerAddress);\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2f2d8600b126c9f7e41c2d3f94d9cf833ccd0312b74a9563c769743a192f81ca\",\"license\":\"MIT\"},\"src/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6e86542ba9c42a9ad56d81283264fd072ad07d7789113fd3482fe748a22428d6\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xacc13c3e2db32f3fbd54b5fe811690085679d84ca9c8a9b81374d811b30758b0\",\"license\":\"MIT\"},\"src/interfaces/INFTGemFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTGemFeeManager {\\n    event DefaultFeeDivisorChanged(address indexed operator, uint256 oldValue, uint256 value);\\n    event FeeDivisorChanged(address indexed operator, address indexed token, uint256 oldValue, uint256 value);\\n    event ETHReceived(address indexed manager, address sender, uint256 value);\\n\\n    function feeDivisor(address token) external view returns (uint256);\\n\\n    function defaultFeeDivisor() external view returns (uint256);\\n\\n    function setFeeDivisor(address token, uint256 _feeDivisor) external returns (uint256);\\n\\n    function setDefaultFeeDivisor(uint256 _feeDivisor) external returns (uint256);\\n\\n    function ethBalanceOf() external view returns (uint256);\\n\\n    function balanceOF(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfc8faf79df2db01f020e749b50fe3c34ec2b108b1f6d7feb63b529c4c495d38c\",\"license\":\"MIT\"},\"src/interfaces/INFTGemGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemGovernor {\\n    event GovernanceTokenIssued(address indexed receiver, uint256 amount);\\n    event FeeUpdated(address indexed proposal, address indexed token, uint256 newFee);\\n    event AllowList(address indexed proposal, address indexed token, bool isBanned);\\n    event ProjectFunded(address indexed proposal, address indexed receiver, uint256 received);\\n    event StakingPoolCreated(\\n        address indexed proposal,\\n        address indexed pool,\\n        string symbol,\\n        string name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffStep,\\n        uint256 maxClaims,\\n        address alllowedToken\\n    );\\n\\n    function initialize(\\n        address _multitoken,\\n        address _factory,\\n        address _feeTracker,\\n        address _proposalFactory\\n    ) external;\\n\\n    function createProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function destroyProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function executeProposal(address propAddress) external returns (address newPool);\\n\\n    function issueInitialGovernanceTokens(address receiver) external returns (uint256);\\n\\n    function maybeIssueGovernanceToken(address receiver) external returns (uint256);\\n\\n    function issueFuelToken(address receiver, uint256 amount) external returns (uint256);\\n\\n    function createPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createNewPoolProposal(\\n        address,\\n        string memory,\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external returns (address);\\n\\n    function createChangeFeeProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (address);\\n\\n    function createFundProjectProposal(\\n        address,\\n        string memory,\\n        address,\\n        string memory,\\n        uint256\\n    ) external returns (address);\\n\\n    function createUpdateAllowlistProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        bool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x59ca7f59ff914ba77b4b0781c83bdcd0f8ff1a52597ee72aee22697473251942\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function allHeldTokens(address holder, uint256 _idx) external view returns (uint256);\\n\\n    function allHeldTokensLength(address holder) external view returns (uint256);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx) external view returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token) external view returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa0220e1ea9897a331d997d3473a76808981c2d092e1c549f16bd96ae55b64c0d\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPool {\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(address account, address pool, uint256 claimHash, uint256 length, uint256 amountPaid);\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 amountPaid,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(address account, address pool, uint256 claimHash, uint256 gemHash);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint8 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(address erc20token, uint256 tokenAmount, uint8 count) external;\\n\\n    function collectClaim(uint256 claimHash) external;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0xff65fe3e019e75ef4da54bd031e09cc3db878dc87cbcc02717eaf4a6f1dbcba6\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTGemPoolData {\\n\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function ethPrice() external view returns (uint256);\\n    function minTime() external view returns (uint256);\\n    function maxTime() external view returns (uint256);\\n    function difficultyStep() external view returns (uint256);\\n    function maxClaims() external view returns (uint256);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n    function mintedCount() external view returns (uint256);\\n    function totalStakedEth() external view returns (uint256);\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n    function tokenType(uint256 tokenHash) external view returns (uint8);\\n    function allTokenHashesLength() external view returns (uint256);\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n    function nextClaimHash() external view returns (uint256);\\n    function nextGemHash() external view returns (uint256);\\n    function nextGemId() external view returns (uint256);\\n    function nextClaimId() external view returns (uint256);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n    function allowedTokens(uint256 idx) external view returns (address);\\n    function isTokenAllowed(address token) external view returns (bool);\\n    function addAllowedToken(address token) external;\\n    function removeAllowedToken(address token) external;\\n}\\n\",\"keccak256\":\"0xf99347b3f2210d35a56193091bb9542a95be5d5c62578b840e95369ae83634b8\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPoolFactory {\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event NFTGemPoolCreated(\\n        string gemSymbol,\\n        string gemName,\\n        uint256 ethPrice,\\n        uint256 mintTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    );\\n\\n    function getNFTGemPool(uint256 _symbolHash) external view returns (address);\\n\\n    function allNFTGemPools(uint256 idx) external view returns (address);\\n\\n    function allNFTGemPoolsLength() external view returns (uint256);\\n\\n    function createNFTGemPool(\\n        string memory gemSymbol,\\n        string memory gemName,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxMint,\\n        address allowedToken\\n    ) external returns (address payable);\\n}\\n\",\"keccak256\":\"0x86d91f8c7adf10de4a7b00094179fa1b90da5cc31adea6be5d833633212743ba\",\"license\":\"MIT\"},\"src/interfaces/IProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface IProposal {\\n    enum ProposalType {CREATE_POOL, FUND_PROJECT, CHANGE_FEE, UPDATE_ALLOWLIST}\\n\\n    enum ProposalStatus {NOT_FUNDED, ACTIVE, PASSED, FAILED, EXECUTED, CLOSED}\\n\\n    event ProposalCreated(address creator, address pool, uint256 proposalHash);\\n\\n    event ProposalExecuted(uint256 proposalHash);\\n\\n    event ProposalClosed(uint256 proposalHash);\\n\\n    function creator() external view returns (address);\\n\\n    function title() external view returns (string memory);\\n\\n    function funder() external view returns (address);\\n\\n    function expiration() external view returns (uint256);\\n\\n    function status() external view returns (ProposalStatus);\\n\\n    function proposalData() external view returns (address);\\n\\n    function proposalType() external view returns (ProposalType);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address gov) external;\\n\\n    function fund() external payable;\\n\\n    function execute() external;\\n\\n    function close() external;\\n\\n    function initialize(\\n        address,\\n        string memory,\\n        address,\\n        ProposalType\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5913ecf90344d4b65cf8a2d9e321b95ff6a7a65efb775c5a947ff63c28933146\",\"license\":\"MIT\"},\"src/interfaces/IProposalData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface ICreatePoolProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            string memory,\\n            string memory,\\n\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            \\n            address\\n        );\\n}\\n\\ninterface IChangeFeeProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n}\\n\\ninterface IFundProjectProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            string memory,\\n            uint256\\n        );\\n}\\n\\ninterface IUpdateAllowlistProposalData {\\n    function data()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0xbe13f993a795c9095bb53d8235f6c4a57f553ba536c2e84d0a894e552e621eac\",\"license\":\"MIT\"},\"src/interfaces/IProposalFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n\\nimport \\\"./IProposal.sol\\\";\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface IProposalFactory {\\n    /**\\n     * @dev emitted when a new gem pool proposal has been added to the system\\n     */\\n    event ProposalCreated(address creator, uint256 proposalType, address proposal);\\n\\n    event ProposalFunded(uint256 indexed proposalHash, address indexed funder, uint256 expDate);\\n\\n    event ProposalExecuted(uint256 indexed proposalHash, address pool);\\n\\n    event ProposalClosed(uint256 indexed proposalHash, address pool);\\n\\n    function getProposal(uint256 _symbolHash) external view returns (address);\\n\\n    function allProposals(uint256 idx) external view returns (address);\\n\\n    function allProposalsLength() external view returns (uint256);\\n\\n    function createProposal(\\n        address submitter,\\n        string memory title,\\n        address proposalData,\\n        IProposal.ProposalType proposalType\\n    ) external returns (address payable);\\n}\\n\",\"keccak256\":\"0x410b8cec0a372d436c4e4139d009e067cfee5391ba99ff77fc10f56470bc588d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61234b610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610620000795760003560e01c8063c9ceb9511162000060578063c9ceb951146200027d578063d6c49d761462000356578063f87924d014620003ac5762000079565b806367083d6c146200007e578063866db7cb146200021f575b600080fd5b8180156200008b57600080fd5b50620001f66004803603610100811015620000a557600080fd5b810190602081018135640100000000811115620000c157600080fd5b820183602082011115620000d457600080fd5b80359060200191846001830284011164010000000083111715620000f757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156200014b57600080fd5b8201836020820111156200015e57600080fd5b803590602001918460018302840111640100000000831117156200018157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a0013573ffffffffffffffffffffffffffffffffffffffff1662000400565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b8180156200022c57600080fd5b506200027b600480360360808110156200024557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604082013581169160600135166200055b565b005b8180156200028a57600080fd5b50620001f660048036036060811015620002a357600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169190810190604081016020820135640100000000811115620002dc57600080fd5b820183602082011115620002ef57600080fd5b803590602001918460018302840111640100000000831117156200031257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250620014c3915050565b8180156200036357600080fd5b50620001f6600480360360608110156200037c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013515156200158f565b818015620003b957600080fd5b50620001f660048036036060811015620003d257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013562001605565b60008888888888888888604051620004189062001679565b8080602001806020018981526020018881526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b818151815260200191508051906020019080838360005b838110156200049257818101518382015260200162000478565b50505050905090810190601f168015620004c05780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b83811015620004f5578181015183820152602001620004db565b50505050905090810190601f168015620005235780820380516001836020036101000a031916815260200191505b509a5050505050505050505050604051809103906000f0801580156200054d573d6000803e3d6000fd5b509998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116620005de57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f494e56414c49445f50524f504f53414c00000000000000000000000000000000604482015290519081900360640190fd5b60028173ffffffffffffffffffffffffffffffffffffffff1663200d2ed26040518163ffffffff1660e01b815260040160206040518083038186803b1580156200062757600080fd5b505afa1580156200063c573d6000803e3d6000fd5b505050506040513d60208110156200065357600080fd5b505160058111156200066157fe5b14620006ce57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f50524f504f53414c5f4e4f545f50415353454400000000000000000000000000604482015290519081900360640190fd5b60008173ffffffffffffffffffffffffffffffffffffffff16634258292f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200071757600080fd5b505afa1580156200072c573d6000803e3d6000fd5b505050506040513d60208110156200074357600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff8116620007ca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f494e56414c49445f50524f504f53414c5f444154410000000000000000000000604482015290519081900360640190fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663351d9f966040518163ffffffff1660e01b815260040160206040518083038186803b1580156200081357600080fd5b505afa15801562000828573d6000803e3d6000fd5b505050506040513d60208110156200083f57600080fd5b505160038111156200084d57fe5b14156200092257604080517f96660a9400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80881660048301528087166024830152808616604483015284166064820152905173B22dB11bBB52ffCb45d832390829Ba67214C6fAa916396660a94916084808301926020929190829003018186803b158015620008ed57600080fd5b505af415801562000902573d6000803e3d6000fd5b505050506040513d60208110156200091957600080fd5b50620014bc9050565b60018273ffffffffffffffffffffffffffffffffffffffff1663351d9f966040518163ffffffff1660e01b815260040160206040518083038186803b1580156200096b57600080fd5b505afa15801562000980573d6000803e3d6000fd5b505050506040513d60208110156200099757600080fd5b50516003811115620009a557fe5b141562000c02576000808273ffffffffffffffffffffffffffffffffffffffff166373d4a13a6040518163ffffffff1660e01b815260040160006040518083038186803b158015620009f657600080fd5b505afa15801562000a0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052606081101562000a5357600080fd5b81516020830180516040519294929383019291908464010000000082111562000a7b57600080fd5b90830190602082018581111562000a9157600080fd5b825164010000000081118282018810171562000aac57600080fd5b82525081516020918201929091019080838360005b8381101562000adb57818101518382015260200162000ac1565b50505050905090810190601f16801562000b095780820380516001836020036101000a031916815260200191505b506040818152602092909201517fe9bb84c200000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff80881660048401526024830182905292519698509650908a169463e9bb84c294506044808301945060009350909182900301818387803b15801562000b9257600080fd5b505af115801562000ba7573d6000803e3d6000fd5b505060408051848152905173ffffffffffffffffffffffffffffffffffffffff8087169450881692507f089ccd0b370f282672fba04878692099aa3d275be8d9b16c44992cabcdc4fec19181900360200190a35050620014bc565b60028273ffffffffffffffffffffffffffffffffffffffff1663351d9f966040518163ffffffff1660e01b815260040160206040518083038186803b15801562000c4b57600080fd5b505afa15801562000c60573d6000803e3d6000fd5b505050506040513d602081101562000c7757600080fd5b5051600381111562000c8557fe5b1415620010ee5773ffffffffffffffffffffffffffffffffffffffff811662000d0f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f494e56414c49445f50524f504f53414c5f444154410000000000000000000000604482015290519081900360640190fd5b60008273ffffffffffffffffffffffffffffffffffffffff16634258292f6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000d5857600080fd5b505afa15801562000d6d573d6000803e3d6000fd5b505050506040513d602081101562000d8457600080fd5b5051604080517f73d4a13a00000000000000000000000000000000000000000000000000000000815290519192506000918291829173ffffffffffffffffffffffffffffffffffffffff8616916373d4a13a916004808301926060929190829003018186803b15801562000df757600080fd5b505afa15801562000e0c573d6000803e3d6000fd5b505050506040513d606081101562000e2357600080fd5b508051602082015160409092015190945090925090508062000ea657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f494e56414c49445f464545000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff83161562000f64578673ffffffffffffffffffffffffffffffffffffffff1663a51834ff84836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801562000f3557600080fd5b505af115801562000f4a573d6000803e3d6000fd5b505050506040513d602081101562000f6157600080fd5b50505b73ffffffffffffffffffffffffffffffffffffffff82161562001022578673ffffffffffffffffffffffffffffffffffffffff1663a51834ff83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801562000ff357600080fd5b505af115801562001008573d6000803e3d6000fd5b505050506040513d60208110156200101f57600080fd5b50505b73ffffffffffffffffffffffffffffffffffffffff83161580156200105b575073ffffffffffffffffffffffffffffffffffffffff8216155b15620010e4578673ffffffffffffffffffffffffffffffffffffffff16630415c9f4826040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015620010b557600080fd5b505af1158015620010ca573d6000803e3d6000fd5b505050506040513d6020811015620010e157600080fd5b50505b50505050620014bc565b60038273ffffffffffffffffffffffffffffffffffffffff1663351d9f966040518163ffffffff1660e01b815260040160206040518083038186803b1580156200113757600080fd5b505afa1580156200114c573d6000803e3d6000fd5b505050506040513d60208110156200116357600080fd5b505160038111156200117157fe5b1415620014bc5760008273ffffffffffffffffffffffffffffffffffffffff16634258292f6040518163ffffffff1660e01b815260040160206040518083038186803b158015620011c157600080fd5b505afa158015620011d6573d6000803e3d6000fd5b505050506040513d6020811015620011ed57600080fd5b5051604080517f73d4a13a00000000000000000000000000000000000000000000000000000000815290519192506000918291829173ffffffffffffffffffffffffffffffffffffffff8616916373d4a13a916004808301926060929190829003018186803b1580156200126057600080fd5b505afa15801562001275573d6000803e3d6000fd5b505050506040513d60608110156200128c57600080fd5b5080516020820151604090920151909450909250905073ffffffffffffffffffffffffffffffffffffffff83166200132557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f544f4b454e00000000000000000000000000000000000000604482015290519081900360640190fd5b801562001433578173ffffffffffffffffffffffffffffffffffffffff16634178617f846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200139657600080fd5b505af1158015620013ab573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f237fe6c0eefb0af9448c779e5f967709aa6c088364a07c4ac0ed2dfaffac87488460405180821515815260200191505060405180910390a4620014b7565b8173ffffffffffffffffffffffffffffffffffffffff166390469a9d846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200149d57600080fd5b505af1158015620014b2573d6000803e3d6000fd5b505050505b505050505b5050505050565b6000838383604051620014d69062001687565b808473ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015620015345781810151838201526020016200151a565b50505050905090810190601f168015620015625780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f08015801562001586573d6000803e3d6000fd5b50949350505050565b6000838383604051620015a29062001695565b808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182151581526020019350505050604051809103906000f08015801562001586573d6000803e3d6000fd5b60008383836040516200161890620016a3565b808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051809103906000f08015801562001586573d6000803e3d6000fd5b6105f180620016b283390190565b6103b08062001ca383390190565b610178806200205383390190565b61014b80620021cb8339019056fe608060405234801561001057600080fd5b506040516105f13803806105f1833981810160405261010081101561003457600080fd5b810190808051604051939291908464010000000082111561005457600080fd5b90830190602082018581111561006957600080fd5b825164010000000081118282018810171561008357600080fd5b82525081516020918201929091019080838360005b838110156100b0578181015183820152602001610098565b50505050905090810190601f1680156100dd5780820380516001836020036101000a031916815260200191505b506040526020018051604051939291908464010000000082111561010057600080fd5b90830190602082018581111561011557600080fd5b825164010000000081118282018810171561012f57600080fd5b82525081516020918201929091019080838360005b8381101561015c578181015183820152602001610144565b50505050905090810190601f1680156101895780820380516001836020036101000a031916815260200191505b506040908152602082810151918301516060840151608085015160a086015160c0909601518a519598509296509094909390926101cb916000918b019061021f565b5086516101df9060019060208a019061021f565b50600295909555600393909355600491909155600555600655600780546001600160a01b0319166001600160a01b03909216919091179055506102b29050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061026057805160ff191683800117855561028d565b8280016001018555821561028d579182015b8281111561028d578251825591602001919060010190610272565b5061029992915061029d565b5090565b5b80821115610299576000815560010161029e565b610330806102c16000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806373d4a13a14610030575b600080fd5b610038610156565b6040518080602001806020018981526020018881526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b818151815260200191508051906020019080838360005b838110156100b357818101518382015260200161009b565b50505050905090810190601f1680156100e05780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b838110156101135781810151838201526020016100fb565b50505050905090810190601f1680156101405780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b60608060008060008060008060006001600254600354600454600554600654600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561022d5780601f106102025761010080835404028352916020019161022d565b820191906000526020600020905b81548152906001019060200180831161021057829003601f168201915b50508a5460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f8101849004840282018401909252818152959d508c9450925084019050828280156102d95780601f106102ae576101008083540402835291602001916102d9565b820191906000526020600020905b8154815290600101906020018083116102bc57829003601f168201915b5050505050965097509750975097509750975097509750909192939495969756fea26469706673582212202ca751ae52149c56b64d349303f48da78d8eff1a3f4c94f5f3eb4c721d4a0cc764736f6c63430007030033608060405234801561001057600080fd5b506040516103b03803806103b08339818101604052606081101561003357600080fd5b81516020830180516040519294929383019291908464010000000082111561005a57600080fd5b90830190602082018581111561006f57600080fd5b825164010000000081118282018810171561008957600080fd5b82525081516020918201929091019080838360005b838110156100b657818101518382015260200161009e565b50505050905090810190601f1680156100e35780820380516001836020036101000a031916815260200191505b50604052602090810151600080546001600160a01b0319166001600160a01b038816179055845190935061011d9250600191850190610129565b50600255506101bc9050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016a57805160ff1916838001178555610197565b82800160010185558215610197579182015b8281111561019757825182559160200191906001019061017c565b506101a39291506101a7565b5090565b5b808211156101a357600081556001016101a8565b6101e5806101cb6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806373d4a13a14610030575b600080fd5b6100386100d4565b604051808473ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561009757818101518382015260200161007f565b50505050905090810190601f1680156100c45780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b600080546002805460018054604080516020601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85871615610100020190941696909604928301869004860281018601909152818152606095879573ffffffffffffffffffffffffffffffffffffffff9091169492849183018282801561019d5780601f106101725761010080835404028352916020019161019d565b820191906000526020600020905b81548152906001019060200180831161018057829003601f168201915b5050505050915092509250925090919256fea2646970667358221220871f64e6386c7f41b52059a6cd222a7aec2342a3e998548610c63afa5b59805964736f6c63430007030033608060405234801561001057600080fd5b506040516101783803806101788339818101604052606081101561003357600080fd5b5080516020820151604090920151600080546001600160a01b03199081166001600160a01b0394851617825560018054909116939094169290921760ff60a01b1916600160a01b911515919091021790915560e490819061009490396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806373d4a13a14602d575b600080fd5b6033606c565b6040805173ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015215158183015290519081900360600190f35b60005460015473ffffffffffffffffffffffffffffffffffffffff91821692918116917401000000000000000000000000000000000000000090910460ff169056fea2646970667358221220045663fc6059b075ebaa6207ba16d47effa4b1dcaf567c9f3f618305c469aae664736f6c63430007030033608060405234801561001057600080fd5b5060405161014b38038061014b8339818101604052606081101561003357600080fd5b5080516020820151604090920151600080546001600160a01b039384166001600160a01b031991821617909155600180549390941692169190911790915560025560c9806100826000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806373d4a13a14602d575b600080fd5b6033606a565b6040805173ffffffffffffffffffffffffffffffffffffffff94851681529290931660208301528183015290519081900360600190f35b60005460015460025473ffffffffffffffffffffffffffffffffffffffff92831693929091169156fea2646970667358221220d53fe7c3ff4155d500397e5bbe94e55c8b8af9d7b00f34f955fc6cf4bf48cac164736f6c63430007030033a2646970667358221220ec7ba59d56c80dcc6de19989d01d30f14fb6dd3e6d8f25832ede4c536911347b64736f6c63430007030033",
  "deployedBytecode": "0x7300000000000000000000000000000000000000003014608060405260043610620000795760003560e01c8063c9ceb9511162000060578063c9ceb951146200027d578063d6c49d761462000356578063f87924d014620003ac5762000079565b806367083d6c146200007e578063866db7cb146200021f575b600080fd5b8180156200008b57600080fd5b50620001f66004803603610100811015620000a557600080fd5b810190602081018135640100000000811115620000c157600080fd5b820183602082011115620000d457600080fd5b80359060200191846001830284011164010000000083111715620000f757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156200014b57600080fd5b8201836020820111156200015e57600080fd5b803590602001918460018302840111640100000000831117156200018157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a0013573ffffffffffffffffffffffffffffffffffffffff1662000400565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b8180156200022c57600080fd5b506200027b600480360360808110156200024557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604082013581169160600135166200055b565b005b8180156200028a57600080fd5b50620001f660048036036060811015620002a357600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169190810190604081016020820135640100000000811115620002dc57600080fd5b820183602082011115620002ef57600080fd5b803590602001918460018302840111640100000000831117156200031257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250620014c3915050565b8180156200036357600080fd5b50620001f6600480360360608110156200037c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013515156200158f565b818015620003b957600080fd5b50620001f660048036036060811015620003d257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013562001605565b60008888888888888888604051620004189062001679565b8080602001806020018981526020018881526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b818151815260200191508051906020019080838360005b838110156200049257818101518382015260200162000478565b50505050905090810190601f168015620004c05780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b83811015620004f5578181015183820152602001620004db565b50505050905090810190601f168015620005235780820380516001836020036101000a031916815260200191505b509a5050505050505050505050604051809103906000f0801580156200054d573d6000803e3d6000fd5b509998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116620005de57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f494e56414c49445f50524f504f53414c00000000000000000000000000000000604482015290519081900360640190fd5b60028173ffffffffffffffffffffffffffffffffffffffff1663200d2ed26040518163ffffffff1660e01b815260040160206040518083038186803b1580156200062757600080fd5b505afa1580156200063c573d6000803e3d6000fd5b505050506040513d60208110156200065357600080fd5b505160058111156200066157fe5b14620006ce57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f50524f504f53414c5f4e4f545f50415353454400000000000000000000000000604482015290519081900360640190fd5b60008173ffffffffffffffffffffffffffffffffffffffff16634258292f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200071757600080fd5b505afa1580156200072c573d6000803e3d6000fd5b505050506040513d60208110156200074357600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff8116620007ca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f494e56414c49445f50524f504f53414c5f444154410000000000000000000000604482015290519081900360640190fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663351d9f966040518163ffffffff1660e01b815260040160206040518083038186803b1580156200081357600080fd5b505afa15801562000828573d6000803e3d6000fd5b505050506040513d60208110156200083f57600080fd5b505160038111156200084d57fe5b14156200092257604080517f96660a9400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80881660048301528087166024830152808616604483015284166064820152905173__$415eb1c69eabc622d82690315fa0e33bfb$__916396660a94916084808301926020929190829003018186803b158015620008ed57600080fd5b505af415801562000902573d6000803e3d6000fd5b505050506040513d60208110156200091957600080fd5b50620014bc9050565b60018273ffffffffffffffffffffffffffffffffffffffff1663351d9f966040518163ffffffff1660e01b815260040160206040518083038186803b1580156200096b57600080fd5b505afa15801562000980573d6000803e3d6000fd5b505050506040513d60208110156200099757600080fd5b50516003811115620009a557fe5b141562000c02576000808273ffffffffffffffffffffffffffffffffffffffff166373d4a13a6040518163ffffffff1660e01b815260040160006040518083038186803b158015620009f657600080fd5b505afa15801562000a0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052606081101562000a5357600080fd5b81516020830180516040519294929383019291908464010000000082111562000a7b57600080fd5b90830190602082018581111562000a9157600080fd5b825164010000000081118282018810171562000aac57600080fd5b82525081516020918201929091019080838360005b8381101562000adb57818101518382015260200162000ac1565b50505050905090810190601f16801562000b095780820380516001836020036101000a031916815260200191505b506040818152602092909201517fe9bb84c200000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff80881660048401526024830182905292519698509650908a169463e9bb84c294506044808301945060009350909182900301818387803b15801562000b9257600080fd5b505af115801562000ba7573d6000803e3d6000fd5b505060408051848152905173ffffffffffffffffffffffffffffffffffffffff8087169450881692507f089ccd0b370f282672fba04878692099aa3d275be8d9b16c44992cabcdc4fec19181900360200190a35050620014bc565b60028273ffffffffffffffffffffffffffffffffffffffff1663351d9f966040518163ffffffff1660e01b815260040160206040518083038186803b15801562000c4b57600080fd5b505afa15801562000c60573d6000803e3d6000fd5b505050506040513d602081101562000c7757600080fd5b5051600381111562000c8557fe5b1415620010ee5773ffffffffffffffffffffffffffffffffffffffff811662000d0f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f494e56414c49445f50524f504f53414c5f444154410000000000000000000000604482015290519081900360640190fd5b60008273ffffffffffffffffffffffffffffffffffffffff16634258292f6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000d5857600080fd5b505afa15801562000d6d573d6000803e3d6000fd5b505050506040513d602081101562000d8457600080fd5b5051604080517f73d4a13a00000000000000000000000000000000000000000000000000000000815290519192506000918291829173ffffffffffffffffffffffffffffffffffffffff8616916373d4a13a916004808301926060929190829003018186803b15801562000df757600080fd5b505afa15801562000e0c573d6000803e3d6000fd5b505050506040513d606081101562000e2357600080fd5b508051602082015160409092015190945090925090508062000ea657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f494e56414c49445f464545000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff83161562000f64578673ffffffffffffffffffffffffffffffffffffffff1663a51834ff84836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801562000f3557600080fd5b505af115801562000f4a573d6000803e3d6000fd5b505050506040513d602081101562000f6157600080fd5b50505b73ffffffffffffffffffffffffffffffffffffffff82161562001022578673ffffffffffffffffffffffffffffffffffffffff1663a51834ff83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801562000ff357600080fd5b505af115801562001008573d6000803e3d6000fd5b505050506040513d60208110156200101f57600080fd5b50505b73ffffffffffffffffffffffffffffffffffffffff83161580156200105b575073ffffffffffffffffffffffffffffffffffffffff8216155b15620010e4578673ffffffffffffffffffffffffffffffffffffffff16630415c9f4826040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015620010b557600080fd5b505af1158015620010ca573d6000803e3d6000fd5b505050506040513d6020811015620010e157600080fd5b50505b50505050620014bc565b60038273ffffffffffffffffffffffffffffffffffffffff1663351d9f966040518163ffffffff1660e01b815260040160206040518083038186803b1580156200113757600080fd5b505afa1580156200114c573d6000803e3d6000fd5b505050506040513d60208110156200116357600080fd5b505160038111156200117157fe5b1415620014bc5760008273ffffffffffffffffffffffffffffffffffffffff16634258292f6040518163ffffffff1660e01b815260040160206040518083038186803b158015620011c157600080fd5b505afa158015620011d6573d6000803e3d6000fd5b505050506040513d6020811015620011ed57600080fd5b5051604080517f73d4a13a00000000000000000000000000000000000000000000000000000000815290519192506000918291829173ffffffffffffffffffffffffffffffffffffffff8616916373d4a13a916004808301926060929190829003018186803b1580156200126057600080fd5b505afa15801562001275573d6000803e3d6000fd5b505050506040513d60608110156200128c57600080fd5b5080516020820151604090920151909450909250905073ffffffffffffffffffffffffffffffffffffffff83166200132557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f544f4b454e00000000000000000000000000000000000000604482015290519081900360640190fd5b801562001433578173ffffffffffffffffffffffffffffffffffffffff16634178617f846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200139657600080fd5b505af1158015620013ab573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f237fe6c0eefb0af9448c779e5f967709aa6c088364a07c4ac0ed2dfaffac87488460405180821515815260200191505060405180910390a4620014b7565b8173ffffffffffffffffffffffffffffffffffffffff166390469a9d846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200149d57600080fd5b505af1158015620014b2573d6000803e3d6000fd5b505050505b505050505b5050505050565b6000838383604051620014d69062001687565b808473ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015620015345781810151838201526020016200151a565b50505050905090810190601f168015620015625780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f08015801562001586573d6000803e3d6000fd5b50949350505050565b6000838383604051620015a29062001695565b808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182151581526020019350505050604051809103906000f08015801562001586573d6000803e3d6000fd5b60008383836040516200161890620016a3565b808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051809103906000f08015801562001586573d6000803e3d6000fd5b6105f180620016b283390190565b6103b08062001ca383390190565b610178806200205383390190565b61014b80620021cb8339019056fe608060405234801561001057600080fd5b506040516105f13803806105f1833981810160405261010081101561003457600080fd5b810190808051604051939291908464010000000082111561005457600080fd5b90830190602082018581111561006957600080fd5b825164010000000081118282018810171561008357600080fd5b82525081516020918201929091019080838360005b838110156100b0578181015183820152602001610098565b50505050905090810190601f1680156100dd5780820380516001836020036101000a031916815260200191505b506040526020018051604051939291908464010000000082111561010057600080fd5b90830190602082018581111561011557600080fd5b825164010000000081118282018810171561012f57600080fd5b82525081516020918201929091019080838360005b8381101561015c578181015183820152602001610144565b50505050905090810190601f1680156101895780820380516001836020036101000a031916815260200191505b506040908152602082810151918301516060840151608085015160a086015160c0909601518a519598509296509094909390926101cb916000918b019061021f565b5086516101df9060019060208a019061021f565b50600295909555600393909355600491909155600555600655600780546001600160a01b0319166001600160a01b03909216919091179055506102b29050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061026057805160ff191683800117855561028d565b8280016001018555821561028d579182015b8281111561028d578251825591602001919060010190610272565b5061029992915061029d565b5090565b5b80821115610299576000815560010161029e565b610330806102c16000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806373d4a13a14610030575b600080fd5b610038610156565b6040518080602001806020018981526020018881526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b818151815260200191508051906020019080838360005b838110156100b357818101518382015260200161009b565b50505050905090810190601f1680156100e05780820380516001836020036101000a031916815260200191505b5083810382528a5181528a516020918201918c019080838360005b838110156101135781810151838201526020016100fb565b50505050905090810190601f1680156101405780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b60608060008060008060008060006001600254600354600454600554600654600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561022d5780601f106102025761010080835404028352916020019161022d565b820191906000526020600020905b81548152906001019060200180831161021057829003601f168201915b50508a5460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f8101849004840282018401909252818152959d508c9450925084019050828280156102d95780601f106102ae576101008083540402835291602001916102d9565b820191906000526020600020905b8154815290600101906020018083116102bc57829003601f168201915b5050505050965097509750975097509750975097509750909192939495969756fea26469706673582212202ca751ae52149c56b64d349303f48da78d8eff1a3f4c94f5f3eb4c721d4a0cc764736f6c63430007030033608060405234801561001057600080fd5b506040516103b03803806103b08339818101604052606081101561003357600080fd5b81516020830180516040519294929383019291908464010000000082111561005a57600080fd5b90830190602082018581111561006f57600080fd5b825164010000000081118282018810171561008957600080fd5b82525081516020918201929091019080838360005b838110156100b657818101518382015260200161009e565b50505050905090810190601f1680156100e35780820380516001836020036101000a031916815260200191505b50604052602090810151600080546001600160a01b0319166001600160a01b038816179055845190935061011d9250600191850190610129565b50600255506101bc9050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016a57805160ff1916838001178555610197565b82800160010185558215610197579182015b8281111561019757825182559160200191906001019061017c565b506101a39291506101a7565b5090565b5b808211156101a357600081556001016101a8565b6101e5806101cb6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806373d4a13a14610030575b600080fd5b6100386100d4565b604051808473ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561009757818101518382015260200161007f565b50505050905090810190601f1680156100c45780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b600080546002805460018054604080516020601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85871615610100020190941696909604928301869004860281018601909152818152606095879573ffffffffffffffffffffffffffffffffffffffff9091169492849183018282801561019d5780601f106101725761010080835404028352916020019161019d565b820191906000526020600020905b81548152906001019060200180831161018057829003601f168201915b5050505050915092509250925090919256fea2646970667358221220871f64e6386c7f41b52059a6cd222a7aec2342a3e998548610c63afa5b59805964736f6c63430007030033608060405234801561001057600080fd5b506040516101783803806101788339818101604052606081101561003357600080fd5b5080516020820151604090920151600080546001600160a01b03199081166001600160a01b0394851617825560018054909116939094169290921760ff60a01b1916600160a01b911515919091021790915560e490819061009490396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806373d4a13a14602d575b600080fd5b6033606c565b6040805173ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015215158183015290519081900360600190f35b60005460015473ffffffffffffffffffffffffffffffffffffffff91821692918116917401000000000000000000000000000000000000000090910460ff169056fea2646970667358221220045663fc6059b075ebaa6207ba16d47effa4b1dcaf567c9f3f618305c469aae664736f6c63430007030033608060405234801561001057600080fd5b5060405161014b38038061014b8339818101604052606081101561003357600080fd5b5080516020820151604090920151600080546001600160a01b039384166001600160a01b031991821617909155600180549390941692169190911790915560025560c9806100826000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806373d4a13a14602d575b600080fd5b6033606a565b6040805173ffffffffffffffffffffffffffffffffffffffff94851681529290931660208301528183015290519081900360600190f35b60005460015460025473ffffffffffffffffffffffffffffffffffffffff92831693929091169156fea2646970667358221220d53fe7c3ff4155d500397e5bbe94e55c8b8af9d7b00f34f955fc6cf4bf48cac164736f6c63430007030033a2646970667358221220ec7ba59d56c80dcc6de19989d01d30f14fb6dd3e6d8f25832ede4c536911347b64736f6c63430007030033",
  "libraries": {
    "GovernanceLib": "0xB22dB11bBB52ffCb45d832390829Ba67214C6fAa"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeProposal(address,address,address,address)": {
        "details": "execute this proposal if it is in the right state. Anyone can execute a proposal"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}