{
  "address": "0xa79B5FA742C5c539e0aa1B469550b3Fe4748125D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_soldToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vipReserve",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "PayeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "partner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "permill",
          "type": "uint256"
        }
      ],
      "name": "RevenuePartnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenHash",
          "type": "uint256"
        }
      ],
      "name": "TokenSold",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpenState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "openState",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPayee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRevenuePartner",
      "outputs": [
        {
          "internalType": "address",
          "name": "partner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "permill",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSalePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSaleToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "partner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "permill",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenHash",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minterList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenHash",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITokenSale.TokenMinting[]",
          "name": "_list",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenHash",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITokenSale.TokenMinting[]",
          "name": "mintings",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaserList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenHash",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITokenSale.TokenMinting[]",
          "name": "_list",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "salePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "openState",
          "type": "bool"
        }
      ],
      "name": "setOpenState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payee",
          "type": "address"
        }
      ],
      "name": "setPayee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "partner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "permill",
          "type": "uint256"
        }
      ],
      "name": "setRevenuePartner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "setSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9069c1f3632e5b24f98589865641170af89d60b138b4db4f0cecb5e0da19e599",
  "receipt": {
    "to": null,
    "from": "0x80EBffD553601340B688f246FD20a57BAab17AaD",
    "contractAddress": "0xa79B5FA742C5c539e0aa1B469550b3Fe4748125D",
    "transactionIndex": 5,
    "gasUsed": "1361398",
    "logsBloom": "0x
    "blockHash": "0x99d4f7c4d9d457a25fb304112585ff192a33e60814e5b6bf67c48567132edcfb",
    "transactionHash": "0x9069c1f3632e5b24f98589865641170af89d60b138b4db4f0cecb5e0da19e599",
    "logs": [],
    "blockNumber": 11087522,
    "cumulativeGasUsed": "2110823",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x27B113C0853c4a3E379B45E7FFc7CC25aA1f2a13",
    "1000000000000000000",
    9999,
    25
  ],
  "solcInputHash": "b09fe7e91ecd746796b1258e3c57072e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_soldToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vipReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"PayeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"permill\",\"type\":\"uint256\"}],\"name\":\"RevenuePartnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenHash\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"openState\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPayee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevenuePartner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"permill\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"permill\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenHash\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenHash\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenSale.TokenMinting[]\",\"name\":\"_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenHash\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenSale.TokenMinting[]\",\"name\":\"mintings\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaserList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenHash\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenSale.TokenMinting[]\",\"name\":\"_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"openState\",\"type\":\"bool\"}],\"name\":\"setOpenState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payee\",\"type\":\"address\"}],\"name\":\"setPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"permill\",\"type\":\"uint256\"}],\"name\":\"setRevenuePartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"constructor\":{\"params\":{\"_maxCount\":\"- the max quantity\",\"_salePrice\":\"- the sale price\",\"_soldToken\":\"- the erc721 address\",\"_vipReserve\":\"- the vip reserve to set aside for minting directly\"}},\"getOpenState()\":{\"returns\":{\"openState\":\"- the open state of the tokensale\"}},\"getPayee()\":{\"returns\":{\"_0\":\"salePrice - the open state of the tokensale\"}},\"getRevenuePartner()\":{\"returns\":{\"partner\":\"- the address of the partner. will receive x%% of the revenue\",\"permill\":\"- permilliage of the revenue to be split. permill = 1 / 1000000\"}},\"getSalePrice()\":{\"returns\":{\"_0\":\"salePrice - the open state of the tokensale\"}},\"getSaleToken()\":{\"returns\":{\"token\":\"- the address of the sole token\"}},\"initialize(address,uint256)\":{\"details\":\"called after constructor once to init stuff\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"mint(address,uint256)\":{\"params\":{\"receiver\":\"- the address of the account receiving the item\",\"tokenHash\":\"- token hash to mint to the receiver\"}},\"minterList()\":{\"returns\":{\"_list\":\"- total list of purchasers\"}},\"purchase(address,uint256)\":{\"params\":{\"quantity\":\"- the quantity to purchase. max 5. \",\"receiver\":\"- the address of the account receiving the item\"}},\"purchaserList()\":{\"returns\":{\"_list\":\"- total list of purchasers\"}},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"},\"salePrice(uint256)\":{\"params\":{\"quantity\":\"- the quantity to purchase. max 5. \"},\"returns\":{\"price\":\"- the sale price for the given quantity\"}},\"setOpenState(bool)\":{\"params\":{\"openState\":\"- the open state of the tokensale\"}},\"setPayee(address)\":{\"params\":{\"_payee\":\"- the open state of the tokensale\"}},\"setRevenuePartner(address,uint256)\":{\"params\":{\"partner\":\"- the address of the partner. will receive x%% of the revenue\",\"permill\":\"- permilliage of the revenue to be split. min 0 max 1000000\"}},\"setSalePrice(uint256)\":{\"params\":{\"_salePrice\":\"- the open state of the tokensale\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Called to purchase some quantity of a token\"},\"getOpenState()\":{\"notice\":\"get the token sale open state\"},\"getPayee()\":{\"notice\":\"get the token sale price\"},\"getRevenuePartner()\":{\"notice\":\"get the revenue partner on this tokensale. we split revenue with the partner\"},\"getSalePrice()\":{\"notice\":\"get the token sale price\"},\"getSaleToken()\":{\"notice\":\"get the address of the sole token\"},\"mint(address,uint256)\":{\"notice\":\"Mint a specific tokenhash to a specific address ( up to har-cap limit) only for controller of token\"},\"minterList()\":{\"notice\":\"get the total list of minters\"},\"purchase(address,uint256)\":{\"notice\":\"Called to purchase some quantity of a token\"},\"purchaserList()\":{\"notice\":\"get the total list of purchasers\"},\"salePrice(uint256)\":{\"notice\":\"returns the sale price in ETH for the given quantity.\"},\"setOpenState(bool)\":{\"notice\":\"open / close the tokensale only for controller of token\"},\"setPayee(address)\":{\"notice\":\"set the psale price only for controller of token\"},\"setRevenuePartner(address,uint256)\":{\"notice\":\"set the revenue partner on this tokensale. we split revenue with the partner only for controller of token\"},\"setSalePrice(uint256)\":{\"notice\":\"set the psale price only for controller of token\"}},\"notice\":\"tokensale implementation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/TokenSale.sol\":\"TokenSale\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2222},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x2f27682302bd27f76399273e73cedecd2de098aa101401a3b5f2196f520da6c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller)\\n        external\\n        override\\n        onlyController\\n    {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address)\\n        external\\n        view\\n        override\\n        returns (bool allowed)\\n    {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Remove the sender address from the list of controllers\\n     */\\n    function relinquishControl() external override onlyController {\\n        delete _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0x1bd0028722202b3a3237398f66f01cdcf4d067f5e42fb34060508ec558558201\",\"license\":\"MIT\"},\"src/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IControllable {\\n    \\n    event ControllerAdded(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    event ControllerRemoved(\\n        address indexed contractAddress,\\n        address indexed controllerAddress\\n    );\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x961dc5f72ca9f87cb1ebe78472983f62c3684dd705b4e079ebad68b46123e361\",\"license\":\"MIT\"},\"src/ITokenSale.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n///\\r\\n/// @dev Interface for the NFT Royalty Standard\\r\\n///\\r\\ninterface ITokenSale {\\r\\n\\r\\n    /// @notice Called to purchase some quantity of a token\\r\\n    /// @param receiver - the address of the account receiving the item\\r\\n    /// @param quantity - the quantity to purchase. max 5. \\r\\n    function purchase(address receiver, uint256 quantity) external payable returns (TokenMinting[] memory mintings);\\r\\n\\r\\n    /// @notice returns the sale price in ETH for the given quantity.\\r\\n    /// @param quantity - the quantity to purchase. max 5. \\r\\n    /// @return price - the sale price for the given quantity\\r\\n    function salePrice(uint256 quantity) external view returns (uint256 price);\\r\\n\\r\\n    /// @notice Mint a specific tokenhash to a specific address ( up to har-cap limit)\\r\\n    /// only for controller of token\\r\\n    /// @param receiver - the address of the account receiving the item\\r\\n    /// @param tokenHash - token hash to mint to the receiver\\r\\n    function mint(address receiver, uint256 tokenHash) external;\\r\\n\\r\\n    /// @notice set the revenue partner on this tokensale. we split revenue with the partner\\r\\n    /// only for controller of token\\r\\n    /// @param partner - the address of the partner. will receive x%% of the revenue\\r\\n    /// @param permill - permilliage of the revenue to be split. min 0 max 1000000\\r\\n    function setRevenuePartner(address partner, uint256 permill) external;\\r\\n\\r\\n    /// @notice get the revenue partner on this tokensale. we split revenue with the partner\\r\\n    /// @return partner - the address of the partner. will receive x%% of the revenue\\r\\n    /// @return permill - permilliage of the revenue to be split. permill = 1 / 1000000\\r\\n    function getRevenuePartner() external view returns (address , uint256);\\r\\n\\r\\n    /// @notice open / close the tokensale\\r\\n    /// only for controller of token\\r\\n    /// @param openState - the open state of the tokensale\\r\\n    function setOpenState(bool openState) external;\\r\\n\\r\\n    /// @notice get the token sale open state\\r\\n    /// @return openState - the open state of the tokensale\\r\\n    function getOpenState() external view returns (bool);\\r\\n\\r\\n    /// @notice set the psale price\\r\\n    /// only for controller of token\\r\\n    /// @param _salePrice - the open state of the tokensale\\r\\n    function setSalePrice(uint256 _salePrice) external;\\r\\n\\r\\n    /// @notice get the token sale price\\r\\n    /// @return salePrice - the open state of the tokensale\\r\\n    function getSalePrice() external view returns(uint256);\\r\\n\\r\\n\\r\\n    /// @notice get the address of the sole token\\r\\n    /// @return token - the address of the sole token\\r\\n    function getSaleToken() external view returns(address);\\r\\n\\r\\n    /// @notice get the primary token sale payee\\r\\n    /// @return payee_ the token sale payee\\r\\n    function getPayee() external view returns (address payee_);\\r\\n    \\r\\n    /// @notice set the primary token sale payee\\r\\n    /// @param _payee - the token sale payee\\r\\n    function setPayee(address _payee) external;\\r\\n\\r\\n    /// @notice return the mintee list\\r\\n    /// @return _list the token sale payee\\r\\n    function minterList() external view returns (TokenMinting[] memory _list);\\r\\n\\r\\n    /// @notice return the purchaser list\\r\\n    /// @return _list the token sale payee\\r\\n    function purchaserList() external view returns (TokenMinting[] memory _list);\\r\\n\\r\\n    struct TokenMinting {\\r\\n        address recipient;\\r\\n        uint256 tokenHash;\\r\\n    }\\r\\n\\r\\n    event TokenSold(address indexed receiver, uint256 tokenHash);\\r\\n    event PayeeChanged(address indexed receiver);\\r\\n    event RevenuePartnerChanged(address indexed partner, uint256 permill);\\r\\n}\\r\\n\\r\\ninterface IMintable {\\r\\n    function mint(address receiver, uint256 tokenHash) external;\\r\\n    function getMinter() external view returns (address);\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x8be7490e00890d13fa33646ffe1863130db275528bf6de2c8f8476988c23d5ee\",\"license\":\"Unlicense\"},\"src/TokenSale.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"./Controllable.sol\\\";\\r\\nimport \\\"./ITokenSale.sol\\\";\\r\\n\\r\\n/// tokensale implementation\\r\\ncontract TokenSale is ITokenSale, Controllable, Initializable {\\r\\n\\r\\n    address payee;\\r\\n    address soldToken;\\r\\n    uint256 salePrice_;\\r\\n    uint256 issueCount;\\r\\n    uint256 maxCount;\\r\\n    uint256 vipReserve;\\r\\n    uint256 vipIssued;\\r\\n\\r\\n    TokenMinting[] _purchasers;\\r\\n    TokenMinting[] _mintees;\\r\\n\\r\\n    address _partner;\\r\\n    uint256 _permill;\\r\\n\\r\\n    bool _openState;\\r\\n\\r\\n    /// @notice Called to purchase some quantity of a token\\r\\n    /// @param _soldToken - the erc721 address\\r\\n    /// @param _salePrice - the sale price\\r\\n    /// @param _maxCount - the max quantity\\r\\n    /// @param _vipReserve - the vip reserve to set aside for minting directly\\r\\n    constructor(address _soldToken, uint256 _salePrice, uint256 _maxCount, uint256 _vipReserve) {\\r\\n\\r\\n        _addController(msg.sender);\\r\\n        payee = msg.sender;\\r\\n        soldToken = _soldToken;\\r\\n        salePrice_ = _salePrice;\\r\\n        issueCount = 0;\\r\\n        maxCount = _maxCount;\\r\\n        vipReserve = _vipReserve;\\r\\n        vipIssued = 0;\\r\\n    }\\r\\n\\r\\n    /// @dev called after constructor once to init stuff\\r\\n    function initialize(address partner, uint256 permill) public initializer {\\r\\n        require(IMintable(soldToken).getMinter() == address(this), \\\"soldToken must be controllable by this contract\\\");\\r\\n        _partner = partner;\\r\\n        _permill = permill;\\r\\n    }\\r\\n\\r\\n    /// @dev create a token hash using the address of this objcet, sender address and the current issue count\\r\\n    function _createTokenHash() internal view returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(address(this), msg.sender, issueCount)));\\r\\n    }\\r\\n\\r\\n    /// @notice Called to purchase some quantity of a token\\r\\n    /// @param receiver - the address of the account receiving the item\\r\\n    /// @param quantity - the quantity to purchase. max 5. \\r\\n    function purchase(address receiver, uint256 quantity) external payable override returns (TokenMinting[] memory mintings) {\\r\\n        require(issueCount + quantity + vipReserve <= maxCount, \\\"cannot purchase more than maxCount\\\");\\r\\n        require(salePrice_ * quantity <= msg.value, \\\"must attach funds to purchase items\\\");\\r\\n        require(quantity > 0 && quantity <= 5, \\\"cannot purchase more than 5 items\\\");\\r\\n        require(_openState, \\\"cannot mint when tokensale is closed\\\");\\r\\n\\r\\n        // mint the desired tokens to the receiver\\r\\n        mintings = new TokenMinting[](quantity);\\r\\n        for(uint256 i = 0; i < quantity; i++) {\\r\\n            TokenMinting memory _minting = TokenMinting(receiver, _createTokenHash());\\r\\n            // create a record of this new minting\\r\\n            _purchasers.push(_minting);\\r\\n            // and get a refence to it\\r\\n            mintings[i] = _minting;\\r\\n            issueCount = issueCount + 1;\\r\\n            // mint the token\\r\\n            IMintable(soldToken).mint(receiver, _minting.tokenHash);\\r\\n            // emit an event to that respect\\r\\n            emit TokenSold(receiver, _minting.tokenHash);\\r\\n        }\\r\\n\\r\\n        uint256 partnerShare = 0;\\r\\n        // transfer to partner share\\r\\n        if(_partner != address(0) && _permill > 0) {\\r\\n            partnerShare = msg.value * _permill / 1000000;\\r\\n            payable(_partner).transfer(partnerShare);\\r\\n        }\\r\\n        uint256 ourShare = msg.value - partnerShare; \\r\\n        payable(payee).transfer(ourShare);\\r\\n    }\\r\\n\\r\\n    /// @notice returns the sale price in ETH for the given quantity.\\r\\n    /// @param quantity - the quantity to purchase. max 5. \\r\\n    /// @return price - the sale price for the given quantity\\r\\n    function salePrice(uint256 quantity) external view override returns (uint256 price) {\\r\\n        price = salePrice_ * quantity;\\r\\n    }\\r\\n\\r\\n    /// @notice Mint a specific tokenhash to a specific address ( up to har-cap limit)\\r\\n    /// only for controller of token\\r\\n    /// @param receiver - the address of the account receiving the item\\r\\n    /// @param tokenHash - token hash to mint to the receiver\\r\\n    function mint(address receiver, uint256 tokenHash) external override onlyController {\\r\\n        require(vipIssued < vipReserve, \\\"cannot mint more than the reserve\\\");\\r\\n        require(issueCount < maxCount, \\\"cannot mint more than maxCount\\\");\\r\\n        vipIssued = vipIssued + 1;\\r\\n        issueCount = issueCount + 1;\\r\\n        _mintees.push(TokenMinting(receiver, _createTokenHash()));\\r\\n        IMintable(soldToken).mint(receiver, tokenHash);\\r\\n    }\\r\\n\\r\\n    /// @notice set the revenue partner on this tokensale. we split revenue with the partner\\r\\n    /// only for controller of token\\r\\n    /// @param partner - the address of the partner. will receive x%% of the revenue\\r\\n    /// @param permill - permilliage of the revenue to be split. min 0 max 1000000\\r\\n    function setRevenuePartner(address partner, uint256 permill) external override onlyController {\\r\\n        require(permill >= 0 && permill <= 1000000, \\\"permill must be between 0 and 1000000\\\");\\r\\n        _partner = partner;\\r\\n        _permill = permill;\\r\\n        emit RevenuePartnerChanged(partner, permill);\\r\\n    }\\r\\n\\r\\n    /// @notice get the revenue partner on this tokensale. we split revenue with the partner\\r\\n    /// @return partner - the address of the partner. will receive x%% of the revenue\\r\\n    /// @return permill - permilliage of the revenue to be split. permill = 1 / 1000000\\r\\n    function getRevenuePartner() external view override returns (address partner, uint256 permill) {\\r\\n        return (_partner, _permill);\\r\\n    }\\r\\n\\r\\n    /// @notice open / close the tokensale\\r\\n    /// only for controller of token\\r\\n    /// @param openState - the open state of the tokensale\\r\\n    function setOpenState(bool openState) external override onlyController {\\r\\n        _openState = openState;\\r\\n    }\\r\\n\\r\\n    /// @notice get the token sale open state\\r\\n    /// @return openState - the open state of the tokensale\\r\\n    function getOpenState() external view override returns (bool openState) {\\r\\n        openState = _openState;\\r\\n    }\\r\\n\\r\\n    /// @notice set the psale price\\r\\n    /// only for controller of token\\r\\n    /// @param _salePrice - the open state of the tokensale\\r\\n    function setSalePrice(uint256 _salePrice) external override onlyController {\\r\\n        require(salePrice_ > 0, \\\"salePrice must be greater than 0\\\");\\r\\n        salePrice_ = _salePrice;\\r\\n    }\\r\\n\\r\\n    /// @notice get the token sale price\\r\\n    /// @return salePrice - the open state of the tokensale\\r\\n    function getSalePrice() external view  override returns (uint256) {\\r\\n        return salePrice_;\\r\\n    }\\r\\n\\r\\n    /// @notice set the psale price\\r\\n    /// only for controller of token\\r\\n    /// @param _payee - the open state of the tokensale\\r\\n    function setPayee(address _payee) external override onlyController {\\r\\n        require(_payee != address(0), \\\"payee cannoot be zero address\\\");\\r\\n        payee = _payee;\\r\\n        emit PayeeChanged(payee);\\r\\n    }\\r\\n\\r\\n    /// @notice get the token sale price\\r\\n    /// @return salePrice - the open state of the tokensale\\r\\n    function getPayee() external view  override returns (address) {\\r\\n        return payee;\\r\\n    }\\r\\n\\r\\n    /// @notice get the address of the sole token\\r\\n    /// @return token - the address of the sole token\\r\\n    function getSaleToken() external view override returns (address token) {\\r\\n        return soldToken;\\r\\n    }\\r\\n\\r\\n    /// @notice get the total list of purchasers\\r\\n    /// @return _list - total list of purchasers\\r\\n    function purchaserList() external view override returns (TokenMinting[] memory _list) {\\r\\n        _list = _purchasers;\\r\\n    }\\r\\n\\r\\n    /// @notice get the total list of minters\\r\\n    /// @return _list - total list of purchasers\\r\\n    function minterList() external view override returns (TokenMinting[] memory _list) {\\r\\n        _list = _mintees;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb1950616a48913bbeb7d8fcdb4c64c7c324e440643b63a6ac7deed2fddeaf52b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161163938038061163983398101604081905261002f916100b7565b61003833610093565b6001805462010000600160b01b031916336201000002179055600280546001600160a01b0319166001600160a01b03959095169490941790935560039190915560006004819055600591909155600691909155600755610100565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b600080600080608085870312156100cc578384fd5b84516001600160a01b03811681146100e2578485fd5b60208601516040870151606090970151919890975090945092505050565b61152a8061010f6000396000f3fe6080604052600436106101295760003560e01c8063a7fc7a07116100a5578063e1c28bef11610074578063ec3dd11611610059578063ec3dd11614610301578063edf85f5114610316578063f36c616f1461033657610129565b8063e1c28bef146102c9578063e8a01063146102de57610129565b8063a7fc7a0714610247578063b429afeb14610267578063cd44673514610287578063cd6dc687146102a957610129565b8063410459ad116100fc5780634daf4c42116100e15780634daf4c42146101f25780635a4c8445146102125780638de932221461023457610129565b8063410459ad146101bd57806341f08b52146101dd57610129565b80631317b5871461012e5780631919fed7146101595780632fbc0bf11461017b57806340c10f191461019d575b600080fd5b34801561013a57600080fd5b50610143610356565b6040516101509190610fe9565b60405180910390f35b34801561016557600080fd5b50610179610174366004610f63565b6103cb565b005b34801561018757600080fd5b50610190610439565b6040516101509190611434565b3480156101a957600080fd5b506101796101b8366004610f18565b61043f565b3480156101c957600080fd5b506101796101d8366004610ed9565b6105d4565b3480156101e957600080fd5b506101436106a7565b3480156101fe57600080fd5b5061017961020d366004610f18565b610712565b34801561021e57600080fd5b506102276107df565b6040516101509190611041565b610143610242366004610f18565b6107e8565b34801561025357600080fd5b50610179610262366004610ed9565b610bb7565b34801561027357600080fd5b50610227610282366004610ed9565b610c19565b34801561029357600080fd5b5061029c610c37565b6040516101509190610fbc565b3480156102b557600080fd5b506101796102c4366004610f18565b610c4c565b3480156102d557600080fd5b50610179610daa565b3480156102ea57600080fd5b506102f3610e01565b604051610150929190610fd0565b34801561030d57600080fd5b5061029c610e15565b34801561032257600080fd5b50610190610331366004610f63565b610e24565b34801561034257600080fd5b50610179610351366004610f43565b610e3a565b60606008805480602002602001604051908101604052809291908181526020016000905b828210156103c2576000848152602090819020604080518082019091526002850290910180546001600160a01b0316825260019081015482840152908352909201910161037a565b50505050905090565b3360009081526020819052604090205460ff161515600114806103ed57503033145b6104125760405162461bcd60e51b81526004016104099061137a565b60405180910390fd5b6000600354116104345760405162461bcd60e51b815260040161040990611345565b600355565b60035490565b3360009081526020819052604090205460ff1615156001148061046157503033145b61047d5760405162461bcd60e51b81526004016104099061137a565b600654600754106104a05760405162461bcd60e51b8152600401610409906113d7565b600554600454106104c35760405162461bcd60e51b81526004016104099061113d565b6007546104d190600161143d565b6007556004546104e290600161143d565b60048190555060096040518060400160405280846001600160a01b0316815260200161050c610e8b565b9052815460018082018455600093845260209384902083516002938402909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161781559390940151920191909155546040517f40c10f190000000000000000000000000000000000000000000000000000000081529116906340c10f199061059e9085908590600401610fd0565b600060405180830381600087803b1580156105b857600080fd5b505af11580156105cc573d6000803e3d6000fd5b505050505050565b3360009081526020819052604090205460ff161515600114806105f657503033145b6106125760405162461bcd60e51b81526004016104099061137a565b6001600160a01b0381166106385760405162461bcd60e51b815260040161040990611106565b600180547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b0384811682029290921792839055604051920416907f2053f52cc4bae36f993510e31596b2873fbb03ad574710ee044429b73ceb9aff90600090a250565b6060600980548060200260200160405190810160405280929190818152602001600090828210156103c2576000848152602090819020604080518082019091526002850290910180546001600160a01b0316825260019081015482840152908352909201910161037a565b3360009081526020819052604090205460ff1615156001148061073457503033145b6107505760405162461bcd60e51b81526004016104099061137a565b620f42408111156107735760405162461bcd60e51b8152600401610409906110a9565b600a805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155600b8290556040517f4e9b09441471ab29764768f4e2f064608fd401c79096bb4132e0e27a64b8ea87906107d3908490611434565b60405180910390a25050565b600c5460ff1690565b6060600554600654836004546107fe919061143d565b610808919061143d565b11156108265760405162461bcd60e51b8152600401610409906111d1565b34826003546108359190611475565b11156108535760405162461bcd60e51b815260040161040990611174565b600082118015610864575060058211155b6108805760405162461bcd60e51b81526004016104099061104c565b600c5460ff166108a25760405162461bcd60e51b81526004016104099061128b565b8167ffffffffffffffff8111156108c957634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561090257816020015b6108ef610ec2565b8152602001906001900390816108e75790505b50905060005b82811015610ae35760006040518060400160405280866001600160a01b03168152602001610934610e8b565b90526008805460018101825560009190915281517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee36002909202918201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905560208201517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee490910155835190915081908490849081106109ec57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506004546001610a06919061143d565b600490815560025460208301516040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03909216926340c10f1992610a59928a92909101610fd0565b600060405180830381600087803b158015610a7357600080fd5b505af1158015610a87573d6000803e3d6000fd5b50505050846001600160a01b03167ffe2ff4cf36ff7d2c2b06eb960897ee0d76d9c3e58da12feb7b93e86b226dd3448260200151604051610ac89190611434565b60405180910390a25080610adb816114ab565b915050610908565b50600a546000906001600160a01b031615801590610b0357506000600b54115b15610b6157620f4240600b5434610b1a9190611475565b610b249190611455565b600a546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015610b5f573d6000803e3d6000fd5b505b6000610b6d8234611494565b6001546040519192506201000090046001600160a01b0316906108fc8315029083906000818181858888f19350505050158015610bae573d6000803e3d6000fd5b50505092915050565b3360009081526020819052604090205460ff16151560011480610bd957503033145b610bf55760405162461bcd60e51b81526004016104099061137a565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6001600160a01b031660009081526020819052604090205460ff1690565b6001546201000090046001600160a01b031690565b600154610100900460ff1680610c65575060015460ff16155b610c815760405162461bcd60e51b8152600401610409906112e8565b600154610100900460ff16158015610cab576001805460ff1961ff00199091166101001716811790555b600254604080517ff3667517000000000000000000000000000000000000000000000000000000008152905130926001600160a01b03169163f3667517916004808301926020929190829003018186803b158015610d0857600080fd5b505afa158015610d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d409190610efc565b6001600160a01b031614610d665760405162461bcd60e51b81526004016104099061122e565b600a805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055600b8290558015610da5576001805461ff00191690555b505050565b3360009081526020819052604090205460ff16151560011480610dcc57503033145b610de85760405162461bcd60e51b81526004016104099061137a565b336000908152602081905260409020805460ff19169055565b600a54600b546001600160a01b0390911691565b6002546001600160a01b031690565b600081600354610e349190611475565b92915050565b3360009081526020819052604090205460ff16151560011480610e5c57503033145b610e785760405162461bcd60e51b81526004016104099061137a565b600c805460ff1916911515919091179055565b60003033600454604051602001610ea493929190610f7b565b6040516020818303038152906040528051906020012060001c905090565b604080518082019091526000808252602082015290565b600060208284031215610eea578081fd5b8135610ef5816114dc565b9392505050565b600060208284031215610f0d578081fd5b8151610ef5816114dc565b60008060408385031215610f2a578081fd5b8235610f35816114dc565b946020939093013593505050565b600060208284031215610f54578081fd5b81358015158114610ef5578182fd5b600060208284031215610f74578081fd5b5035919050565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811682529290931b9091166014830152602882015260480190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b8281101561103457815180516001600160a01b03168552860151868501529284019290850190600101611006565b5091979650505050505050565b901515815260200190565b60208082526021908201527f63616e6e6f74207075726368617365206d6f7265207468616e2035206974656d60408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f7065726d696c6c206d757374206265206265747765656e203020616e6420313060408201527f3030303030000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f70617965652063616e6e6f6f74206265207a65726f2061646472657373000000604082015260600190565b6020808252601e908201527f63616e6e6f74206d696e74206d6f7265207468616e206d6178436f756e740000604082015260600190565b60208082526023908201527f6d757374206174746163682066756e647320746f20707572636861736520697460408201527f656d730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f63616e6e6f74207075726368617365206d6f7265207468616e206d6178436f7560408201527f6e74000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f736f6c64546f6b656e206d75737420626520636f6e74726f6c6c61626c65206260408201527f79207468697320636f6e74726163740000000000000000000000000000000000606082015260800190565b60208082526024908201527f63616e6e6f74206d696e74207768656e20746f6b656e73616c6520697320636c60408201527f6f73656400000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b6020808252818101527f73616c655072696365206d7573742062652067726561746572207468616e2030604082015260600190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f63616e6e6f74206d696e74206d6f7265207468616e207468652072657365727660408201527f6500000000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60008219821115611450576114506114c6565b500190565b60008261147057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561148f5761148f6114c6565b500290565b6000828210156114a6576114a66114c6565b500390565b60006000198214156114bf576114bf6114c6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146114f157600080fd5b5056fea2646970667358221220a572887c1eb509a39202b922a542028b71124adf0435cd54785b9027fb6f0cce64736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106101295760003560e01c8063a7fc7a07116100a5578063e1c28bef11610074578063ec3dd11611610059578063ec3dd11614610301578063edf85f5114610316578063f36c616f1461033657610129565b8063e1c28bef146102c9578063e8a01063146102de57610129565b8063a7fc7a0714610247578063b429afeb14610267578063cd44673514610287578063cd6dc687146102a957610129565b8063410459ad116100fc5780634daf4c42116100e15780634daf4c42146101f25780635a4c8445146102125780638de932221461023457610129565b8063410459ad146101bd57806341f08b52146101dd57610129565b80631317b5871461012e5780631919fed7146101595780632fbc0bf11461017b57806340c10f191461019d575b600080fd5b34801561013a57600080fd5b50610143610356565b6040516101509190610fe9565b60405180910390f35b34801561016557600080fd5b50610179610174366004610f63565b6103cb565b005b34801561018757600080fd5b50610190610439565b6040516101509190611434565b3480156101a957600080fd5b506101796101b8366004610f18565b61043f565b3480156101c957600080fd5b506101796101d8366004610ed9565b6105d4565b3480156101e957600080fd5b506101436106a7565b3480156101fe57600080fd5b5061017961020d366004610f18565b610712565b34801561021e57600080fd5b506102276107df565b6040516101509190611041565b610143610242366004610f18565b6107e8565b34801561025357600080fd5b50610179610262366004610ed9565b610bb7565b34801561027357600080fd5b50610227610282366004610ed9565b610c19565b34801561029357600080fd5b5061029c610c37565b6040516101509190610fbc565b3480156102b557600080fd5b506101796102c4366004610f18565b610c4c565b3480156102d557600080fd5b50610179610daa565b3480156102ea57600080fd5b506102f3610e01565b604051610150929190610fd0565b34801561030d57600080fd5b5061029c610e15565b34801561032257600080fd5b50610190610331366004610f63565b610e24565b34801561034257600080fd5b50610179610351366004610f43565b610e3a565b60606008805480602002602001604051908101604052809291908181526020016000905b828210156103c2576000848152602090819020604080518082019091526002850290910180546001600160a01b0316825260019081015482840152908352909201910161037a565b50505050905090565b3360009081526020819052604090205460ff161515600114806103ed57503033145b6104125760405162461bcd60e51b81526004016104099061137a565b60405180910390fd5b6000600354116104345760405162461bcd60e51b815260040161040990611345565b600355565b60035490565b3360009081526020819052604090205460ff1615156001148061046157503033145b61047d5760405162461bcd60e51b81526004016104099061137a565b600654600754106104a05760405162461bcd60e51b8152600401610409906113d7565b600554600454106104c35760405162461bcd60e51b81526004016104099061113d565b6007546104d190600161143d565b6007556004546104e290600161143d565b60048190555060096040518060400160405280846001600160a01b0316815260200161050c610e8b565b9052815460018082018455600093845260209384902083516002938402909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161781559390940151920191909155546040517f40c10f190000000000000000000000000000000000000000000000000000000081529116906340c10f199061059e9085908590600401610fd0565b600060405180830381600087803b1580156105b857600080fd5b505af11580156105cc573d6000803e3d6000fd5b505050505050565b3360009081526020819052604090205460ff161515600114806105f657503033145b6106125760405162461bcd60e51b81526004016104099061137a565b6001600160a01b0381166106385760405162461bcd60e51b815260040161040990611106565b600180547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b0384811682029290921792839055604051920416907f2053f52cc4bae36f993510e31596b2873fbb03ad574710ee044429b73ceb9aff90600090a250565b6060600980548060200260200160405190810160405280929190818152602001600090828210156103c2576000848152602090819020604080518082019091526002850290910180546001600160a01b0316825260019081015482840152908352909201910161037a565b3360009081526020819052604090205460ff1615156001148061073457503033145b6107505760405162461bcd60e51b81526004016104099061137a565b620f42408111156107735760405162461bcd60e51b8152600401610409906110a9565b600a805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155600b8290556040517f4e9b09441471ab29764768f4e2f064608fd401c79096bb4132e0e27a64b8ea87906107d3908490611434565b60405180910390a25050565b600c5460ff1690565b6060600554600654836004546107fe919061143d565b610808919061143d565b11156108265760405162461bcd60e51b8152600401610409906111d1565b34826003546108359190611475565b11156108535760405162461bcd60e51b815260040161040990611174565b600082118015610864575060058211155b6108805760405162461bcd60e51b81526004016104099061104c565b600c5460ff166108a25760405162461bcd60e51b81526004016104099061128b565b8167ffffffffffffffff8111156108c957634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561090257816020015b6108ef610ec2565b8152602001906001900390816108e75790505b50905060005b82811015610ae35760006040518060400160405280866001600160a01b03168152602001610934610e8b565b90526008805460018101825560009190915281517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee36002909202918201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905560208201517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee490910155835190915081908490849081106109ec57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506004546001610a06919061143d565b600490815560025460208301516040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03909216926340c10f1992610a59928a92909101610fd0565b600060405180830381600087803b158015610a7357600080fd5b505af1158015610a87573d6000803e3d6000fd5b50505050846001600160a01b03167ffe2ff4cf36ff7d2c2b06eb960897ee0d76d9c3e58da12feb7b93e86b226dd3448260200151604051610ac89190611434565b60405180910390a25080610adb816114ab565b915050610908565b50600a546000906001600160a01b031615801590610b0357506000600b54115b15610b6157620f4240600b5434610b1a9190611475565b610b249190611455565b600a546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015610b5f573d6000803e3d6000fd5b505b6000610b6d8234611494565b6001546040519192506201000090046001600160a01b0316906108fc8315029083906000818181858888f19350505050158015610bae573d6000803e3d6000fd5b50505092915050565b3360009081526020819052604090205460ff16151560011480610bd957503033145b610bf55760405162461bcd60e51b81526004016104099061137a565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b6001600160a01b031660009081526020819052604090205460ff1690565b6001546201000090046001600160a01b031690565b600154610100900460ff1680610c65575060015460ff16155b610c815760405162461bcd60e51b8152600401610409906112e8565b600154610100900460ff16158015610cab576001805460ff1961ff00199091166101001716811790555b600254604080517ff3667517000000000000000000000000000000000000000000000000000000008152905130926001600160a01b03169163f3667517916004808301926020929190829003018186803b158015610d0857600080fd5b505afa158015610d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d409190610efc565b6001600160a01b031614610d665760405162461bcd60e51b81526004016104099061122e565b600a805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055600b8290558015610da5576001805461ff00191690555b505050565b3360009081526020819052604090205460ff16151560011480610dcc57503033145b610de85760405162461bcd60e51b81526004016104099061137a565b336000908152602081905260409020805460ff19169055565b600a54600b546001600160a01b0390911691565b6002546001600160a01b031690565b600081600354610e349190611475565b92915050565b3360009081526020819052604090205460ff16151560011480610e5c57503033145b610e785760405162461bcd60e51b81526004016104099061137a565b600c805460ff1916911515919091179055565b60003033600454604051602001610ea493929190610f7b565b6040516020818303038152906040528051906020012060001c905090565b604080518082019091526000808252602082015290565b600060208284031215610eea578081fd5b8135610ef5816114dc565b9392505050565b600060208284031215610f0d578081fd5b8151610ef5816114dc565b60008060408385031215610f2a578081fd5b8235610f35816114dc565b946020939093013593505050565b600060208284031215610f54578081fd5b81358015158114610ef5578182fd5b600060208284031215610f74578081fd5b5035919050565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811682529290931b9091166014830152602882015260480190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b8281101561103457815180516001600160a01b03168552860151868501529284019290850190600101611006565b5091979650505050505050565b901515815260200190565b60208082526021908201527f63616e6e6f74207075726368617365206d6f7265207468616e2035206974656d60408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f7065726d696c6c206d757374206265206265747765656e203020616e6420313060408201527f3030303030000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f70617965652063616e6e6f6f74206265207a65726f2061646472657373000000604082015260600190565b6020808252601e908201527f63616e6e6f74206d696e74206d6f7265207468616e206d6178436f756e740000604082015260600190565b60208082526023908201527f6d757374206174746163682066756e647320746f20707572636861736520697460408201527f656d730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f63616e6e6f74207075726368617365206d6f7265207468616e206d6178436f7560408201527f6e74000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f736f6c64546f6b656e206d75737420626520636f6e74726f6c6c61626c65206260408201527f79207468697320636f6e74726163740000000000000000000000000000000000606082015260800190565b60208082526024908201527f63616e6e6f74206d696e74207768656e20746f6b656e73616c6520697320636c60408201527f6f73656400000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b6020808252818101527f73616c655072696365206d7573742062652067726561746572207468616e2030604082015260600190565b60208082526028908201527f436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f60408201527f6e74726f6c6c6572000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f63616e6e6f74206d696e74206d6f7265207468616e207468652072657365727660408201527f6500000000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60008219821115611450576114506114c6565b500190565b60008261147057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561148f5761148f6114c6565b500290565b6000828210156114a6576114a66114c6565b500390565b60006000198214156114bf576114bf6114c6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146114f157600080fd5b5056fea2646970667358221220a572887c1eb509a39202b922a542028b71124adf0435cd54785b9027fb6f0cce64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "constructor": {
        "params": {
          "_maxCount": "- the max quantity",
          "_salePrice": "- the sale price",
          "_soldToken": "- the erc721 address",
          "_vipReserve": "- the vip reserve to set aside for minting directly"
        }
      },
      "getOpenState()": {
        "returns": {
          "openState": "- the open state of the tokensale"
        }
      },
      "getPayee()": {
        "returns": {
          "_0": "salePrice - the open state of the tokensale"
        }
      },
      "getRevenuePartner()": {
        "returns": {
          "partner": "- the address of the partner. will receive x%% of the revenue",
          "permill": "- permilliage of the revenue to be split. permill = 1 / 1000000"
        }
      },
      "getSalePrice()": {
        "returns": {
          "_0": "salePrice - the open state of the tokensale"
        }
      },
      "getSaleToken()": {
        "returns": {
          "token": "- the address of the sole token"
        }
      },
      "initialize(address,uint256)": {
        "details": "called after constructor once to init stuff"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "mint(address,uint256)": {
        "params": {
          "receiver": "- the address of the account receiving the item",
          "tokenHash": "- token hash to mint to the receiver"
        }
      },
      "minterList()": {
        "returns": {
          "_list": "- total list of purchasers"
        }
      },
      "purchase(address,uint256)": {
        "params": {
          "quantity": "- the quantity to purchase. max 5. ",
          "receiver": "- the address of the account receiving the item"
        }
      },
      "purchaserList()": {
        "returns": {
          "_list": "- total list of purchasers"
        }
      },
      "relinquishControl()": {
        "details": "Remove the sender address from the list of controllers"
      },
      "salePrice(uint256)": {
        "params": {
          "quantity": "- the quantity to purchase. max 5. "
        },
        "returns": {
          "price": "- the sale price for the given quantity"
        }
      },
      "setOpenState(bool)": {
        "params": {
          "openState": "- the open state of the tokensale"
        }
      },
      "setPayee(address)": {
        "params": {
          "_payee": "- the open state of the tokensale"
        }
      },
      "setRevenuePartner(address,uint256)": {
        "params": {
          "partner": "- the address of the partner. will receive x%% of the revenue",
          "permill": "- permilliage of the revenue to be split. min 0 max 1000000"
        }
      },
      "setSalePrice(uint256)": {
        "params": {
          "_salePrice": "- the open state of the tokensale"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Called to purchase some quantity of a token"
      },
      "getOpenState()": {
        "notice": "get the token sale open state"
      },
      "getPayee()": {
        "notice": "get the token sale price"
      },
      "getRevenuePartner()": {
        "notice": "get the revenue partner on this tokensale. we split revenue with the partner"
      },
      "getSalePrice()": {
        "notice": "get the token sale price"
      },
      "getSaleToken()": {
        "notice": "get the address of the sole token"
      },
      "mint(address,uint256)": {
        "notice": "Mint a specific tokenhash to a specific address ( up to har-cap limit) only for controller of token"
      },
      "minterList()": {
        "notice": "get the total list of minters"
      },
      "purchase(address,uint256)": {
        "notice": "Called to purchase some quantity of a token"
      },
      "purchaserList()": {
        "notice": "get the total list of purchasers"
      },
      "salePrice(uint256)": {
        "notice": "returns the sale price in ETH for the given quantity."
      },
      "setOpenState(bool)": {
        "notice": "open / close the tokensale only for controller of token"
      },
      "setPayee(address)": {
        "notice": "set the psale price only for controller of token"
      },
      "setRevenuePartner(address,uint256)": {
        "notice": "set the revenue partner on this tokensale. we split revenue with the partner only for controller of token"
      },
      "setSalePrice(uint256)": {
        "notice": "set the psale price only for controller of token"
      }
    },
    "notice": "tokensale implementation",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2477,
        "contract": "src/TokenSale.sol:TokenSale",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 115,
        "contract": "src/TokenSale.sol:TokenSale",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 118,
        "contract": "src/TokenSale.sol:TokenSale",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3146,
        "contract": "src/TokenSale.sol:TokenSale",
        "label": "payee",
        "offset": 2,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3148,
        "contract": "src/TokenSale.sol:TokenSale",
        "label": "soldToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3150,
        "contract": "src/TokenSale.sol:TokenSale",
        "label": "salePrice_",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3152,
        "contract": "src/TokenSale.sol:TokenSale",
        "label": "issueCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3154,
        "contract": "src/TokenSale.sol:TokenSale",
        "label": "maxCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3156,
        "contract": "src/TokenSale.sol:TokenSale",
        "label": "vipReserve",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3158,
        "contract": "src/TokenSale.sol:TokenSale",
        "label": "vipIssued",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3162,
        "contract": "src/TokenSale.sol:TokenSale",
        "label": "_purchasers",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(TokenMinting)2950_storage)dyn_storage"
      },
      {
        "astId": 3166,
        "contract": "src/TokenSale.sol:TokenSale",
        "label": "_mintees",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(TokenMinting)2950_storage)dyn_storage"
      },
      {
        "astId": 3168,
        "contract": "src/TokenSale.sol:TokenSale",
        "label": "_partner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3170,
        "contract": "src/TokenSale.sol:TokenSale",
        "label": "_permill",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3172,
        "contract": "src/TokenSale.sol:TokenSale",
        "label": "_openState",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(TokenMinting)2950_storage)dyn_storage": {
        "base": "t_struct(TokenMinting)2950_storage",
        "encoding": "dynamic_array",
        "label": "struct ITokenSale.TokenMinting[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(TokenMinting)2950_storage": {
        "encoding": "inplace",
        "label": "struct ITokenSale.TokenMinting",
        "members": [
          {
            "astId": 2947,
            "contract": "src/TokenSale.sol:TokenSale",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2949,
            "contract": "src/TokenSale.sol:TokenSale",
            "label": "tokenHash",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}