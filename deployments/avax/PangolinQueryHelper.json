{
  "address": "0x17406Bf9E49021E438b4DB88DCBdDfFA59ac8146",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COIN",
      "outputs": [
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUJI_PANGOLIN_ROUTER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PANGOLIN_ROUTER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "coinQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethereum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethReserve",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "fac",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPathForCoinToToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "hasPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd848f09464e92ef503289f0e564ad2d6dcbc7792fdaeb2ef5c6df276019aec4f",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x17406Bf9E49021E438b4DB88DCBdDfFA59ac8146",
    "transactionIndex": 0,
    "gasUsed": "724770",
    "logsBloom": "0x
    "blockHash": "0x6842bd2ae22d0a19088ef0f328be2e166ac650295ef493ffee8a0d2f27c0a778",
    "transactionHash": "0xd848f09464e92ef503289f0e564ad2d6dcbc7792fdaeb2ef5c6df276019aec4f",
    "logs": [],
    "blockNumber": 1127807,
    "cumulativeGasUsed": "724770",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e4931953a5bb183a1bede7b42c1c780d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUJI_PANGOLIN_ROUTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANGOLIN_ROUTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"coinQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethereum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fac\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPathForCoinToToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"hasPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Uniswap helpers\",\"kind\":\"dev\",\"methods\":{\"COIN()\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"coinQuote(address,uint256)\":{\"details\":\"Get a quote in Ethereum for the given ERC20 token / token amount\"},\"factory()\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"getPair(address,address)\":{\"details\":\"looks for a pool vs weth\"},\"getPathForCoinToToken(address)\":{\"details\":\"Get a path for ethereum to the given token\"},\"getReserves(address)\":{\"details\":\"Get the pair reserves given two erc20 tokens\"},\"hasPool(address)\":{\"details\":\"does token have a pool\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"pairFor(address,address)\":{\"details\":\"calculate pair address\"},\"relinquishControl()\":{\"details\":\"Check if this address is a controller\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/swap/pangolin/PangolinQueryHelper.sol\":\"PangolinQueryHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@pangolindex/exchange-contracts/contracts/pangolin-core/interfaces/IPangolinFactory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IPangolinFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x2862caf1e97496217c1e5431ae6778d585a9a778d79fb95f3f3e587dd3666290\"},\"@pangolindex/exchange-contracts/contracts/pangolin-core/interfaces/IPangolinPair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IPangolinPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x3e48b36ecfa9cc348ad1a1221eed4b2d0206d521d00d8d3483c2c8c1dfd5341b\"},\"@pangolindex/exchange-contracts/contracts/pangolin-periphery/interfaces/IPangolinRouter.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IPangolinRouter {\\n    function factory() external pure returns (address);\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityAVAX(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountAVAX, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountAVAX);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactAVAXForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactAVAX(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForAVAX(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapAVAXForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountAVAX);\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x666f6558bb574d1df597ebd9b16d86bcf7eea6f89686b49e4993298e8b6ba990\"},\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller) external override onlyController {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address) external view override returns (bool allowed) {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function relinquishControl() external view override onlyController {\\n        _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0x3d92a7bc3f11d16541a85a0af7494d0ed57b34875b6d8567d3771d9e65de2573\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(address indexed contractAddress, address indexed controllerAddress);\\n    event ControllerRemoved(address indexed contractAddress, address indexed controllerAddress);\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2f2d8600b126c9f7e41c2d3f94d9cf833ccd0312b74a9563c769743a192f81ca\",\"license\":\"MIT\"},\"src/interfaces/ISwapQueryHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface ISwapQueryHelper {\\n\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function factory() external pure returns (address);\\n\\n    function COIN() external pure returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function hasPool(address token) external view returns (bool);\\n\\n    function getReserves(\\n        address pair\\n    ) external view returns (uint256, uint256);\\n\\n    function pairFor(\\n        address tokenA,\\n        address tokenB\\n    ) external pure returns (address);\\n\\n    function getPathForCoinToToken(address token) external pure returns (address[] memory);\\n\\n}\\n\",\"keccak256\":\"0x65783cec8fdaa119bb293d14881c0c6a2be3105f69490a6c86f311acaa2dad8b\",\"license\":\"MIT\"},\"src/swap/pangolin/PangolinLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"@pangolindex/exchange-contracts/contracts/pangolin-periphery/interfaces/IPangolinRouter.sol\\\";\\nimport \\\"@pangolindex/exchange-contracts/contracts/pangolin-core/interfaces/IPangolinFactory.sol\\\";\\nimport \\\"@pangolindex/exchange-contracts/contracts/pangolin-core/interfaces/IPangolinPair.sol\\\";\\n\\n/**\\n * @dev Uniswap helpers\\n */\\nlibrary PangolinLib {\\n\\n    address public constant PANGOLIN_ROUTER_ADDRESS = 0xefa94DE7a4656D787667C749f7E1223D71E9FD88;\\n    address public constant FUJI_PANGOLIN_ROUTER_ADDRESS = 0xE4A575550C2b460d2307b82dCd7aFe84AD1484dd;\\n\\n    /**\\n     * @dev Get a quote in Ethereum for the given ERC20 token / token amount\\n     */\\n    function avaxQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256 avalanche,\\n            uint256 tokenReserve,\\n            uint256 avaxReserve\\n        )\\n    {\\n        IPangolinRouter uniswapRouter = IPangolinRouter(PANGOLIN_ROUTER_ADDRESS );\\n        address _factory = uniswapRouter.factory();\\n        address _WAVAX = uniswapRouter.WAVAX();\\n        address _pair = IPangolinFactory(_factory).getPair(token, _WAVAX);\\n        (tokenReserve, avaxReserve, ) = IPangolinPair(_pair).getReserves();\\n        avalanche = quote(tokenAmount, tokenReserve, avaxReserve);\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function factory() external pure returns (address fac) {\\n        fac = IPangolinRouter(PANGOLIN_ROUTER_ADDRESS ).factory();\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function WAVAX() external pure returns (address wavax) {\\n        wavax = IPangolinRouter(PANGOLIN_ROUTER_ADDRESS ).WAVAX();\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function hasPool(address token) external view returns (bool) {\\n        IPangolinRouter uniswapRouter = IPangolinRouter(PANGOLIN_ROUTER_ADDRESS );\\n        address _factory = uniswapRouter.factory();\\n        address _WAVAX = uniswapRouter.WAVAX();\\n        address _pair = IPangolinFactory(_factory).getPair(token, _WAVAX);\\n        return _pair != address(0);\\n    }\\n\\n    /**\\n     * @dev looks for a pool vs wavax\\n     */\\n    function getPair(address _factory, address tokenA, address tokenB) external view returns (address pair) {\\n        require(_factory != address(0), \\\"INVALID_TOKENS\\\");\\n        require(tokenA != address(0) && tokenB != address(0), \\\"INVALID_TOKENS\\\");\\n        pair =\\n            IPangolinFactory(_factory).getPair(\\n                tokenA,\\n                tokenB\\n            );\\n    }\\n\\n    /**\\n     * @dev Get the pair reserves given two erc20 tokens\\n     */\\n    function getReserves(\\n        address pair\\n    ) external view returns (uint256 reserveA, uint256 reserveB) {\\n        (reserveA, reserveB, ) = IPangolinPair(pair).getReserves();\\n    }\\n\\n    /**\\n     * @dev calculate pair address\\n     */\\n    function pairFor(\\n        address _factory,\\n        address tokenA,\\n        address tokenB\\n    ) external pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        _factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"40231f6b438bce0797c9ada29b718a87ea0a5cea3fe9a771abdd76bd41a3e545\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Get a path for avalanche to the given token\\n     */\\n    function getPathForAVAXoToken(address token) external pure returns (address[] memory) {\\n        IPangolinRouter uniswapRouter = IPangolinRouter(PANGOLIN_ROUTER_ADDRESS );\\n        address[] memory path = new address[](2);\\n        path[0] = token;\\n        path[1] = uniswapRouter.WAVAX();\\n        return path;\\n    }\\n\\n    /**\\n     * @dev given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n     */\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"Price: Price\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"Price: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = (amountA * (reserveB)) / reserveA;\\n    }\\n\\n    /**\\n     * @dev returns sorted token addresses, used to handle return values from pairs sorted in this order\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"Price: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Price: ZERO_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0ca6b714bd3b3b01146531c6f767142f787130be887060f8a281ed34cf7e15d0\",\"license\":\"MIT\"},\"src/swap/pangolin/PangolinQueryHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./PangolinLib.sol\\\";\\nimport \\\"../../interfaces/ISwapQueryHelper.sol\\\";\\nimport \\\"../../access/Controllable.sol\\\";\\n\\n/**\\n * @dev Uniswap helpers\\n */\\ncontract PangolinQueryHelper is ISwapQueryHelper, Controllable {\\n\\n    address private _routerAddress;\\n\\n    address public constant PANGOLIN_ROUTER_ADDRESS = 0xefa94DE7a4656D787667C749f7E1223D71E9FD88;\\n    address public constant FUJI_PANGOLIN_ROUTER_ADDRESS = 0xE4A575550C2b460d2307b82dCd7aFe84AD1484dd;\\n\\n    constructor() {\\n        _routerAddress = PANGOLIN_ROUTER_ADDRESS;\\n    }\\n\\n    /**\\n     * @dev Get a quote in Ethereum for the given ERC20 token / token amount\\n     */\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 ethereum,\\n            uint256 tokenReserve,\\n            uint256 ethReserve\\n        )\\n    {\\n       return PangolinLib.avaxQuote(token, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function factory() external pure override returns (address fac) {\\n        fac = PangolinLib.factory();\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function COIN() external pure override returns (address weth) {\\n        weth = PangolinLib.WAVAX();\\n    }\\n\\n    /**\\n     * @dev does token have a pool\\n     */\\n    function hasPool(address token) external view override returns (bool) {\\n        return PangolinLib.hasPool(token);\\n    }\\n\\n    /**\\n     * @dev looks for a pool vs weth\\n     */\\n    function getPair(address tokenA, address tokenB) external view override returns (address pair) {\\n        address _factory = PangolinLib.factory();\\n        pair = PangolinLib.getPair(_factory, tokenA, tokenB);\\n    }\\n\\n    /**\\n     * @dev Get the pair reserves given two erc20 tokens\\n     */\\n    function getReserves(\\n        address pair\\n    ) external view override returns (uint256 reserveA, uint256 reserveB) {\\n        (reserveA, reserveB) = PangolinLib.getReserves(pair);\\n    }\\n\\n    /**\\n     * @dev calculate pair address\\n     */\\n    function pairFor(\\n        address tokenA,\\n        address tokenB\\n    ) external pure override returns (address pair) {\\n        address _factory = PangolinLib.factory();\\n        pair = PangolinLib.pairFor(_factory, tokenA, tokenB);\\n    }\\n\\n    /**\\n     * @dev Get a path for ethereum to the given token\\n     */\\n    function getPathForCoinToToken(address token) external pure override returns (address[] memory) {\\n        return PangolinLib.getPathForAVAXoToken(token);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5b21951e190b86beb8e7bcf7e9e98108d18be40a58d16303b8c1bc8a3b4349a1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600180546001600160a01b03191673efa94de7a4656d787667c749f7e1223d71e9fd88179055610bc9806100466000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806396ed28f91161008c578063b429afeb11610066578063b429afeb14610302578063c45a015514610335578063e1c28bef1461033d578063e6a4390514610345576100df565b806396ed28f91461028a578063a54a72b7146102c5578063a7fc7a07146102cd576100df565b80633ba130d6116100bd5780633ba130d6146101df5780633e99c1e4146101e7578063868d2d1e14610233576100df565b806309666696146100e45780631139cde0146101675780631246dbf514610198575b600080fd5b610117600480360360208110156100fa57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610380565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561015357818101518382015260200161013b565b505050509050019250505060405180910390f35b61016f6104d5565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101cb600480360360208110156101ae57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166104ed565b604080519115158252519081900360200190f35b61016f610586565b61021a600480360360208110156101fd57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661059e565b6040805192835260208301919091528051918290030190f35b61026c6004803603604081101561024957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610642565b60408051938452602084019290925282820152519081900360600190f35b61016f600480360360408110156102a057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166106f9565b61016f610834565b610300600480360360208110156102e357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108ab565b005b6101cb6004803603602081101561031857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610971565b61016f61099c565b6103006109e2565b61016f6004803603604081101561035b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610a64565b60607357cD473bC2d32FcE9e663214929306eB24b8ad0E6326edfd81836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b1580156103e757600080fd5b505af41580156103fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561044257600080fd5b810190808051604051939291908464010000000082111561046257600080fd5b90830190602082018581111561047757600080fd5b825186602082028301116401000000008211171561049457600080fd5b82525081516020918201928201910280838360005b838110156104c15781810151838201526020016104a9565b505050509050016040525050509050919050565b73e4a575550c2b460d2307b82dcd7afe84ad1484dd81565b60007357cD473bC2d32FcE9e663214929306eB24b8ad0E631246dbf5836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561055457600080fd5b505af4158015610568573d6000803e3d6000fd5b505050506040513d602081101561057e57600080fd5b505192915050565b73efa94de7a4656d787667c749f7e1223d71e9fd8881565b6000807357cD473bC2d32FcE9e663214929306eB24b8ad0E633e99c1e4846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b15801561060557600080fd5b505af4158015610619573d6000803e3d6000fd5b505050506040513d604081101561062f57600080fd5b5080516020909101519094909350915050565b60008060007357cD473bC2d32FcE9e663214929306eB24b8ad0E639df2762886866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060606040518083038186803b1580156106b457600080fd5b505af41580156106c8573d6000803e3d6000fd5b505050506040513d60608110156106de57600080fd5b50805160208201516040909201519097919650945092505050565b6000807357cD473bC2d32FcE9e663214929306eB24b8ad0E63c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561074057600080fd5b505af4158015610754573d6000803e3d6000fd5b505050506040513d602081101561076a57600080fd5b5051604080517f6d91c0e200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015280881660248301528616604482015290519192507357cD473bC2d32FcE9e663214929306eB24b8ad0E91636d91c0e291606480820192602092909190829003018186803b15801561080057600080fd5b505af4158015610814573d6000803e3d6000fd5b505050506040513d602081101561082a57600080fd5b5051949350505050565b60007357cD473bC2d32FcE9e663214929306eB24b8ad0E6373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561087a57600080fd5b505af415801561088e573d6000803e3d6000fd5b505050506040513d60208110156108a457600080fd5b5051919050565b3360009081526020819052604090205460ff161515600114806108cd57503033145b610922576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610b6c6028913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff16600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b60007357cD473bC2d32FcE9e663214929306eB24b8ad0E63c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561087a57600080fd5b3360009081526020819052604090205460ff16151560011480610a0457503033145b610a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610b6c6028913960400191505060405180910390fd5b336000908152602052565b6000807357cD473bC2d32FcE9e663214929306eB24b8ad0E63c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610aab57600080fd5b505af4158015610abf573d6000803e3d6000fd5b505050506040513d6020811015610ad557600080fd5b5051604080517f61e0b77f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015280881660248301528616604482015290519192507357cD473bC2d32FcE9e663214929306eB24b8ad0E916361e0b77f91606480820192602092909190829003018186803b15801561080057600080fdfe436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f6e74726f6c6c6572a264697066735822122073c505a5914a5bc4667f43ea7877b45e0c7d218126dcd69a33813c0171207bd864736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c806396ed28f91161008c578063b429afeb11610066578063b429afeb14610302578063c45a015514610335578063e1c28bef1461033d578063e6a4390514610345576100df565b806396ed28f91461028a578063a54a72b7146102c5578063a7fc7a07146102cd576100df565b80633ba130d6116100bd5780633ba130d6146101df5780633e99c1e4146101e7578063868d2d1e14610233576100df565b806309666696146100e45780631139cde0146101675780631246dbf514610198575b600080fd5b610117600480360360208110156100fa57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610380565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561015357818101518382015260200161013b565b505050509050019250505060405180910390f35b61016f6104d5565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101cb600480360360208110156101ae57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166104ed565b604080519115158252519081900360200190f35b61016f610586565b61021a600480360360208110156101fd57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661059e565b6040805192835260208301919091528051918290030190f35b61026c6004803603604081101561024957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610642565b60408051938452602084019290925282820152519081900360600190f35b61016f600480360360408110156102a057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166106f9565b61016f610834565b610300600480360360208110156102e357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108ab565b005b6101cb6004803603602081101561031857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610971565b61016f61099c565b6103006109e2565b61016f6004803603604081101561035b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610a64565b606073__$1e02c994691d2b125c26964ddf99eecd4d$__6326edfd81836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b1580156103e757600080fd5b505af41580156103fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561044257600080fd5b810190808051604051939291908464010000000082111561046257600080fd5b90830190602082018581111561047757600080fd5b825186602082028301116401000000008211171561049457600080fd5b82525081516020918201928201910280838360005b838110156104c15781810151838201526020016104a9565b505050509050016040525050509050919050565b73e4a575550c2b460d2307b82dcd7afe84ad1484dd81565b600073__$1e02c994691d2b125c26964ddf99eecd4d$__631246dbf5836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561055457600080fd5b505af4158015610568573d6000803e3d6000fd5b505050506040513d602081101561057e57600080fd5b505192915050565b73efa94de7a4656d787667c749f7e1223d71e9fd8881565b60008073__$1e02c994691d2b125c26964ddf99eecd4d$__633e99c1e4846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b15801561060557600080fd5b505af4158015610619573d6000803e3d6000fd5b505050506040513d604081101561062f57600080fd5b5080516020909101519094909350915050565b600080600073__$1e02c994691d2b125c26964ddf99eecd4d$__639df2762886866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060606040518083038186803b1580156106b457600080fd5b505af41580156106c8573d6000803e3d6000fd5b505050506040513d60608110156106de57600080fd5b50805160208201516040909201519097919650945092505050565b60008073__$1e02c994691d2b125c26964ddf99eecd4d$__63c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561074057600080fd5b505af4158015610754573d6000803e3d6000fd5b505050506040513d602081101561076a57600080fd5b5051604080517f6d91c0e200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152808816602483015286166044820152905191925073__$1e02c994691d2b125c26964ddf99eecd4d$__91636d91c0e291606480820192602092909190829003018186803b15801561080057600080fd5b505af4158015610814573d6000803e3d6000fd5b505050506040513d602081101561082a57600080fd5b5051949350505050565b600073__$1e02c994691d2b125c26964ddf99eecd4d$__6373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561087a57600080fd5b505af415801561088e573d6000803e3d6000fd5b505050506040513d60208110156108a457600080fd5b5051919050565b3360009081526020819052604090205460ff161515600114806108cd57503033145b610922576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610b6c6028913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff16600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b600073__$1e02c994691d2b125c26964ddf99eecd4d$__63c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561087a57600080fd5b3360009081526020819052604090205460ff16151560011480610a0457503033145b610a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610b6c6028913960400191505060405180910390fd5b336000908152602052565b60008073__$1e02c994691d2b125c26964ddf99eecd4d$__63c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610aab57600080fd5b505af4158015610abf573d6000803e3d6000fd5b505050506040513d6020811015610ad557600080fd5b5051604080517f61e0b77f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152808816602483015286166044820152905191925073__$1e02c994691d2b125c26964ddf99eecd4d$__916361e0b77f91606480820192602092909190829003018186803b15801561080057600080fdfe436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f6e74726f6c6c6572a264697066735822122073c505a5914a5bc4667f43ea7877b45e0c7d218126dcd69a33813c0171207bd864736f6c63430007030033",
  "libraries": {
    "PangolinLib": "0x57cD473bC2d32FcE9e663214929306eB24b8ad0E"
  },
  "devdoc": {
    "details": "Uniswap helpers",
    "kind": "dev",
    "methods": {
      "COIN()": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "coinQuote(address,uint256)": {
        "details": "Get a quote in Ethereum for the given ERC20 token / token amount"
      },
      "factory()": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "getPair(address,address)": {
        "details": "looks for a pool vs weth"
      },
      "getPathForCoinToToken(address)": {
        "details": "Get a path for ethereum to the given token"
      },
      "getReserves(address)": {
        "details": "Get the pair reserves given two erc20 tokens"
      },
      "hasPool(address)": {
        "details": "does token have a pool"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "pairFor(address,address)": {
        "details": "calculate pair address"
      },
      "relinquishControl()": {
        "details": "Check if this address is a controller"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2105,
        "contract": "src/swap/pangolin/PangolinQueryHelper.sol:PangolinQueryHelper",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10818,
        "contract": "src/swap/pangolin/PangolinQueryHelper.sol:PangolinQueryHelper",
        "label": "_routerAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}