{
  "address": "0x57cD473bC2d32FcE9e663214929306eB24b8ad0E",
  "abi": [
    {
      "inputs": [],
      "name": "FUJI_PANGOLIN_ROUTER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PANGOLIN_ROUTER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAX",
      "outputs": [
        {
          "internalType": "address",
          "name": "wavax",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "avaxQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "avalanche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "avaxReserve",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "fac",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPathForAVAXoToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "hasPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b9088dcf634d7535e5409a3fb2f4f29bce0f5b90e278f6e4361a672a291627c",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x57cD473bC2d32FcE9e663214929306eB24b8ad0E",
    "transactionIndex": 1,
    "gasUsed": "928156",
    "logsBloom": "0x
    "blockHash": "0xce6ba62b4db6464f89d990c7529a1b6c135c09d99763eab6a70f064cfaef2275",
    "transactionHash": "0x7b9088dcf634d7535e5409a3fb2f4f29bce0f5b90e278f6e4361a672a291627c",
    "logs": [],
    "blockNumber": 1127696,
    "cumulativeGasUsed": "1057857",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e4931953a5bb183a1bede7b42c1c780d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FUJI_PANGOLIN_ROUTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANGOLIN_ROUTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wavax\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"avaxQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"avalanche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avaxReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fac\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPathForAVAXoToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"hasPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Uniswap helpers\",\"kind\":\"dev\",\"methods\":{\"WAVAX()\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"avaxQuote(address,uint256)\":{\"details\":\"Get a quote in Ethereum for the given ERC20 token / token amount\"},\"factory()\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"getPair(address,address,address)\":{\"details\":\"looks for a pool vs wavax\"},\"getPathForAVAXoToken(address)\":{\"details\":\"Get a path for avalanche to the given token\"},\"getReserves(address)\":{\"details\":\"Get the pair reserves given two erc20 tokens\"},\"hasPool(address)\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"pairFor(address,address,address)\":{\"details\":\"calculate pair address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/swap/pangolin/PangolinLib.sol\":\"PangolinLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@pangolindex/exchange-contracts/contracts/pangolin-core/interfaces/IPangolinFactory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IPangolinFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x2862caf1e97496217c1e5431ae6778d585a9a778d79fb95f3f3e587dd3666290\"},\"@pangolindex/exchange-contracts/contracts/pangolin-core/interfaces/IPangolinPair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IPangolinPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x3e48b36ecfa9cc348ad1a1221eed4b2d0206d521d00d8d3483c2c8c1dfd5341b\"},\"@pangolindex/exchange-contracts/contracts/pangolin-periphery/interfaces/IPangolinRouter.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IPangolinRouter {\\n    function factory() external pure returns (address);\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityAVAX(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountAVAX, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountAVAX);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactAVAXForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactAVAX(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForAVAX(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapAVAXForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountAVAX);\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x666f6558bb574d1df597ebd9b16d86bcf7eea6f89686b49e4993298e8b6ba990\"},\"src/swap/pangolin/PangolinLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"@pangolindex/exchange-contracts/contracts/pangolin-periphery/interfaces/IPangolinRouter.sol\\\";\\nimport \\\"@pangolindex/exchange-contracts/contracts/pangolin-core/interfaces/IPangolinFactory.sol\\\";\\nimport \\\"@pangolindex/exchange-contracts/contracts/pangolin-core/interfaces/IPangolinPair.sol\\\";\\n\\n/**\\n * @dev Uniswap helpers\\n */\\nlibrary PangolinLib {\\n\\n    address public constant PANGOLIN_ROUTER_ADDRESS = 0xefa94DE7a4656D787667C749f7E1223D71E9FD88;\\n    address public constant FUJI_PANGOLIN_ROUTER_ADDRESS = 0xE4A575550C2b460d2307b82dCd7aFe84AD1484dd;\\n\\n    /**\\n     * @dev Get a quote in Ethereum for the given ERC20 token / token amount\\n     */\\n    function avaxQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256 avalanche,\\n            uint256 tokenReserve,\\n            uint256 avaxReserve\\n        )\\n    {\\n        IPangolinRouter uniswapRouter = IPangolinRouter(PANGOLIN_ROUTER_ADDRESS );\\n        address _factory = uniswapRouter.factory();\\n        address _WAVAX = uniswapRouter.WAVAX();\\n        address _pair = IPangolinFactory(_factory).getPair(token, _WAVAX);\\n        (tokenReserve, avaxReserve, ) = IPangolinPair(_pair).getReserves();\\n        avalanche = quote(tokenAmount, tokenReserve, avaxReserve);\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function factory() external pure returns (address fac) {\\n        fac = IPangolinRouter(PANGOLIN_ROUTER_ADDRESS ).factory();\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function WAVAX() external pure returns (address wavax) {\\n        wavax = IPangolinRouter(PANGOLIN_ROUTER_ADDRESS ).WAVAX();\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function hasPool(address token) external view returns (bool) {\\n        IPangolinRouter uniswapRouter = IPangolinRouter(PANGOLIN_ROUTER_ADDRESS );\\n        address _factory = uniswapRouter.factory();\\n        address _WAVAX = uniswapRouter.WAVAX();\\n        address _pair = IPangolinFactory(_factory).getPair(token, _WAVAX);\\n        return _pair != address(0);\\n    }\\n\\n    /**\\n     * @dev looks for a pool vs wavax\\n     */\\n    function getPair(address _factory, address tokenA, address tokenB) external view returns (address pair) {\\n        require(_factory != address(0), \\\"INVALID_TOKENS\\\");\\n        require(tokenA != address(0) && tokenB != address(0), \\\"INVALID_TOKENS\\\");\\n        pair =\\n            IPangolinFactory(_factory).getPair(\\n                tokenA,\\n                tokenB\\n            );\\n    }\\n\\n    /**\\n     * @dev Get the pair reserves given two erc20 tokens\\n     */\\n    function getReserves(\\n        address pair\\n    ) external view returns (uint256 reserveA, uint256 reserveB) {\\n        (reserveA, reserveB, ) = IPangolinPair(pair).getReserves();\\n    }\\n\\n    /**\\n     * @dev calculate pair address\\n     */\\n    function pairFor(\\n        address _factory,\\n        address tokenA,\\n        address tokenB\\n    ) external pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        _factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"40231f6b438bce0797c9ada29b718a87ea0a5cea3fe9a771abdd76bd41a3e545\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Get a path for avalanche to the given token\\n     */\\n    function getPathForAVAXoToken(address token) external pure returns (address[] memory) {\\n        IPangolinRouter uniswapRouter = IPangolinRouter(PANGOLIN_ROUTER_ADDRESS );\\n        address[] memory path = new address[](2);\\n        path[0] = token;\\n        path[1] = uniswapRouter.WAVAX();\\n        return path;\\n    }\\n\\n    /**\\n     * @dev given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n     */\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"Price: Price\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"Price: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = (amountA * (reserveB)) / reserveA;\\n    }\\n\\n    /**\\n     * @dev returns sorted token addresses, used to handle return values from pairs sorted in this order\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"Price: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Price: ZERO_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0ca6b714bd3b3b01146531c6f767142f787130be887060f8a281ed34cf7e15d0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610feb610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100c85760003560e01c806361e0b77f1161008057806373b295c21161006557806373b295c2146102a65780639df27628146102ae578063c45a015514610305576100c8565b806361e0b77f1461021c5780636d91c0e214610261576100c8565b806326edfd81116100b157806326edfd81146101455780633ba130d6146101c85780633e99c1e4146101d0576100c8565b80631139cde0146100cd5780631246dbf5146100fe575b600080fd5b6100d561030d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101316004803603602081101561011457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610325565b604080519115158252519081900360200190f35b6101786004803603602081101561015b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610517565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101b457818101518382015260200161019c565b505050509050019250505060405180910390f35b6100d5610648565b610203600480360360208110156101e657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610660565b6040805192835260208301919091528051918290030190f35b6100d56004803603606081101561023257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166106f8565b6100d56004803603606081101561027757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166108da565b6100d56109c5565b6102e7600480360360408110156102c457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610a52565b60408051938452602084019290925282820152519081900360600190f35b6100d5610cf1565b73e4a575550c2b460d2307b82dcd7afe84ad1484dd81565b60008073efa94de7a4656d787667c749f7e1223d71e9fd88905060008173ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561038757600080fd5b505afa15801561039b573d6000803e3d6000fd5b505050506040513d60208110156103b157600080fd5b5051604080517f73b295c2000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916373b295c2916004808301926020929190829003018186803b15801561041f57600080fd5b505afa158015610433573d6000803e3d6000fd5b505050506040513d602081101561044957600080fd5b5051604080517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152808416602483015291519293506000929185169163e6a4390591604480820192602092909190829003018186803b1580156104c957600080fd5b505afa1580156104dd573d6000803e3d6000fd5b505050506040513d60208110156104f357600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1615159695505050505050565b604080516002808252606082810190935273efa94de7a4656d787667c749f7e1223d71e9fd88918391816020016020820280368337019050509050838160008151811061056057fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b1580156105e057600080fd5b505afa1580156105f4573d6000803e3d6000fd5b505050506040513d602081101561060a57600080fd5b505181518290600190811061061b57fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152915050919050565b73efa94de7a4656d787667c749f7e1223d71e9fd8881565b6000808273ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156106a957600080fd5b505afa1580156106bd573d6000803e3d6000fd5b505050506040513d60608110156106d357600080fd5b5080516020909101516dffffffffffffffffffffffffffff9182169591169350915050565b600073ffffffffffffffffffffffffffffffffffffffff841661077c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f544f4b454e53000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8316158015906107b6575073ffffffffffffffffffffffffffffffffffffffff821615155b61082157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f544f4b454e53000000000000000000000000000000000000604482015290519081900360640190fd5b8373ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156108a657600080fd5b505afa1580156108ba573d6000803e3d6000fd5b505050506040513d60208110156108d057600080fd5b5051949350505050565b60008060006108e98585610d4d565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527f40231f6b438bce0797c9ada29b718a87ea0a5cea3fe9a771abdd76bd41a3e545609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b600073efa94de7a4656d787667c749f7e1223d71e9fd8873ffffffffffffffffffffffffffffffffffffffff166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2157600080fd5b505afa158015610a35573d6000803e3d6000fd5b505050506040513d6020811015610a4b57600080fd5b5051919050565b60008060008073efa94de7a4656d787667c749f7e1223d71e9fd88905060008173ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610ab757600080fd5b505afa158015610acb573d6000803e3d6000fd5b505050506040513d6020811015610ae157600080fd5b5051604080517f73b295c2000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916373b295c2916004808301926020929190829003018186803b158015610b4f57600080fd5b505afa158015610b63573d6000803e3d6000fd5b505050506040513d6020811015610b7957600080fd5b5051604080517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152808416602483015291519293506000929185169163e6a4390591604480820192602092909190829003018186803b158015610bf957600080fd5b505afa158015610c0d573d6000803e3d6000fd5b505050506040513d6020811015610c2357600080fd5b5051604080517f0902f1ac000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff831691630902f1ac91600480820192606092909190829003018186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d6060811015610cb957600080fd5b5080516020909101516dffffffffffffffffffffffffffff9182169750169450610ce4888787610eb6565b9650505050509250925092565b600073efa94de7a4656d787667c749f7e1223d71e9fd8873ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2157600080fd5b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610deb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f50726963653a204944454e544943414c5f414444524553534553000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610e25578284610e28565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216610eaf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f50726963653a205a45524f5f4144445245535300000000000000000000000000604482015290519081900360640190fd5b9250929050565b6000808411610f2657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f50726963653a2050726963650000000000000000000000000000000000000000604482015290519081900360640190fd5b600083118015610f365750600082115b610fa157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f50726963653a20494e53554646494349454e545f4c4951554944495459000000604482015290519081900360640190fd5b8282850281610fac57fe5b0494935050505056fea26469706673582212206443b02ae399d3edccc48e576e7d0d3584232b7055fdb5eb3e4c764ade2c856064736f6c63430007030033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100c85760003560e01c806361e0b77f1161008057806373b295c21161006557806373b295c2146102a65780639df27628146102ae578063c45a015514610305576100c8565b806361e0b77f1461021c5780636d91c0e214610261576100c8565b806326edfd81116100b157806326edfd81146101455780633ba130d6146101c85780633e99c1e4146101d0576100c8565b80631139cde0146100cd5780631246dbf5146100fe575b600080fd5b6100d561030d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101316004803603602081101561011457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610325565b604080519115158252519081900360200190f35b6101786004803603602081101561015b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610517565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101b457818101518382015260200161019c565b505050509050019250505060405180910390f35b6100d5610648565b610203600480360360208110156101e657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610660565b6040805192835260208301919091528051918290030190f35b6100d56004803603606081101561023257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166106f8565b6100d56004803603606081101561027757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166108da565b6100d56109c5565b6102e7600480360360408110156102c457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610a52565b60408051938452602084019290925282820152519081900360600190f35b6100d5610cf1565b73e4a575550c2b460d2307b82dcd7afe84ad1484dd81565b60008073efa94de7a4656d787667c749f7e1223d71e9fd88905060008173ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561038757600080fd5b505afa15801561039b573d6000803e3d6000fd5b505050506040513d60208110156103b157600080fd5b5051604080517f73b295c2000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916373b295c2916004808301926020929190829003018186803b15801561041f57600080fd5b505afa158015610433573d6000803e3d6000fd5b505050506040513d602081101561044957600080fd5b5051604080517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152808416602483015291519293506000929185169163e6a4390591604480820192602092909190829003018186803b1580156104c957600080fd5b505afa1580156104dd573d6000803e3d6000fd5b505050506040513d60208110156104f357600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1615159695505050505050565b604080516002808252606082810190935273efa94de7a4656d787667c749f7e1223d71e9fd88918391816020016020820280368337019050509050838160008151811061056057fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b1580156105e057600080fd5b505afa1580156105f4573d6000803e3d6000fd5b505050506040513d602081101561060a57600080fd5b505181518290600190811061061b57fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152915050919050565b73efa94de7a4656d787667c749f7e1223d71e9fd8881565b6000808273ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156106a957600080fd5b505afa1580156106bd573d6000803e3d6000fd5b505050506040513d60608110156106d357600080fd5b5080516020909101516dffffffffffffffffffffffffffff9182169591169350915050565b600073ffffffffffffffffffffffffffffffffffffffff841661077c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f544f4b454e53000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8316158015906107b6575073ffffffffffffffffffffffffffffffffffffffff821615155b61082157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f544f4b454e53000000000000000000000000000000000000604482015290519081900360640190fd5b8373ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156108a657600080fd5b505afa1580156108ba573d6000803e3d6000fd5b505050506040513d60208110156108d057600080fd5b5051949350505050565b60008060006108e98585610d4d565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527f40231f6b438bce0797c9ada29b718a87ea0a5cea3fe9a771abdd76bd41a3e545609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b600073efa94de7a4656d787667c749f7e1223d71e9fd8873ffffffffffffffffffffffffffffffffffffffff166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2157600080fd5b505afa158015610a35573d6000803e3d6000fd5b505050506040513d6020811015610a4b57600080fd5b5051919050565b60008060008073efa94de7a4656d787667c749f7e1223d71e9fd88905060008173ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610ab757600080fd5b505afa158015610acb573d6000803e3d6000fd5b505050506040513d6020811015610ae157600080fd5b5051604080517f73b295c2000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916373b295c2916004808301926020929190829003018186803b158015610b4f57600080fd5b505afa158015610b63573d6000803e3d6000fd5b505050506040513d6020811015610b7957600080fd5b5051604080517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152808416602483015291519293506000929185169163e6a4390591604480820192602092909190829003018186803b158015610bf957600080fd5b505afa158015610c0d573d6000803e3d6000fd5b505050506040513d6020811015610c2357600080fd5b5051604080517f0902f1ac000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff831691630902f1ac91600480820192606092909190829003018186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d6060811015610cb957600080fd5b5080516020909101516dffffffffffffffffffffffffffff9182169750169450610ce4888787610eb6565b9650505050509250925092565b600073efa94de7a4656d787667c749f7e1223d71e9fd8873ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2157600080fd5b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610deb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f50726963653a204944454e544943414c5f414444524553534553000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610e25578284610e28565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216610eaf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f50726963653a205a45524f5f4144445245535300000000000000000000000000604482015290519081900360640190fd5b9250929050565b6000808411610f2657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f50726963653a2050726963650000000000000000000000000000000000000000604482015290519081900360640190fd5b600083118015610f365750600082115b610fa157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f50726963653a20494e53554646494349454e545f4c4951554944495459000000604482015290519081900360640190fd5b8282850281610fac57fe5b0494935050505056fea26469706673582212206443b02ae399d3edccc48e576e7d0d3584232b7055fdb5eb3e4c764ade2c856064736f6c63430007030033",
  "devdoc": {
    "details": "Uniswap helpers",
    "kind": "dev",
    "methods": {
      "WAVAX()": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "avaxQuote(address,uint256)": {
        "details": "Get a quote in Ethereum for the given ERC20 token / token amount"
      },
      "factory()": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "getPair(address,address,address)": {
        "details": "looks for a pool vs wavax"
      },
      "getPathForAVAXoToken(address)": {
        "details": "Get a path for avalanche to the given token"
      },
      "getReserves(address)": {
        "details": "Get the pair reserves given two erc20 tokens"
      },
      "hasPool(address)": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "pairFor(address,address,address)": {
        "details": "calculate pair address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}