{
  "address": "0x0ffF9eF5C4E96d2324cb06775E67734C19db283c",
  "abi": [
    {
      "inputs": [],
      "name": "COIN",
      "outputs": [
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "coinQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethereum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethReserve",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "fac",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPathForCoinToToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5532680aafe656fdc1184cfc0f4be6eac43b0afa01e852060b4d18c1c68f0a06",
  "receipt": {
    "to": null,
    "from": "0xE5E82ae456c04Ad0879785B4f678A4Fcace12AAf",
    "contractAddress": "0x0ffF9eF5C4E96d2324cb06775E67734C19db283c",
    "transactionIndex": 0,
    "gasUsed": "264674",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x00000c4400000d7a5f1d3ab88ce4c77f06102966a94bdcc5192f56ae77e71845",
    "transactionHash": "0x5532680aafe656fdc1184cfc0f4be6eac43b0afa01e852060b4d18c1c68f0a06",
    "logs": [],
    "blockNumber": 984023,
    "cumulativeGasUsed": "264674",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8ba6fa334a632d496dbf0810657475cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"COIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"coinQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethereum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fac\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPathForCoinToToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Mock helper for local network\",\"kind\":\"dev\",\"methods\":{\"COIN()\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"coinQuote(address,uint256)\":{\"details\":\"Get a quote in Ethereum for the given ERC20 token / token amount\"},\"factory()\":{\"details\":\"does a Uniswap pool exist for this token?\"},\"getPair(address,address)\":{\"details\":\"looks for a pool vs weth\"},\"getPathForCoinToToken(address)\":{\"details\":\"Get a path for ethereum to the given token\"},\"getReserves(address)\":{\"details\":\"Get the pair reserves given two erc20 tokens\"},\"hasPool(address)\":{\"details\":\"does token have a pool\"},\"setFactory(address)\":{\"details\":\"set factory\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/swap/mock/MockQueryHelper.sol\":\"MockQueryHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/interfaces/ISwapQueryHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ISwapQueryHelper {\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function factory() external view returns (address);\\n\\n    function COIN() external pure returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function hasPool(address token) external view returns (bool);\\n\\n    function getReserves(address pair) external view returns (uint256, uint256);\\n\\n    function getPathForCoinToToken(address token)\\n        external\\n        pure\\n        returns (address[] memory);\\n\\n    function setFactory(address f) external;\\n}\\n\",\"keccak256\":\"0x9b85b7f774e809680b6e5fd76ccdc1668139a2f9ef928a05f5ce7c79f0f6783f\",\"license\":\"MIT\"},\"src/swap/mock/MockQueryHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../interfaces/ISwapQueryHelper.sol\\\";\\n\\n/**\\n * @dev Mock helper for local network\\n */\\ncontract MockQueryHelper is ISwapQueryHelper {\\n    /**\\n     * @dev Get a quote in Ethereum for the given ERC20 token / token amount\\n     */\\n    function coinQuote(address, uint256 tokenAmount)\\n        external\\n        pure\\n        override\\n        returns (\\n            uint256 ethereum,\\n            uint256 tokenReserve,\\n            uint256 ethReserve\\n        )\\n    {\\n        return (tokenAmount / (10), tokenAmount * (200), tokenAmount * (20));\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function factory() external pure override returns (address fac) {\\n        fac = address(0);\\n    }\\n\\n    /**\\n     * @dev does a Uniswap pool exist for this token?\\n     */\\n    function COIN() external pure override returns (address weth) {\\n        weth = address(99);\\n    }\\n\\n    /**\\n     * @dev looks for a pool vs weth\\n     */\\n    function getPair(address, address)\\n        external\\n        pure\\n        override\\n        returns (address pair)\\n    {\\n        pair = address(0);\\n    }\\n\\n    /**\\n     * @dev Get the pair reserves given two erc20 tokens\\n     */\\n    function getReserves(address)\\n        external\\n        pure\\n        override\\n        returns (uint256 reserveA, uint256 reserveB)\\n    {\\n        (reserveA, reserveB) = (0, 0);\\n    }\\n\\n    /**\\n     * @dev does token have a pool\\n     */\\n    function hasPool(address) external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Get a path for ethereum to the given token\\n     */\\n    function getPathForCoinToToken(address)\\n        external\\n        pure\\n        override\\n        returns (address[] memory)\\n    {\\n        address[] memory _mock;\\n        return _mock;\\n    }\\n\\n    /**\\n     * @dev set factory\\n     */\\n    function setFactory(address) external override {}\\n}\\n\",\"keccak256\":\"0x938bca080aa44922973ece7fd5abe2a4cb5884fb395155c6246e8ed3d6dca809\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506103d6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063868d2d1e1161005b578063868d2d1e1461010c578063a54a72b71461012e578063c45a015514610143578063e6a439051461014b57610088565b8063096666961461008d5780631246dbf5146100b65780633e99c1e4146100d65780635bb47808146100f7575b600080fd5b6100a061009b3660046101df565b61015e565b6040516100ad919061027c565b60405180910390f35b6100c96100c43660046101df565b610166565b6040516100ad91906102d6565b6100e96100e43660046101df565b61016c565b6040516100ad9291906102e1565b61010a6101053660046101df565b610174565b005b61011f61011a366004610232565b610177565b6040516100ad939291906102ef565b6101366101a9565b6040516100ad919061025b565b6101366101ae565b610136610159366004610200565b6101b3565b60605b919050565b50600190565b506000908190565b50565b60008080610186600a85610305565b6101918560c861033e565b61019c86601461033e565b9250925092509250925092565b606390565b600090565b600092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461016157600080fd5b6000602082840312156101f0578081fd5b6101f9826101bb565b9392505050565b60008060408385031215610212578081fd5b61021b836101bb565b9150610229602084016101bb565b90509250929050565b60008060408385031215610244578182fd5b61024d836101bb565b946020939093013593505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156102ca57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610298565b50909695505050505050565b901515815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b600082610339577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561039b577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b50029056fea26469706673582212201bdc740a444f726697d05d47f997bb68c3287d9c9fdc2d5d5c8f2f251d5ea5de64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063868d2d1e1161005b578063868d2d1e1461010c578063a54a72b71461012e578063c45a015514610143578063e6a439051461014b57610088565b8063096666961461008d5780631246dbf5146100b65780633e99c1e4146100d65780635bb47808146100f7575b600080fd5b6100a061009b3660046101df565b61015e565b6040516100ad919061027c565b60405180910390f35b6100c96100c43660046101df565b610166565b6040516100ad91906102d6565b6100e96100e43660046101df565b61016c565b6040516100ad9291906102e1565b61010a6101053660046101df565b610174565b005b61011f61011a366004610232565b610177565b6040516100ad939291906102ef565b6101366101a9565b6040516100ad919061025b565b6101366101ae565b610136610159366004610200565b6101b3565b60605b919050565b50600190565b506000908190565b50565b60008080610186600a85610305565b6101918560c861033e565b61019c86601461033e565b9250925092509250925092565b606390565b600090565b600092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461016157600080fd5b6000602082840312156101f0578081fd5b6101f9826101bb565b9392505050565b60008060408385031215610212578081fd5b61021b836101bb565b9150610229602084016101bb565b90509250929050565b60008060408385031215610244578182fd5b61024d836101bb565b946020939093013593505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156102ca57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610298565b50909695505050505050565b901515815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b600082610339577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561039b577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b50029056fea26469706673582212201bdc740a444f726697d05d47f997bb68c3287d9c9fdc2d5d5c8f2f251d5ea5de64736f6c63430008000033",
  "libraries": {
    "Strings": "0x1B8891353b1A54B478dFdD8060b0cf94a2cBAB05",
    "AddressSet": "0x67Dd4EE3e8E52c2938Ff45AF2e050954c860d24E",
    "UInt256Set": "0x93Ab80e063b38A95340C1A77905498453182d46b",
    "Create2": "0x9cF534EC3A43b86fced3f58239572E970778f99d",
    "WrappedTokenLib": "0xa64C55472a6846DBeE76fD9e9A7700B3af73b702",
    "ComplexPoolLib": "0x88e1b252F7873Da663713f1784C1283feFf2f880"
  },
  "devdoc": {
    "details": "Mock helper for local network",
    "kind": "dev",
    "methods": {
      "COIN()": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "coinQuote(address,uint256)": {
        "details": "Get a quote in Ethereum for the given ERC20 token / token amount"
      },
      "factory()": {
        "details": "does a Uniswap pool exist for this token?"
      },
      "getPair(address,address)": {
        "details": "looks for a pool vs weth"
      },
      "getPathForCoinToToken(address)": {
        "details": "Get a path for ethereum to the given token"
      },
      "getReserves(address)": {
        "details": "Get the pair reserves given two erc20 tokens"
      },
      "hasPool(address)": {
        "details": "does token have a pool"
      },
      "setFactory(address)": {
        "details": "set factory"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}