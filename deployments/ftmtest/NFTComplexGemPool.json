{
  "address": "0xd3C50f3c8Dd1bDe401937E1783603f1Fc4077bA3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        }
      ],
      "name": "NFTGemClaimCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAssessed",
          "type": "uint256"
        }
      ],
      "name": "NFTGemClaimRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gemHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "NFTGemCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conversionRate",
          "type": "uint256"
        }
      ],
      "name": "NFTGemERC20ClaimCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAssessed",
          "type": "uint256"
        }
      ],
      "name": "NFTGemERC20ClaimRedeemed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addAllowedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "inputType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "burn",
          "type": "bool"
        }
      ],
      "name": "addInputRequirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ndx",
          "type": "uint256"
        }
      ],
      "name": "allTokenHashes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allTokenHashesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "allowedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowedTokensLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "category",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "c",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        }
      ],
      "name": "claimAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        }
      ],
      "name": "claimQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        }
      ],
      "name": "claimTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        }
      ],
      "name": "claimUnlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        }
      ],
      "name": "collectClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeframe",
          "type": "uint256"
        }
      ],
      "name": "createClaim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeframe",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "createClaims",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "createERC20Claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "createERC20Claims",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "difficultyStep",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "__symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "__name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "__ethPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__minTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__maxTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__diffstep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__maxClaims",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "__allowedToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isTokenAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "mintGenesisGems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextClaimHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextClaimId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextGemHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextGemId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeAllowedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "rescue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "category",
          "type": "uint256"
        }
      ],
      "name": "setCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setFeeTracker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setMultiToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "helper",
          "type": "address"
        }
      ],
      "name": "setSwapHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "v",
          "type": "bool"
        }
      ],
      "name": "setValidateErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "visible",
          "type": "bool"
        }
      ],
      "name": "setVisible",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimHash",
          "type": "uint256"
        }
      ],
      "name": "stakedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenHash",
          "type": "uint256"
        }
      ],
      "name": "tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenHash",
          "type": "uint256"
        }
      ],
      "name": "tokenType",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validateErc20",
      "outputs": [
        {
          "internalType": "bool",
          "name": "c",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "visible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "v",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x738597eb235cde6ee2de410db0921e91c2f260779544d10c63a5defd7bb44528",
  "receipt": {
    "to": null,
    "from": "0x80EBffD553601340B688f246FD20a57BAab17AaD",
    "contractAddress": "0xd3C50f3c8Dd1bDe401937E1783603f1Fc4077bA3",
    "transactionIndex": 0,
    "gasUsed": "3283276",
    "logsBloom": "0x
    "blockHash": "0x00000a7b00004b8e990cdbb33da6915f4bcef188b9e309b7df2d27e58a366d4a",
    "transactionHash": "0x738597eb235cde6ee2de410db0921e91c2f260779544d10c63a5defd7bb44528",
    "logs": [],
    "blockNumber": 649627,
    "cumulativeGasUsed": "3283276",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9c7c61ecacfee4aadd8309054369412c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"NFTGemClaimCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAssessed\",\"type\":\"uint256\"}],\"name\":\"NFTGemClaimRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gemHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"NFTGemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"name\":\"NFTGemERC20ClaimCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAssessed\",\"type\":\"uint256\"}],\"name\":\"NFTGemERC20ClaimRedeemed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"inputType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burn\",\"type\":\"bool\"}],\"name\":\"addInputRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ndx\",\"type\":\"uint256\"}],\"name\":\"allTokenHashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTokenHashesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"category\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"}],\"name\":\"claimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"}],\"name\":\"claimQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"}],\"name\":\"claimTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"}],\"name\":\"claimUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"}],\"name\":\"collectClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeframe\",\"type\":\"uint256\"}],\"name\":\"createClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeframe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"createClaims\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"createERC20Claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"createERC20Claims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"difficultyStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"__ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__minTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__diffstep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxClaims\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"__allowedToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"mintGenesisGems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextClaimHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextClaimId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextGemHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextGemId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"}],\"name\":\"setCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFeeTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setMultiToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"}],\"name\":\"setSwapHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"name\":\"setValidateErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"visible\",\"type\":\"bool\"}],\"name\":\"setVisible\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimHash\",\"type\":\"uint256\"}],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenHash\",\"type\":\"uint256\"}],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenHash\",\"type\":\"uint256\"}],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validateErc20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"c\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"visible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAllowedToken(address)\":{\"details\":\"the external version of the above\"},\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"addInputRequirement(address,address,uint8,uint256,uint256,bool)\":{\"details\":\"add an input requirement for this token\"},\"allTokenHashes(uint256)\":{\"details\":\"get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\"},\"allTokenHashesLength()\":{\"details\":\"get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\"},\"allowedTokens(uint256)\":{\"details\":\"the external version of the above\"},\"allowedTokensLength()\":{\"details\":\"the external version of the above\"},\"category()\":{\"details\":\"set market category\"},\"claimAmount(uint256)\":{\"details\":\"the claim amount for the given claim id\"},\"claimQuantity(uint256)\":{\"details\":\"the claim quantity (count of gems staked) for the given claim id\"},\"claimTokenAmount(uint256)\":{\"details\":\"claim token amount if paid using erc20\"},\"claimUnlockTime(uint256)\":{\"details\":\"the lock time for this claim. once past lock time a gema is minted\"},\"claimedCount()\":{\"details\":\"number of claims made thus far\"},\"collectClaim(uint256)\":{\"details\":\"collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)\"},\"createClaim(uint256)\":{\"details\":\"the external version of the above\"},\"createClaims(uint256,uint256)\":{\"details\":\"the external version of the above\"},\"createERC20Claim(address,uint256)\":{\"details\":\"create a claim using a erc20 token\"},\"createERC20Claims(address,uint256,uint256)\":{\"details\":\"create a claim using a erc20 token\"},\"difficultyStep()\":{\"details\":\"difficulty step increase for this pool.\"},\"ethPrice()\":{\"details\":\"The ether price for this pool / NFT\"},\"initialize(string,string,uint256,uint256,uint256,uint256,uint256,address)\":{\"details\":\"initializer called when contract is deployed\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"isTokenAllowed(address)\":{\"details\":\"the external version of the above\"},\"maxClaims()\":{\"details\":\"max claims that can be made on this NFT\"},\"maxTime()\":{\"details\":\"max time to stake in this pool to earn an NFT\"},\"minTime()\":{\"details\":\"min time to stake in this pool to earn an NFT\"},\"mintGenesisGems(address,address)\":{\"details\":\"mint the genesis gems earned by the pools creator and funder\"},\"mintedCount()\":{\"details\":\"the number of gems minted in this\"},\"name()\":{\"details\":\"The name for this pool / NFT\"},\"nextClaimHash()\":{\"details\":\"the external version of the above\"},\"nextClaimId()\":{\"details\":\"the external version of the above\"},\"nextGemHash()\":{\"details\":\"the external version of the above\"},\"nextGemId()\":{\"details\":\"the external version of the above\"},\"relinquishControl()\":{\"details\":\"Check if this address is a controller\"},\"removeAllowedToken(address)\":{\"details\":\"the external version of the above\"},\"rescue(address,uint256)\":{\"details\":\"rescue funds\"},\"setCategory(uint256)\":{\"details\":\"set category category\"},\"setFeeTracker(address)\":{\"details\":\"set the governor. pool uses the governor to issue gov token issuance requests\"},\"setGovernor(address)\":{\"details\":\"set the governor. pool uses the governor to issue gov token issuance requests\"},\"setMultiToken(address)\":{\"details\":\"set the multitoken that this pool will mint new tokens on. Must be a controller of the multitoken\"},\"setSwapHelper(address)\":{\"details\":\"set the multitoken that this pool will mint new tokens on. Must be a controller of the multitoken\"},\"setValidateErc20(bool)\":{\"details\":\"set category category\"},\"setVisible(bool)\":{\"details\":\"set market visibility\"},\"stakedToken(uint256)\":{\"details\":\"the staked token if staking with erc20\"},\"symbol()\":{\"details\":\"The symbol for this pool / NFT\"},\"tokenId(uint256)\":{\"details\":\"get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\"},\"tokenType(uint256)\":{\"details\":\"get token type of hash - 1 is for claim, 2 is for gem\"},\"totalStakedEth()\":{\"details\":\"the number of gems minted in this\"},\"validateErc20()\":{\"details\":\"set market category\"},\"visible()\":{\"details\":\"set market visibility\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/pool/NFTComplexGemPool.sol\":\"NFTComplexGemPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"src/access/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) internal _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller) external override onlyController {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address) external view override returns (bool allowed) {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function relinquishControl() external view override onlyController {\\n        _controllers[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0xd775053cec953f14832c8145de2f04f2259110a29accbc924f5dfe71ea85b095\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(address indexed contractAddress, address indexed controllerAddress);\\n    event ControllerRemoved(address indexed contractAddress, address indexed controllerAddress);\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\",\"keccak256\":\"0x2f2d8600b126c9f7e41c2d3f94d9cf833ccd0312b74a9563c769743a192f81ca\",\"license\":\"MIT\"},\"src/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6e86542ba9c42a9ad56d81283264fd072ad07d7789113fd3482fe748a22428d6\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xacc13c3e2db32f3fbd54b5fe811690085679d84ca9c8a9b81374d811b30758b0\",\"license\":\"MIT\"},\"src/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6be5c98231ba90ad43bcf7dad027c1a1e7787220565aa3bb24becace05825664\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./INFTGemPool.sol\\\";\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTComplexGemPool is INFTGemPool {\\n\\n}\\n\",\"keccak256\":\"0x32e2b9a78a52fbc3fc22250759ea9834574f264b9046c80dcc69be00a2ceaabe\",\"license\":\"MIT\"},\"src/interfaces/INFTComplexGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"./INFTGemPoolData.sol\\\";\\n\\ninterface INFTComplexGemPoolData is INFTGemPoolData {\\n    function addInputRequirement(\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tokenId,\\n        uint256 minAmount,\\n        bool burn\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f6082f4eb7f9e38c5f27784f20cd3777aa218a62985af5840dcbe4a653c2082\",\"license\":\"MIT\"},\"src/interfaces/INFTGemFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTGemFeeManager {\\n\\n    event DefaultFeeDivisorChanged(address indexed operator, uint256 oldValue, uint256 value);\\n    event FeeDivisorChanged(address indexed operator, address indexed token, uint256 oldValue, uint256 value);\\n    event ETHReceived(address indexed manager, address sender, uint256 value);\\n    event LiquidityChanged(address indexed manager, uint256 oldValue, uint256 value);\\n\\n    function liquidity(address token) external view returns (uint256);\\n\\n    function defaultLiquidity() external view returns (uint256);\\n\\n    function setDefaultLiquidity(uint256 _liquidityMult) external returns (uint256);\\n\\n    function feeDivisor(address token) external view returns (uint256);\\n\\n    function defaultFeeDivisor() external view returns (uint256);\\n\\n    function setFeeDivisor(address token, uint256 _feeDivisor) external returns (uint256);\\n\\n    function setDefaultFeeDivisor(uint256 _feeDivisor) external returns (uint256);\\n\\n    function ethBalanceOf() external view returns (uint256);\\n\\n    function balanceOF(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0xc1beb3a7410a4a0f6f8c47a8901fe81207199ff243704e79e2be60d5ed1bd305\",\"license\":\"MIT\"},\"src/interfaces/INFTGemGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemGovernor {\\n    event GovernanceTokenIssued(address indexed receiver, uint256 amount);\\n    event FeeUpdated(address indexed proposal, address indexed token, uint256 newFee);\\n    event AllowList(address indexed proposal, address indexed token, bool isBanned);\\n    event ProjectFunded(address indexed proposal, address indexed receiver, uint256 received);\\n    event StakingPoolCreated(\\n        address indexed proposal,\\n        address indexed pool,\\n        string symbol,\\n        string name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffStep,\\n        uint256 maxClaims,\\n        address alllowedToken\\n    );\\n\\n    function initialize(\\n        address _multitoken,\\n        address _factory,\\n        address _feeTracker,\\n        address _proposalFactory,\\n        address _swapHelper\\n    ) external;\\n\\n    function createProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function destroyProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function executeProposal(address propAddress) external;\\n\\n    function issueInitialGovernanceTokens(address receiver) external returns (uint256);\\n\\n    function maybeIssueGovernanceToken(address receiver) external returns (uint256);\\n\\n    function issueFuelToken(address receiver, uint256 amount) external returns (uint256);\\n\\n    function createPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createNewPoolProposal(\\n        address,\\n        string memory,\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external returns (address);\\n\\n    function createChangeFeeProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (address);\\n\\n    function createFundProjectProposal(\\n        address,\\n        string memory,\\n        address,\\n        string memory,\\n        uint256\\n    ) external returns (address);\\n\\n    function createUpdateAllowlistProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        bool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x1b50c9b3cace4c06f4c147759a6a349402c66b6ab453198553b9159e81a64ce6\",\"license\":\"MIT\"},\"src/interfaces/INFTGemMultiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function allHeldTokens(address holder, uint256 _idx) external view returns (uint256);\\n\\n    function allHeldTokensLength(address holder) external view returns (uint256);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx) external view returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token) external view returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9f0c9d0f1d70f965bac24c4b70bb8df227e598228a86ab7f526382f14887b1a6\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPool {\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        uint256 quantity,\\n        uint256 amountPaid\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 amountPaid,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(address account, address pool, uint256 claimHash, uint256 gemHash, uint256 quantity);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function setVisible(bool visible) external;\\n\\n    function visible() external view returns (bool);\\n\\n    function setCategory(uint256 category) external;\\n\\n    function category() external view returns (uint256);\\n\\n    function setValidateErc20(bool) external;\\n\\n    function validateErc20() external view returns (bool);\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external;\\n\\n    function collectClaim(uint256 claimHash) external;\\n\\n    function rescue(address erc20token, uint256 tokenAmount) external;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6c2ba95bb3c2eafbc9d7bf749cafc943f7d2476a89b5a03744f3fc53b64cde96\",\"license\":\"MIT\"},\"src/interfaces/INFTGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTGemPoolData {\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function ethPrice() external view returns (uint256);\\n\\n    function minTime() external view returns (uint256);\\n\\n    function maxTime() external view returns (uint256);\\n\\n    function difficultyStep() external view returns (uint256);\\n\\n    function maxClaims() external view returns (uint256);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n\\n    function claimQuantity(uint256 claimId) external view returns (uint256);\\n\\n    function mintedCount() external view returns (uint256);\\n\\n    function totalStakedEth() external view returns (uint256);\\n\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n\\n    function tokenType(uint256 tokenHash) external view returns (uint8);\\n\\n    function allTokenHashesLength() external view returns (uint256);\\n\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n\\n    function nextClaimHash() external view returns (uint256);\\n\\n    function nextGemHash() external view returns (uint256);\\n\\n    function nextGemId() external view returns (uint256);\\n\\n    function nextClaimId() external view returns (uint256);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n\\n    function allowedTokens(uint256 idx) external view returns (address);\\n\\n    function isTokenAllowed(address token) external view returns (bool);\\n\\n    function addAllowedToken(address token) external;\\n\\n    function removeAllowedToken(address token) external;\\n}\\n\",\"keccak256\":\"0x19e368494dc8e8ce9b5f3b906c431424a8e402a994a40ea5b714c40c0822977d\",\"license\":\"MIT\"},\"src/interfaces/ISwapQueryHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface ISwapQueryHelper {\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function factory() external view returns (address);\\n\\n    function COIN() external pure returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function hasPool(address token) external view returns (bool);\\n\\n    function getReserves(address pair) external view returns (uint256, uint256);\\n\\n    function getPathForCoinToToken(address token) external pure returns (address[] memory);\\n\\n    function setFactory(address f) external;\\n}\\n\",\"keccak256\":\"0x36e47f43dc3f309d516f238f4744143e1d2cb23e0206729103478534960e7693\",\"license\":\"MIT\"},\"src/libs/AddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @notice Key sets with enumeration and delete. Uses mappings for random\\n * and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced.\\n * @dev Sets are unordered. Delete operations reorder keys. All operations have a\\n * fixed gas cost at any scale, O(1).\\n * author: Rob Hitchens\\n */\\n\\nlibrary AddressSet {\\n    struct Set {\\n        mapping(address => uint256) keyPointers;\\n        address[] keyList;\\n    }\\n\\n    /**\\n     * @notice insert a key.\\n     * @dev duplicate keys are not permitted.\\n     * @param self storage pointer to a Set.\\n     * @param key value to insert.\\n     */\\n    function insert(Set storage self, address key) internal {\\n        require(!exists(self, key), \\\"AddressSet: key already exists in the set.\\\");\\n        self.keyList.push(key);\\n        self.keyPointers[key] = self.keyList.length - 1;\\n    }\\n\\n    /**\\n     * @notice remove a key.\\n     * @dev key to remove must exist.\\n     * @param self storage pointer to a Set.\\n     * @param key value to remove.\\n     */\\n    function remove(Set storage self, address key) internal {\\n        require(exists(self, key), \\\"AddressSet: key does not exist in the set.\\\");\\n        uint256 last = count(self) - 1;\\n        uint256 rowToReplace = self.keyPointers[key];\\n        if (rowToReplace != last) {\\n            address keyToMove = self.keyList[last];\\n            self.keyPointers[keyToMove] = rowToReplace;\\n            self.keyList[rowToReplace] = keyToMove;\\n        }\\n        delete self.keyPointers[key];\\n        delete self.keyList[self.keyList.length - 1];\\n    }\\n\\n    /**\\n     * @notice count the keys.\\n     * @param self storage pointer to a Set.\\n     */\\n    function count(Set storage self) internal view returns (uint256) {\\n        return (self.keyList.length);\\n    }\\n\\n    /**\\n     * @notice check if a key is in the Set.\\n     * @param self storage pointer to a Set.\\n     * @param key value to check.\\n     * @return bool true: Set member, false: not a Set member.\\n     */\\n    function exists(Set storage self, address key) internal view returns (bool) {\\n        if (self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */\\n    function keyAtIndex(Set storage self, uint256 index) internal view returns (address) {\\n        return self.keyList[index];\\n    }\\n}\\n\",\"keccak256\":\"0xa661269ae3455bc648085aefde61639b8fa77afeef021bf1e1a11ea25b42f393\",\"license\":\"MIT\"},\"src/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x688b57d8a4d5b6221b74de43b603ac03191e89f278c361ea7ceb257268882c4b\",\"license\":\"MIT\"},\"src/pool/NFTComplexGemPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../utils/Initializable.sol\\\";\\nimport \\\"../access/Controllable.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPool.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/ISwapQueryHelper.sol\\\";\\n\\nimport \\\"../libs/SafeMath.sol\\\";\\nimport \\\"./NFTComplexGemPoolData.sol\\\";\\n\\ncontract NFTComplexGemPool is NFTComplexGemPoolData, INFTComplexGemPool, Controllable {\\n    using SafeMath for uint256;\\n\\n    // governor and multitoken target\\n    address private _multitoken;\\n    address private _governor;\\n    address private _feeTracker;\\n    address private _swapHelper;\\n    bool private _visible;\\n    bool private _validateerc20;\\n    uint256 private _category;\\n\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /**\\n     * @dev initializer called when contract is deployed\\n     */\\n    function initialize(\\n        string memory __symbol,\\n        string memory __name,\\n        uint256 __ethPrice,\\n        uint256 __minTime,\\n        uint256 __maxTime,\\n        uint256 __diffstep,\\n        uint256 __maxClaims,\\n        address __allowedToken\\n    ) external override initializer {\\n        _symbol = __symbol;\\n        _name = __name;\\n        _ethPrice = __ethPrice;\\n        _minTime = __minTime;\\n        _maxTime = __maxTime;\\n        _diffstep = __diffstep;\\n        _maxClaims = __maxClaims;\\n        _visible = true;\\n        _validateerc20 = true;\\n        if (__allowedToken != address(0)) {\\n            _allowedTokens.push(__allowedToken);\\n            _isAllowedMap[__allowedToken] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev set the governor. pool uses the governor to issue gov token issuance requests\\n     */\\n    function setGovernor(address addr) external override {\\n        require(_controllers[msg.sender] = true || msg.sender == _governor, \\\"UNAUTHORIZED\\\");\\n        _governor = addr;\\n    }\\n\\n    /**\\n     * @dev set the governor. pool uses the governor to issue gov token issuance requests\\n     */\\n    function setFeeTracker(address addr) external override {\\n        require(_controllers[msg.sender] = true || msg.sender == _governor, \\\"UNAUTHORIZED\\\");\\n        _feeTracker = addr;\\n    }\\n\\n    /**\\n     * @dev set the multitoken that this pool will mint new tokens on. Must be a controller of the multitoken\\n     */\\n    function setMultiToken(address token) external override {\\n        require(_controllers[msg.sender] = true || msg.sender == _governor, \\\"UNAUTHORIZED\\\");\\n        _multitoken = token;\\n    }\\n\\n    /**\\n     * @dev set the multitoken that this pool will mint new tokens on. Must be a controller of the multitoken\\n     */\\n    function setSwapHelper(address helper) external override {\\n        require(_controllers[msg.sender] = true || msg.sender == _governor, \\\"UNAUTHORIZED\\\");\\n        _swapHelper = helper;\\n    }\\n\\n    /**\\n     * @dev set market visibility\\n     */\\n    function setVisible(bool visible) external override {\\n        require(_controllers[msg.sender] = true || msg.sender == _governor, \\\"UNAUTHORIZED\\\");\\n        _visible = visible;\\n    }\\n\\n    /**\\n     * @dev set market visibility\\n     */\\n    function visible() external view override returns (bool v) {\\n        v = _visible;\\n    }\\n\\n    /**\\n     * @dev set category category\\n     */\\n    function setCategory(uint256 category) external override {\\n        require(_controllers[msg.sender] = true || msg.sender == _governor, \\\"UNAUTHORIZED\\\");\\n        _category = category;\\n    }\\n\\n    /**\\n     * @dev set market category\\n     */\\n    function category() external view override returns (uint256 c) {\\n        c = _category;\\n    }\\n\\n    /**\\n     * @dev set category category\\n     */\\n    function setValidateErc20(bool v) external override {\\n        require(_controllers[msg.sender] = true || msg.sender == _governor, \\\"UNAUTHORIZED\\\");\\n        _validateerc20 = v;\\n    }\\n\\n    /**\\n     * @dev set market category\\n     */\\n    function validateErc20() external view override returns (bool c) {\\n        c = _validateerc20;\\n    }\\n\\n    /**\\n     * @dev mint the genesis gems earned by the pools creator and funder\\n     */\\n    function mintGenesisGems(address creator, address funder) external override {\\n        require(_multitoken != address(0), \\\"NO_MULTITOKEN\\\");\\n        require(creator != address(0) && funder != address(0), \\\"ZERO_DESTINATION\\\");\\n        require(_nextGemId == 0, \\\"ALREADY_MINTED\\\");\\n\\n        uint256 gemHash = _nextGemHash();\\n        INFTGemMultiToken(_multitoken).mint(creator, gemHash, 1);\\n        _addToken(gemHash, 2);\\n\\n        gemHash = _nextGemHash();\\n        INFTGemMultiToken(_multitoken).mint(creator, gemHash, 1);\\n        _addToken(gemHash, 2);\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function createClaim(uint256 timeframe) external payable override {}\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function createClaims(uint256 timeframe, uint256 count) external payable override {\\n        _createClaims(timeframe, count);\\n    }\\n\\n    /**\\n     * @dev create a claim using a erc20 token\\n     */\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external override {}\\n\\n    /**\\n     * @dev create a claim using a erc20 token\\n     */\\n    function createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) external override {\\n        _createERC20Claims(erc20token, tokenAmount, count);\\n    }\\n\\n    /**\\n     * @dev rescue funds\\n     */\\n    function rescue(address erc20token, uint256 tokenAmount) external override onlyController {\\n        if (erc20token == address(0)) {\\n            payable(_feeTracker).transfer(tokenAmount);\\n        } else {\\n            IERC20(erc20token).transferFrom(address(this), address(_feeTracker), tokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev attempt to create a claim using the given timeframe\\n     */\\n    function _createClaims(uint256 timeframe, uint256 count) internal {\\n        // minimum timeframe\\n        require(timeframe >= _minTime, \\\"TIMEFRAME_TOO_SHORT\\\");\\n        // no ETH\\n        require(msg.value != 0, \\\"ZERO_BALANCE\\\");\\n        // zero qty\\n        require(count != 0, \\\"ZERO_QUANTITY\\\");\\n        // maximum timeframe\\n        require((_maxTime != 0 && timeframe <= _maxTime) || _maxTime == 0, \\\"TIMEFRAME_TOO_LONG\\\");\\n\\n        uint256 adjustedBalance = msg.value.div(count);\\n        // cost given this timeframe\\n\\n        uint256 cost = _ethPrice.mul(_minTime).div(timeframe);\\n        require(adjustedBalance >= cost, \\\"INSUFFICIENT_ETH\\\");\\n\\n        // get the nest claim hash, revert if no more claims\\n        uint256 claimHash = _nextClaimHash();\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(_multitoken).mint(msg.sender, claimHash, 1);\\n        _addToken(claimHash, 1);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 _claimUnlockTime = block.timestamp.add(timeframe);\\n        claimLockTimestamps[claimHash] = _claimUnlockTime;\\n        claimAmountPaid[claimHash] = cost.mul(count);\\n        claimQuant[claimHash] = count;\\n\\n        // maybe mint a governance token for the claimant\\n        INFTGemGovernor(_governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(_governor).issueFuelToken(msg.sender, cost);\\n\\n        emit NFTGemClaimCreated(msg.sender, address(this), claimHash, timeframe, count, cost);\\n\\n        // increase the staked eth balance\\n        _totalStakedEth = _totalStakedEth.add(cost.mul(count));\\n\\n        if (msg.value > cost.mul(count)) {\\n            (bool success, ) = payable(msg.sender).call{value: msg.value.sub(cost.mul(count))}(\\\"\\\");\\n            require(success, \\\"REFUND_FAILED\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev crate multiple gem claim using an erc20 token. this token must be tradeable in Uniswap or this call will fail\\n     */\\n    function _createERC20Claims(\\n        address erc20token,\\n        uint256 tokenAmount,\\n        uint256 count\\n    ) internal {\\n        // must be a valid address\\n        require(erc20token != address(0), \\\"INVALID_ERC20_TOKEN\\\");\\n\\n        // token is allowed\\n        require(\\n            (_allowedTokens.length > 0 && _isAllowedMap[erc20token]) || _allowedTokens.length == 0,\\n            \\\"TOKEN_DISALLOWED\\\"\\n        );\\n\\n        // zero qty\\n        require(count != 0, \\\"ZERO_QUANTITY\\\");\\n\\n        // Uniswap pool must exist\\n        require(ISwapQueryHelper(_swapHelper).hasPool(erc20token) == true, \\\"NO_UNISWAP_POOL\\\");\\n\\n        // must have an amount specified\\n        require(tokenAmount >= 0, \\\"NO_PAYMENT_INCLUDED\\\");\\n\\n        // get a quote in ETH for the given token.\\n        (uint256 ethereum, uint256 tokenReserve, uint256 ethReserve) =\\n            ISwapQueryHelper(_swapHelper).coinQuote(erc20token, tokenAmount.div(count));\\n\\n        if (_validateerc20 == true) {\\n            // make sure the convertible amount is has reserves > 100x the token\\n            require(ethReserve >= ethereum.mul(100).mul(count), \\\"INSUFFICIENT_ETH_LIQUIDITY\\\");\\n\\n            // make sure the convertible amount is has reserves > 100x the token\\n            require(tokenReserve >= tokenAmount.mul(100).mul(count), \\\"INSUFFICIENT_TOKEN_LIQUIDITY\\\");\\n        }\\n\\n        // make sure the convertible amount is less than max price\\n        require(ethereum <= _ethPrice, \\\"OVERPAYMENT\\\");\\n\\n        // calculate the maturity time given the converted eth\\n        uint256 maturityTime = _ethPrice.mul(_minTime).div(ethereum);\\n\\n        // make sure the convertible amount is less than max price\\n        require(maturityTime >= _minTime, \\\"INSUFFICIENT_TIME\\\");\\n\\n        // get the next claim hash, revert if no more claims\\n        uint256 claimHash = _nextClaimHash();\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(_multitoken).mint(msg.sender, claimHash, 1);\\n        _addToken(claimHash, 1);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 _claimUnlockTime = block.timestamp.add(maturityTime);\\n        claimLockTimestamps[claimHash] = _claimUnlockTime;\\n        claimAmountPaid[claimHash] = ethereum;\\n        claimLockToken[claimHash] = erc20token;\\n        claimTokenAmountPaid[claimHash] = tokenAmount;\\n        claimQuant[claimHash] = count;\\n\\n        // increase staked eth amount\\n        _totalStakedEth = _totalStakedEth.add(ethereum);\\n\\n        // maybe mint a governance token for the claimant\\n        INFTGemGovernor(_governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(_governor).issueFuelToken(msg.sender, ethereum);\\n\\n        // emit a message indicating that an erc20 claim has been created\\n        emit NFTGemERC20ClaimCreated(msg.sender, address(this), claimHash, maturityTime, erc20token, count, ethereum);\\n\\n        // transfer the caller's ERC20 tokens into the pool\\n        IERC20(erc20token).transferFrom(msg.sender, address(this), tokenAmount);\\n    }\\n\\n    /**\\n     * @dev collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)\\n     */\\n    function collectClaim(uint256 claimHash) external override {\\n        // validation checks - disallow if not owner (holds coin with claimHash)\\n        // or if the unlockTime amd unlockPaid data is in an invalid state\\n        require(IERC1155(_multitoken).balanceOf(msg.sender, claimHash) == 1, \\\"NOT_CLAIM_OWNER\\\");\\n        uint256 unlockTime = claimLockTimestamps[claimHash];\\n        uint256 unlockPaid = claimAmountPaid[claimHash];\\n        require(unlockTime != 0 && unlockPaid > 0, \\\"INVALID_CLAIM\\\");\\n\\n        // grab the erc20 token info if there is any\\n        address tokenUsed = claimLockToken[claimHash];\\n        uint256 unlockTokenPaid = claimTokenAmountPaid[claimHash];\\n\\n        // check the maturity of the claim - only issue gem if mature\\n        bool isMature = unlockTime < block.timestamp;\\n\\n        //  burn claim and transfer money back to user\\n        INFTGemMultiToken(_multitoken).burn(msg.sender, claimHash, 1);\\n\\n        // if they used erc20 tokens stake their claim, return their tokens\\n        if (tokenUsed != address(0)) {\\n            // calculate fee portion using fee tracker\\n            uint256 feePortion = 0;\\n            if (isMature == true) {\\n                uint256 poolDiv = INFTGemFeeManager(_feeTracker).feeDivisor(address(this));\\n                uint256 divisor = INFTGemFeeManager(_feeTracker).feeDivisor(tokenUsed);\\n                uint256 feeNum = poolDiv != divisor ? divisor : poolDiv;\\n                feePortion = unlockTokenPaid.div(feeNum);\\n            }\\n            // assess a fee for minting the NFT. Fee is collectec in fee tracker\\n            IERC20(tokenUsed).transferFrom(address(this), _feeTracker, feePortion);\\n            // send the principal minus fees to the caller\\n            IERC20(tokenUsed).transferFrom(address(this), msg.sender, unlockTokenPaid.sub(feePortion));\\n\\n            // emit an event that the claim was redeemed for ERC20\\n            emit NFTGemERC20ClaimRedeemed(\\n                msg.sender,\\n                address(this),\\n                claimHash,\\n                tokenUsed,\\n                unlockPaid,\\n                unlockTokenPaid,\\n                feePortion\\n            );\\n        } else {\\n            // calculate fee portion using fee tracker\\n            uint256 feePortion = 0;\\n            if (isMature == true) {\\n                uint256 divisor = INFTGemFeeManager(_feeTracker).feeDivisor(address(0));\\n                feePortion = unlockPaid.div(divisor);\\n            }\\n            // transfer the ETH fee to fee tracker\\n            payable(_feeTracker).transfer(feePortion);\\n            // transfer the ETH back to user\\n            payable(msg.sender).transfer(unlockPaid.sub(feePortion));\\n\\n            // emit an event that the claim was redeemed for ETH\\n            emit NFTGemClaimRedeemed(msg.sender, address(this), claimHash, unlockPaid, feePortion);\\n        }\\n\\n        // deduct the total staked ETH balance of the pool\\n        _totalStakedEth = _totalStakedEth.sub(unlockPaid);\\n\\n        // if all this is happening before the unlocktime then we exit\\n        // without minting a gem because the user is withdrawing early\\n        if (!isMature) {\\n            return;\\n        }\\n\\n        // get the next gem hash, increase the staking sifficulty\\n        // for the pool, and mint a gem token back to account\\n        uint256 nextHash = this.nextGemHash();\\n\\n        // mint the gem\\n        INFTGemMultiToken(_multitoken).mint(msg.sender, nextHash, claimQuant[claimHash]);\\n        _addToken(nextHash, 2);\\n\\n        // maybe mint a governance token\\n        INFTGemGovernor(_governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(_governor).issueFuelToken(msg.sender, unlockPaid);\\n\\n        // emit an event about a gem getting created\\n        emit NFTGemCreated(msg.sender, address(this), claimHash, nextHash, claimQuant[claimHash]);\\n    }\\n}\\n\",\"keccak256\":\"0x4b312473a7e578fb77d8383e582c47364d05272c9d9aa10b638868e75c64d6c5\",\"license\":\"MIT\"},\"src/pool/NFTComplexGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../libs/AddressSet.sol\\\";\\nimport \\\"../libs/SafeMath.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolData.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTComplexGemPoolData.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC1155.sol\\\";\\n\\nimport \\\"./NFTGemPoolData.sol\\\";\\n\\ncontract NFTComplexGemPoolData is NFTGemPoolData, INFTComplexGemPoolData {\\n    struct InputRequirement {\\n        address token;\\n        address pool;\\n        uint8 inputType; // 1 = erc20, 2 = erc1155, 3 = pool\\n        uint256 tokenId; // if erc20 slot 0 contains required amount\\n        uint256 minVal;\\n        bool burn;\\n    }\\n    InputRequirement[] internal inputRequirements;\\n\\n    /**\\n     * @dev check the input requirements for the token - return true if requirements are met\\n     */\\n    function checkInputRequirements(address account) internal returns (bool) {\\n        for (uint256 i = 0; i < inputRequirements.length; i++) {\\n            if (inputRequirements[i].inputType == 1) {\\n                IERC20 token = IERC20(inputRequirements[i].token);\\n                uint256 bal = token.balanceOf(account);\\n                if (bal < inputRequirements[i].minVal) {\\n                    return false;\\n                }\\n            } else if (inputRequirements[i].inputType == 2) {\\n                IERC1155 token = IERC1155(inputRequirements[i].token);\\n                uint256 bal = token.balanceOf(account, inputRequirements[i].tokenId);\\n                if (bal < inputRequirements[i].minVal) {\\n                    return false;\\n                }\\n            } else if (inputRequirements[i].inputType == 3) {\\n                IERC1155 token = IERC1155(inputRequirements[i].token);\\n                INFTGemPoolData pool = INFTGemPoolData(inputRequirements[i].pool);\\n                uint256 required = inputRequirements[i].minVal;\\n                uint256 hashCount = INFTGemMultiToken(inputRequirements[i].token).allHeldTokensLength(account);\\n                for (uint256 j = 0; j < hashCount; j++) {\\n                    uint256 hashAt = INFTGemMultiToken(inputRequirements[i].token).allHeldTokens(account, j);\\n                    if (pool.tokenType(hashAt) == 2) {\\n                        uint256 bal = token.balanceOf(account, hashAt);\\n                        if (bal > required) {\\n                            bal = required;\\n                        }\\n                        required = required - bal;\\n                    }\\n                    if (required == 0) {\\n                        break;\\n                    }\\n                }\\n                if (required > 0) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev add an input requirement for this token\\n     */\\n    function addInputRequirement(\\n        address token,\\n        address pool,\\n        uint8 inputType,\\n        uint256 tokenId,\\n        uint256 minAmount,\\n        bool burn\\n    ) external override {\\n        require(token != address(0), \\\"INVALID_TOKEN\\\");\\n        require(inputType == 1 || inputType == 2 || inputType == 3, \\\"INVALID_TOKENTYPE\\\");\\n        require((inputType == 3 && pool != address(0)) || inputType != 3, \\\"INVALID_POOL\\\");\\n        require(\\n            (inputType == 1 && tokenId == 0) || inputType == 2 || (inputType == 3 && tokenId == 0),\\n            \\\"INVALID_TOKENID\\\"\\n        );\\n        require(minAmount != 0, \\\"ZERO_AMOUNT\\\");\\n        inputRequirements.push(InputRequirement(token, pool, inputType, tokenId, minAmount, burn));\\n    }\\n}\\n\",\"keccak256\":\"0x97d421ab95d3522c5520cac38e00715941c8beae0b637d915425552cb3e45b2c\",\"license\":\"MIT\"},\"src/pool/NFTGemPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../libs/SafeMath.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolData.sol\\\";\\n\\n\\ncontract NFTGemPoolData is INFTGemPoolData, Initializable {\\n    using SafeMath for uint256;\\n\\n    // it all starts with a symbol and a nams\\n    string internal _symbol;\\n    string internal _name;\\n\\n    // magic economy numbers\\n    uint256 internal _ethPrice;\\n    uint256 internal _minTime;\\n    uint256 internal _maxTime;\\n    uint256 internal _diffstep;\\n    uint256 internal _maxClaims;\\n\\n    mapping(uint256 => uint8) internal _tokenTypes;\\n    mapping(uint256 => uint256) internal _tokenIds;\\n    uint256[] internal _tokenHashes;\\n\\n    // next ids of things\\n    uint256 internal _nextGemId;\\n    uint256 internal _nextClaimId;\\n    uint256 internal _totalStakedEth;\\n\\n    // records claim timestamp / ETH value / ERC token and amount sent\\n    mapping(uint256 => uint256) internal claimLockTimestamps;\\n    mapping(uint256 => address) internal claimLockToken;\\n    mapping(uint256 => uint256) internal claimAmountPaid;\\n    mapping(uint256 => uint256) internal claimQuant;\\n    mapping(uint256 => uint256) internal claimTokenAmountPaid;\\n\\n    address[] internal _allowedTokens;\\n    mapping(address => bool) internal _isAllowedMap;\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev The symbol for this pool / NFT\\n     */\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev The name for this pool / NFT\\n     */\\n    function name() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The ether price for this pool / NFT\\n     */\\n    function ethPrice() external view override returns (uint256) {\\n        return _ethPrice;\\n    }\\n\\n    /**\\n     * @dev min time to stake in this pool to earn an NFT\\n     */\\n    function minTime() external view override returns (uint256) {\\n        return _minTime;\\n    }\\n\\n    /**\\n     * @dev max time to stake in this pool to earn an NFT\\n     */\\n    function maxTime() external view override returns (uint256) {\\n        return _maxTime;\\n    }\\n\\n    /**\\n     * @dev difficulty step increase for this pool.\\n     */\\n    function difficultyStep() external view override returns (uint256) {\\n        return _diffstep;\\n    }\\n\\n    /**\\n     * @dev max claims that can be made on this NFT\\n     */\\n    function maxClaims() external view override returns (uint256) {\\n        return _maxClaims;\\n    }\\n\\n    /**\\n     * @dev number of claims made thus far\\n     */\\n    function claimedCount() external view override returns (uint256) {\\n        return _nextClaimId;\\n    }\\n\\n    /**\\n     * @dev the number of gems minted in this\\n     */\\n    function mintedCount() external view override returns (uint256) {\\n        return _nextGemId;\\n    }\\n\\n    /**\\n     * @dev the number of gems minted in this\\n     */\\n    function totalStakedEth() external view override returns (uint256) {\\n        return _totalStakedEth;\\n    }\\n\\n    /**\\n     * @dev get token type of hash - 1 is for claim, 2 is for gem\\n     */\\n    function tokenType(uint256 tokenHash) external view override returns (uint8) {\\n        return _tokenTypes[tokenHash];\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function tokenId(uint256 tokenHash) external view override returns (uint256) {\\n        return _tokenIds[tokenHash];\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function allTokenHashesLength() external view override returns (uint256) {\\n        return _tokenHashes.length;\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function allTokenHashes(uint256 ndx) external view override returns (uint256) {\\n        return _tokenHashes[ndx];\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function nextClaimHash() external view override returns (uint256) {\\n        return _nextClaimHash();\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function nextGemHash() external view override returns (uint256) {\\n        return _nextGemHash();\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function nextClaimId() external view override returns (uint256) {\\n        return _nextClaimId;\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function nextGemId() external view override returns (uint256) {\\n        return _nextGemId;\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function allowedTokensLength() external view override returns (uint256) {\\n        return _allowedTokens.length;\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function allowedTokens(uint256 idx) external view override returns (address) {\\n        return _allowedTokens[idx];\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function isTokenAllowed(address token) external view override returns (bool) {\\n        return _isAllowedMap[token];\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function addAllowedToken(address token) external override {\\n        if(!_isAllowedMap[token]) {\\n            _allowedTokens.push(token);\\n            _isAllowedMap[token] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function removeAllowedToken(address token) external override {\\n        if(_isAllowedMap[token]) {\\n            for(uint256 i = 0; i < _allowedTokens.length; i++) {\\n                if(_allowedTokens[i] == token) {\\n                   _allowedTokens[i] = _allowedTokens[_allowedTokens.length - 1];\\n                    delete _allowedTokens[_allowedTokens.length - 1];\\n                    _isAllowedMap[token] = false;\\n                    return;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev the claim amount for the given claim id\\n     */\\n    function claimAmount(uint256 claimHash) external view override returns (uint256) {\\n        return claimAmountPaid[claimHash];\\n    }\\n\\n    /**\\n     * @dev the claim quantity (count of gems staked) for the given claim id\\n     */\\n    function claimQuantity(uint256 claimHash) external view override returns (uint256) {\\n        return claimQuant[claimHash];\\n    }\\n\\n    /**\\n     * @dev the lock time for this claim. once past lock time a gema is minted\\n     */\\n    function claimUnlockTime(uint256 claimHash) external view override returns (uint256) {\\n        return claimLockTimestamps[claimHash];\\n    }\\n\\n    /**\\n     * @dev claim token amount if paid using erc20\\n     */\\n    function claimTokenAmount(uint256 claimHash) external view override returns (uint256) {\\n        return claimTokenAmountPaid[claimHash];\\n    }\\n\\n    /**\\n     * @dev the staked token if staking with erc20\\n     */\\n    function stakedToken(uint256 claimHash) external view override returns (address) {\\n        return claimLockToken[claimHash];\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function _addToken(uint256 tokenHash, uint8 tt) internal {\\n        require(tt == 1 || tt == 2, \\\"INVALID_TOKENTYPE\\\");\\n        _tokenHashes.push(tokenHash);\\n        _tokenTypes[tokenHash] = tt;\\n        _tokenIds[tokenHash] = tt == 1 ? __nextClaimId() : __nextGemId();\\n        if(tt == 2) {\\n            _increaseDifficulty();\\n        }\\n    }\\n\\n    /**\\n     * @dev get the next claim id\\n     */\\n    function __nextClaimId() private returns (uint256) {\\n        uint256 ncId = _nextClaimId;\\n        _nextClaimId = _nextClaimId.add(1);\\n        return ncId;\\n    }\\n\\n    /**\\n     * @dev get the next gem id\\n     */\\n    function __nextGemId() private returns (uint256) {\\n        uint256 ncId = _nextGemId;\\n        _nextGemId = _nextGemId.add(1);\\n        return ncId;\\n    }\\n\\n    /**\\n     * @dev increase the pool's difficulty by calculating the step increase portion and adding it to the eth price of the market\\n     */\\n    function _increaseDifficulty() private {\\n        uint256 diffIncrease = _ethPrice.div(_diffstep);\\n        _ethPrice = _ethPrice.add(diffIncrease);\\n    }\\n\\n    /**\\n     * @dev the hash of the next gem to be minted\\n     */\\n    function _nextGemHash() internal view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(\\\"gem\\\", address(this), _nextGemId)));\\n    }\\n\\n    /**\\n     * @dev the hash of the next claim to be minted\\n     */\\n    function _nextClaimHash() internal view returns (uint256) {\\n        return\\n            (_maxClaims != 0 && _nextClaimId <= _maxClaims) || _maxClaims == 0\\n                ? uint256(keccak256(abi.encodePacked(\\\"claim\\\", address(this), _nextClaimId)))\\n                : 0;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2032f4f485420732475991c1619e92fcf3f84f13557a9187deba04b20ad53a87\",\"license\":\"MIT\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x449514510d4ad1b6d147c8e25e9c9e2f7652ead618c4ed1b8021ce128778fad1\",\"license\":\"MIT\"},\"src/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xdda65747b0bb97e8f0cf0e3bb767d4de43420edf302dd11008536ba2aecf46a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000023565b62000047565b6001600160a01b03166000908152601660205260409020805460ff19166001179055565b613a5780620000576000396000f3fe6080604052600436106103295760003560e01c8063a7fc7a07116101a5578063d104f8f5116100ec578063e5d2ce2f11610095578063ef430aa61161006f578063ef430aa614610bdd578063f4fde0d314610bf2578063f9eaee0d14610c07578063ff186b2e14610c3a57610329565b8063e5d2ce2f14610b3a578063e6c3b1f614610b64578063edcf2d5714610ba457610329565b8063d73cd47f116100c6578063d73cd47f14610991578063d9a3f9bb146109c4578063e1c28bef14610b2557610329565b8063d104f8f514610908578063d31674db1461093b578063d43e64601461096557610329565b8063c08fa1a41161014e578063c80c061311610128578063c80c0613146108de578063cf5380b4146108f3578063cf721b15146108de57610329565b8063c08fa1a41461079d578063c42cf53514610881578063c5e01a5c146108b457610329565b8063b429afeb1161017f578063b429afeb14610824578063b788e4e914610857578063bf86999b1461086c57610329565b8063a7fc7a07146107b2578063a901c474146107e5578063af6a6d791461080f57610329565b80636b6201da116102745780637f2e8f0c1161021d5780639277a185116101f75780639277a1851461072b578063959355601461075e57806395d89b4114610788578063a0021cf11461079d57610329565b80637f2e8f0c146106b95780638a09871b146106e357806390469a9d146106f857610329565b80637ae7815d1161024e5780637ae7815d146106395780637c5d643e146106655780637dcb0e5f1461068f57610329565b80636b6201da146105895780636ba0f5c4146105a65780637a4e4ecf1461060057610329565b80634178617f116102d65780635d2e0dd4116102b05780635d2e0dd4146104db5780635e5f2e26146105045780636100c3431461054a57610329565b80634178617f1461047e5780634565e5ef146104b1578063504cdacf146104c657610329565b806323b221a01161030757806323b221a0146103f45780632449ef511461041e578063392732b11461045b57610329565b806306fdde031461032e5780631aa43078146103b857806322e67e71146103df575b600080fd5b34801561033a57600080fd5b50610343610c4f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561037d578181015183820152602001610365565b50505050905090810190601f1680156103aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103c457600080fd5b506103cd610d00565b60408051918252519081900360200190f35b3480156103eb57600080fd5b506103cd610d06565b34801561040057600080fd5b506103cd6004803603602081101561041757600080fd5b5035610d0c565b34801561042a57600080fd5b506104596004803603604081101561044157600080fd5b506001600160a01b0381358116916020013516610d1e565b005b6104596004803603604081101561047157600080fd5b5080359060200135610f8c565b34801561048a57600080fd5b50610459600480360360208110156104a157600080fd5b50356001600160a01b0316610f9a565b3480156104bd57600080fd5b506103cd611039565b3480156104d257600080fd5b506103cd61103f565b3480156104e757600080fd5b506104f0611045565b604080519115158252519081900360200190f35b34801561051057600080fd5b5061052e6004803603602081101561052757600080fd5b5035611067565b604080516001600160a01b039092168252519081900360200190f35b34801561055657600080fd5b506104596004803603606081101561056d57600080fd5b506001600160a01b038135169060208101359060400135611091565b6104596004803603602081101561059f57600080fd5b5035611036565b3480156105b257600080fd5b50610459600480360360c08110156105c957600080fd5b506001600160a01b03813581169160208101359091169060ff6040820135169060608101359060808101359060a00135151561109c565b34801561060c57600080fd5b506104596004803603604081101561062357600080fd5b506001600160a01b038135169060200135611465565b34801561064557600080fd5b506104596004803603602081101561065c57600080fd5b503515156115b5565b34801561067157600080fd5b506104596004803603602081101561068857600080fd5b503561161a565b34801561069b57600080fd5b506103cd600480360360208110156106b257600080fd5b5035611f64565b3480156106c557600080fd5b506103cd600480360360208110156106dc57600080fd5b5035611f76565b3480156106ef57600080fd5b506103cd611f88565b34801561070457600080fd5b506104596004803603602081101561071b57600080fd5b50356001600160a01b0316611f97565b34801561073757600080fd5b506104596004803603602081101561074e57600080fd5b50356001600160a01b031661211b565b34801561076a57600080fd5b506103cd6004803603602081101561078157600080fd5b503561216f565b34801561079457600080fd5b50610343612181565b3480156107a957600080fd5b506103cd6121ff565b3480156107be57600080fd5b50610459600480360360208110156107d557600080fd5b50356001600160a01b0316612205565b3480156107f157600080fd5b506103cd6004803603602081101561080857600080fd5b5035612286565b34801561081b57600080fd5b506104f0612298565b34801561083057600080fd5b506104f06004803603602081101561084757600080fd5b50356001600160a01b03166122b9565b34801561086357600080fd5b506103cd6122d7565b34801561087857600080fd5b506103cd6122e1565b34801561088d57600080fd5b50610459600480360360208110156108a457600080fd5b50356001600160a01b03166122e7565b3480156108c057600080fd5b5061052e600480360360208110156108d757600080fd5b503561233b565b3480156108ea57600080fd5b506103cd612356565b3480156108ff57600080fd5b506103cd61235c565b34801561091457600080fd5b506104596004803603602081101561092b57600080fd5b50356001600160a01b0316612362565b34801561094757600080fd5b506103cd6004803603602081101561095e57600080fd5b50356123b6565b34801561097157600080fd5b506104596004803603602081101561098857600080fd5b503515156123d7565b34801561099d57600080fd5b50610459600480360360208110156109b457600080fd5b50356001600160a01b031661243b565b3480156109d057600080fd5b5061045960048036036101008110156109e857600080fd5b810190602081018135640100000000811115610a0357600080fd5b820183602082011115610a1557600080fd5b80359060200191846001830284011164010000000083111715610a3757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050640100000000811115610a8a57600080fd5b820183602082011115610a9c57600080fd5b80359060200191846001830284011164010000000083111715610abe57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a001356001600160a01b031661248f565b348015610b3157600080fd5b506104596126ba565b348015610b4657600080fd5b5061045960048036036020811015610b5d57600080fd5b5035612722565b348015610b7057600080fd5b50610b8e60048036036020811015610b8757600080fd5b5035612741565b6040805160ff9092168252519081900360200190f35b348015610bb057600080fd5b5061045960048036036040811015610bc757600080fd5b506001600160a01b038135169060200135610f96565b348015610be957600080fd5b506103cd612756565b348015610bfe57600080fd5b506103cd61275c565b348015610c1357600080fd5b506104f060048036036020811015610c2a57600080fd5b50356001600160a01b0316612762565b348015610c4657600080fd5b506103cd612780565b60028054604080516020601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001871615020190941685900493840181900481028201810190925282815260609390929091830182828015610cf65780601f10610ccb57610100808354040283529160200191610cf6565b820191906000526020600020905b815481529060010190602001808311610cd957829003601f168201915b5050505050905090565b60045490565b60055490565b60009081526010602052604090205490565b6017546001600160a01b0316610d7b576040805162461bcd60e51b815260206004820152600d60248201527f4e4f5f4d554c5449544f4b454e00000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821615801590610d9b57506001600160a01b03811615155b610dec576040805162461bcd60e51b815260206004820152601060248201527f5a45524f5f44455354494e4154494f4e00000000000000000000000000000000604482015290519081900360640190fd5b600b5415610e41576040805162461bcd60e51b815260206004820152600e60248201527f414c52454144595f4d494e544544000000000000000000000000000000000000604482015290519081900360640190fd5b6000610e4b612786565b601754604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301526024820185905260016044830152915193945091169163156e29f69160648082019260009290919082900301818387803b158015610ec257600080fd5b505af1158015610ed6573d6000803e3d6000fd5b50505050610ee58160026127e3565b610eed612786565b601754604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301526024820185905260016044830152915193945091169163156e29f69160648082019260009290919082900301818387803b158015610f6457600080fd5b505af1158015610f78573d6000803e3d6000fd5b50505050610f878160026127e3565b505050565b610f9682826128d5565b5050565b6001600160a01b03811660009081526014602052604090205460ff16611036576013805460018082019092557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0900180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091556000908152601460205260409020805460ff191690911790555b50565b60135490565b600d5490565b601a547501000000000000000000000000000000000000000000900460ff1690565b60006013828154811061107657fe5b6000918252602090912001546001600160a01b031692915050565b610f87838383612e5e565b6001600160a01b0386166110f7576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f544f4b454e00000000000000000000000000000000000000604482015290519081900360640190fd5b8360ff166001148061110c57508360ff166002145b8061111a57508360ff166003145b61116b576040805162461bcd60e51b815260206004820152601160248201527f494e56414c49445f544f4b454e54595045000000000000000000000000000000604482015290519081900360640190fd5b8360ff16600314801561118657506001600160a01b03851615155b8061119557508360ff16600314155b6111e6576040805162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f504f4f4c0000000000000000000000000000000000000000604482015290519081900360640190fd5b8360ff1660011480156111f7575082155b8061120557508360ff166002145b8061121c57508360ff16600314801561121c575082155b61126d576040805162461bcd60e51b815260206004820152600f60248201527f494e56414c49445f544f4b454e49440000000000000000000000000000000000604482015290519081900360640190fd5b816112bf576040805162461bcd60e51b815260206004820152600b60248201527f5a45524f5f414d4f554e54000000000000000000000000000000000000000000604482015290519081900360640190fd5b6040805160c0810182526001600160a01b0397881681529587166020870190815260ff958616918701918252606087019485526080870193845291151560a087019081526015805460018101825560009190915296517f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec475600590980297880180547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116928b1692909217905592517f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec476880180549351939094169816979097177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000919095160293909317909255517f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec477830155517f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47882015590517f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec479909101805460ff1916911515919091179055565b3360009081526016602052604090205460ff1615156001148061148757503033145b6114c25760405162461bcd60e51b81526004018080602001828103825260288152602001806139fa6028913960400191505060405180910390fd5b6001600160a01b038216611510576019546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561150a573d6000803e3d6000fd5b50610f96565b601954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039283166024820152604481018490529051918416916323b872dd916064808201926020929091908290030181600087803b15801561158557600080fd5b505af1158015611599573d6000803e3d6000fd5b505050506040513d60208110156115af57600080fd5b50505050565b336000908152601660205260409020805460ff19166001179055601a80549115157501000000000000000000000000000000000000000000027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff909216919091179055565b601754604080517efdd58e0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290516001600160a01b039092169162fdd58e91604480820192602092909190829003018186803b15801561168357600080fd5b505afa158015611697573d6000803e3d6000fd5b505050506040513d60208110156116ad57600080fd5b5051600114611703576040805162461bcd60e51b815260206004820152600f60248201527f4e4f545f434c41494d5f4f574e45520000000000000000000000000000000000604482015290519081900360640190fd5b6000818152600e6020908152604080832054601090925290912054811580159061172d5750600081115b61177e576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f434c41494d00000000000000000000000000000000000000604482015290519081900360640190fd5b6000838152600f602090815260408083205460129092528083205460175482517ff5298aca000000000000000000000000000000000000000000000000000000008152336004820152602481018990526001604482015292516001600160a01b039485169592944289109492169263f5298aca926064808201939182900301818387803b15801561180e57600080fd5b505af1158015611822573d6000803e3d6000fd5b505050506001600160a01b03831615611b375760006001821515141561199057601954604080517feee1ad8000000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b03169163eee1ad80916024808301926020929190829003018186803b1580156118a657600080fd5b505afa1580156118ba573d6000803e3d6000fd5b505050506040513d60208110156118d057600080fd5b5051601954604080517feee1ad800000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301529151939450600093919092169163eee1ad80916024808301926020929190829003018186803b15801561193e57600080fd5b505afa158015611952573d6000803e3d6000fd5b505050506040513d602081101561196857600080fd5b5051905060008282141561197c578261197e565b815b905061198a8682613692565b93505050505b601954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039283166024820152604481018490529051918616916323b872dd916064808201926020929091908290030181600087803b158015611a0557600080fd5b505af1158015611a19573d6000803e3d6000fd5b505050506040513d6020811015611a2f57600080fd5b50506001600160a01b0384166323b872dd3033611a4c87866136fb565b6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015611aa257600080fd5b505af1158015611ab6573d6000803e3d6000fd5b505050506040513d6020811015611acc57600080fd5b5050604080513381523060208201528082018990526001600160a01b03861660608201526080810187905260a0810185905260c0810183905290517fe0433fa1170f3ff4cf72fbeb1ae5f139a41b9457ab29e5ac480cb34ed271912a9181900360e00190a150611ca8565b600060018215151415611be757601954604080517feee1ad80000000000000000000000000000000000000000000000000000000008152600060048201819052915191926001600160a01b03169163eee1ad8091602480820192602092909190829003018186803b158015611bab57600080fd5b505afa158015611bbf573d6000803e3d6000fd5b505050506040513d6020811015611bd557600080fd5b50519050611be38682613692565b9150505b6019546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015611c21573d6000803e3d6000fd5b50336108fc611c3087846136fb565b6040518115909202916000818181858888f19350505050158015611c58573d6000803e3d6000fd5b5060408051338152306020820152808201899052606081018790526080810183905290517f414b0454a52507c753948f2002246a3358eaea8464b41c2143f88b100306eee69181900360a00190a1505b600d54611cb590856136fb565b600d5580611cc7575050505050611036565b6000306001600160a01b031663b788e4e96040518163ffffffff1660e01b815260040160206040518083038186803b158015611d0257600080fd5b505afa158015611d16573d6000803e3d6000fd5b505050506040513d6020811015611d2c57600080fd5b50516017546000898152601160205260408082205481517f156e29f600000000000000000000000000000000000000000000000000000000815233600482015260248101869052604481019190915290519394506001600160a01b039092169263156e29f692606480820193929182900301818387803b158015611daf57600080fd5b505af1158015611dc3573d6000803e3d6000fd5b50505050611dd28160026127e3565b601854604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b158015611e3857600080fd5b505af1158015611e4c573d6000803e3d6000fd5b505050506040513d6020811015611e6257600080fd5b5050601854604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810188905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b158015611ed157600080fd5b505af1158015611ee5573d6000803e3d6000fd5b505050506040513d6020811015611efb57600080fd5b505060008781526011602090815260409182902054825133815230928101929092528183018a905260608201849052608082015290517fa684ef88136a415ed987c0b39bc528a16b3e83b511c414590bbe613f38f1a0729181900360a00190a150505050505050565b60009081526009602052604090205490565b60009081526011602052604090205490565b6000611f92613758565b905090565b6001600160a01b03811660009081526014602052604090205460ff16156110365760005b601354811015610f9657816001600160a01b031660138281548110611fdc57fe5b6000918252602090912001546001600160a01b0316141561211357601380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061202757fe5b600091825260209091200154601380546001600160a01b03909216918390811061204d57fe5b600091825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055601380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081106120be57fe5b6000918252602080832090910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556001600160a01b03841682526014905260409020805460ff1916905550611036565b600101611fbb565b336000908152601660205260409020805460ff19166001179055601980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60009081526012602052604090205490565b60018054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101008789161502019095169490940493840181900481028201810190925282815260609390929091830182828015610cf65780601f10610ccb57610100808354040283529160200191610cf6565b600c5490565b3360009081526016602052604090205460ff1615156001148061222757503033145b6122625760405162461bcd60e51b81526004018080602001828103825260288152602001806139fa6028913960400191505060405180910390fd5b6001600160a01b03166000908152601660205260409020805460ff19166001179055565b6000908152600e602052604090205490565b601a5474010000000000000000000000000000000000000000900460ff1690565b6001600160a01b031660009081526016602052604090205460ff1690565b6000611f92612786565b60065490565b336000908152601660205260409020805460ff19166001179055601880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000908152600f60205260409020546001600160a01b031690565b600b5490565b60075490565b336000908152601660205260409020805460ff19166001179055601780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000600a82815481106123c557fe5b90600052602060002001549050919050565b336000908152601660205260409020805460ff19166001179055601a805491151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b336000908152601660205260409020805460ff19166001179055601a80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600054610100900460ff16806124a857506124a86137e5565b806124b6575060005460ff16155b6124f15760405162461bcd60e51b815260040180806020018281038252602e8152602001806139ab602e913960400191505060405180910390fd5b600054610100900460ff16158015612539576000805460ff197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b885161254c9060019060208c0190613917565b5087516125609060029060208b0190613917565b5060038790556004869055600585905560068490556007839055601a80547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90911674010000000000000000000000000000000000000000171675010000000000000000000000000000000000000000001790556001600160a01b03821615612680576013805460018082019092557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0900180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0385169081179091556000908152601460205260409020805460ff191690911790555b80156126af57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050505050505050565b3360009081526016602052604090205460ff161515600114806126dc57503033145b6127175760405162461bcd60e51b81526004018080602001828103825260288152602001806139fa6028913960400191505060405180910390fd5b336000526016602052565b336000908152601660205260409020805460ff19166001179055601b55565b60009081526008602052604090205460ff1690565b601b5490565b600a5490565b6001600160a01b031660009081526014602052604090205460ff1690565b60035490565b600b54604080517f67656d00000000000000000000000000000000000000000000000000000000006020808301919091523060601b6023830152603780830194909452825180830390940184526057909101909152815191012090565b8060ff16600114806127f857508060ff166002145b612849576040805162461bcd60e51b815260206004820152601160248201527f494e56414c49445f544f4b454e54595045000000000000000000000000000000604482015290519081900360640190fd5b600a805460018082019092557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8018390556000838152600860205260409020805460ff191660ff8416908117909155146128aa576128a56137f6565b6128b2565b6128b261380f565b600083815260096020526040902055600260ff82161415610f9657610f96613828565b60045482101561292c576040805162461bcd60e51b815260206004820152601360248201527f54494d454652414d455f544f4f5f53484f525400000000000000000000000000604482015290519081900360640190fd5b3461297e576040805162461bcd60e51b815260206004820152600c60248201527f5a45524f5f42414c414e43450000000000000000000000000000000000000000604482015290519081900360640190fd5b806129d0576040805162461bcd60e51b815260206004820152600d60248201527f5a45524f5f5155414e5449545900000000000000000000000000000000000000604482015290519081900360640190fd5b600554158015906129e357506005548211155b806129ee5750600554155b612a3f576040805162461bcd60e51b815260206004820152601260248201527f54494d454652414d455f544f4f5f4c4f4e470000000000000000000000000000604482015290519081900360640190fd5b6000612a4b3483613692565b90506000612a7084612a6a60045460035461385790919063ffffffff16565b90613692565b905080821015612ac7576040805162461bcd60e51b815260206004820152601060248201527f494e53554646494349454e545f45544800000000000000000000000000000000604482015290519081900360640190fd5b6000612ad1613758565b905080612b25576040805162461bcd60e51b815260206004820152601160248201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604482015290519081900360640190fd5b601754604080517f156e29f6000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001604482015290516001600160a01b039092169163156e29f69160648082019260009290919082900301818387803b158015612b9857600080fd5b505af1158015612bac573d6000803e3d6000fd5b50505050612bbb8160016127e3565b6000612bc742876138b7565b6000838152600e602052604090208190559050612be48386613857565b6000838152601060209081526040808320939093556011815282822088905560185483517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015293516001600160a01b039091169363634b5b7d9360248083019493928390030190829087803b158015612c6357600080fd5b505af1158015612c77573d6000803e3d6000fd5b505050506040513d6020811015612c8d57600080fd5b5050601854604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810186905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b158015612cfc57600080fd5b505af1158015612d10573d6000803e3d6000fd5b505050506040513d6020811015612d2657600080fd5b505060408051338152306020820152808201849052606081018890526080810187905260a0810185905290517f7772d56f71cb2b982c42f148cad4839ce0736b201b032c93233f428ba93817749181900360c00190a1612d92612d898487613857565b600d54906138b7565b600d55612d9f8386613857565b341115612e5657600033612dbd612db68689613857565b34906136fb565b604051600081818185875af1925050503d8060008114612df9576040519150601f19603f3d011682016040523d82523d6000602084013e612dfe565b606091505b5050905080612e54576040805162461bcd60e51b815260206004820152600d60248201527f524546554e445f4641494c454400000000000000000000000000000000000000604482015290519081900360640190fd5b505b505050505050565b6001600160a01b038316612eb9576040805162461bcd60e51b815260206004820152601360248201527f494e56414c49445f45524332305f544f4b454e00000000000000000000000000604482015290519081900360640190fd5b60135415801590612ee257506001600160a01b03831660009081526014602052604090205460ff165b80612eed5750601354155b612f3e576040805162461bcd60e51b815260206004820152601060248201527f544f4b454e5f444953414c4c4f57454400000000000000000000000000000000604482015290519081900360640190fd5b80612f90576040805162461bcd60e51b815260206004820152600d60248201527f5a45524f5f5155414e5449545900000000000000000000000000000000000000604482015290519081900360640190fd5b601a54604080517f1246dbf50000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015291519190921691631246dbf5916024808301926020929190829003018186803b158015612ff657600080fd5b505afa15801561300a573d6000803e3d6000fd5b505050506040513d602081101561302057600080fd5b50511515600114613078576040805162461bcd60e51b815260206004820152600f60248201527f4e4f5f554e49535741505f504f4f4c0000000000000000000000000000000000604482015290519081900360640190fd5b601a54600090819081906001600160a01b031663868d2d1e8761309b8888613692565b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060606040518083038186803b1580156130df57600080fd5b505afa1580156130f3573d6000803e3d6000fd5b505050506040513d606081101561310957600080fd5b5080516020820151604090920151601a549195509193509091507501000000000000000000000000000000000000000000900460ff161515600114156132155761315e84613158856064613857565b90613857565b8110156131b2576040805162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4554485f4c4951554944495459000000000000604482015290519081900360640190fd5b6131c184613158876064613857565b821015613215576040805162461bcd60e51b815260206004820152601c60248201527f494e53554646494349454e545f544f4b454e5f4c495155494449545900000000604482015290519081900360640190fd5b60035483111561326c576040805162461bcd60e51b815260206004820152600b60248201527f4f5645525041594d454e54000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061328984612a6a60045460035461385790919063ffffffff16565b90506004548110156132e2576040805162461bcd60e51b815260206004820152601160248201527f494e53554646494349454e545f54494d45000000000000000000000000000000604482015290519081900360640190fd5b60006132ec613758565b905080613340576040805162461bcd60e51b815260206004820152601160248201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604482015290519081900360640190fd5b601754604080517f156e29f6000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001604482015290516001600160a01b039092169163156e29f69160648082019260009290919082900301818387803b1580156133b357600080fd5b505af11580156133c7573d6000803e3d6000fd5b505050506133d68160016127e3565b60006133e242846138b7565b6000838152600e60209081526040808320849055601082528083208a9055600f825280832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038f16179055601282528083208c905560119091529020889055600d5490915061345c90876138b7565b600d55601854604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b1580156134c557600080fd5b505af11580156134d9573d6000803e3d6000fd5b505050506040513d60208110156134ef57600080fd5b5050601854604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810189905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b15801561355e57600080fd5b505af1158015613572573d6000803e3d6000fd5b505050506040513d602081101561358857600080fd5b505060408051338152306020820152808201849052606081018590526001600160a01b038b16608082015260a0810189905260c0810188905290517fe583bcc9acfcc0488165ba03e5e6613c9cb6a8cc97fd72a3d28b402b0a1830fc9181900360e00190a1604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a905290516001600160a01b038b16916323b872dd9160648083019260209291908290030181600087803b15801561365b57600080fd5b505af115801561366f573d6000803e3d6000fd5b505050506040513d602081101561368557600080fd5b5050505050505050505050565b60008082116136e8576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816136f157fe5b0490505b92915050565b600082821115613752576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60006007546000141580156137715750600754600c5411155b8061377c5750600754155b613787576000611f92565b50600c54604080517f636c61696d0000000000000000000000000000000000000000000000000000006020808301919091523060601b6025830152603980830194909452825180830390940184526059909101909152815191012090565b60006137f030613911565b15905090565b600b546000906138078160016138b7565b600b55905090565b600c546000906138208160016138b7565b600c55905090565b600061384160065460035461369290919063ffffffff16565b60035490915061385190826138b7565b60035550565b600082613866575060006136f5565b8282028284828161387357fe5b04146138b05760405162461bcd60e51b81526004018080602001828103825260218152602001806139d96021913960400191505060405180910390fd5b9392505050565b6000828201838110156138b0576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3b151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061395857805160ff1916838001178555613985565b82800160010185558215613985579182015b8281111561398557825182559160200191906001019061396a565b50613991929150613995565b5090565b5b80821115613991576000815560010161399656fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f6e74726f6c6c6572a2646970667358221220db0bd647de856d480b41af7a38ee4a1ff94a67252a5cda11ef76e3545f4610b264736f6c63430007030033",
  "deployedBytecode": "0x6080604052600436106103295760003560e01c8063a7fc7a07116101a5578063d104f8f5116100ec578063e5d2ce2f11610095578063ef430aa61161006f578063ef430aa614610bdd578063f4fde0d314610bf2578063f9eaee0d14610c07578063ff186b2e14610c3a57610329565b8063e5d2ce2f14610b3a578063e6c3b1f614610b64578063edcf2d5714610ba457610329565b8063d73cd47f116100c6578063d73cd47f14610991578063d9a3f9bb146109c4578063e1c28bef14610b2557610329565b8063d104f8f514610908578063d31674db1461093b578063d43e64601461096557610329565b8063c08fa1a41161014e578063c80c061311610128578063c80c0613146108de578063cf5380b4146108f3578063cf721b15146108de57610329565b8063c08fa1a41461079d578063c42cf53514610881578063c5e01a5c146108b457610329565b8063b429afeb1161017f578063b429afeb14610824578063b788e4e914610857578063bf86999b1461086c57610329565b8063a7fc7a07146107b2578063a901c474146107e5578063af6a6d791461080f57610329565b80636b6201da116102745780637f2e8f0c1161021d5780639277a185116101f75780639277a1851461072b578063959355601461075e57806395d89b4114610788578063a0021cf11461079d57610329565b80637f2e8f0c146106b95780638a09871b146106e357806390469a9d146106f857610329565b80637ae7815d1161024e5780637ae7815d146106395780637c5d643e146106655780637dcb0e5f1461068f57610329565b80636b6201da146105895780636ba0f5c4146105a65780637a4e4ecf1461060057610329565b80634178617f116102d65780635d2e0dd4116102b05780635d2e0dd4146104db5780635e5f2e26146105045780636100c3431461054a57610329565b80634178617f1461047e5780634565e5ef146104b1578063504cdacf146104c657610329565b806323b221a01161030757806323b221a0146103f45780632449ef511461041e578063392732b11461045b57610329565b806306fdde031461032e5780631aa43078146103b857806322e67e71146103df575b600080fd5b34801561033a57600080fd5b50610343610c4f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561037d578181015183820152602001610365565b50505050905090810190601f1680156103aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103c457600080fd5b506103cd610d00565b60408051918252519081900360200190f35b3480156103eb57600080fd5b506103cd610d06565b34801561040057600080fd5b506103cd6004803603602081101561041757600080fd5b5035610d0c565b34801561042a57600080fd5b506104596004803603604081101561044157600080fd5b506001600160a01b0381358116916020013516610d1e565b005b6104596004803603604081101561047157600080fd5b5080359060200135610f8c565b34801561048a57600080fd5b50610459600480360360208110156104a157600080fd5b50356001600160a01b0316610f9a565b3480156104bd57600080fd5b506103cd611039565b3480156104d257600080fd5b506103cd61103f565b3480156104e757600080fd5b506104f0611045565b604080519115158252519081900360200190f35b34801561051057600080fd5b5061052e6004803603602081101561052757600080fd5b5035611067565b604080516001600160a01b039092168252519081900360200190f35b34801561055657600080fd5b506104596004803603606081101561056d57600080fd5b506001600160a01b038135169060208101359060400135611091565b6104596004803603602081101561059f57600080fd5b5035611036565b3480156105b257600080fd5b50610459600480360360c08110156105c957600080fd5b506001600160a01b03813581169160208101359091169060ff6040820135169060608101359060808101359060a00135151561109c565b34801561060c57600080fd5b506104596004803603604081101561062357600080fd5b506001600160a01b038135169060200135611465565b34801561064557600080fd5b506104596004803603602081101561065c57600080fd5b503515156115b5565b34801561067157600080fd5b506104596004803603602081101561068857600080fd5b503561161a565b34801561069b57600080fd5b506103cd600480360360208110156106b257600080fd5b5035611f64565b3480156106c557600080fd5b506103cd600480360360208110156106dc57600080fd5b5035611f76565b3480156106ef57600080fd5b506103cd611f88565b34801561070457600080fd5b506104596004803603602081101561071b57600080fd5b50356001600160a01b0316611f97565b34801561073757600080fd5b506104596004803603602081101561074e57600080fd5b50356001600160a01b031661211b565b34801561076a57600080fd5b506103cd6004803603602081101561078157600080fd5b503561216f565b34801561079457600080fd5b50610343612181565b3480156107a957600080fd5b506103cd6121ff565b3480156107be57600080fd5b50610459600480360360208110156107d557600080fd5b50356001600160a01b0316612205565b3480156107f157600080fd5b506103cd6004803603602081101561080857600080fd5b5035612286565b34801561081b57600080fd5b506104f0612298565b34801561083057600080fd5b506104f06004803603602081101561084757600080fd5b50356001600160a01b03166122b9565b34801561086357600080fd5b506103cd6122d7565b34801561087857600080fd5b506103cd6122e1565b34801561088d57600080fd5b50610459600480360360208110156108a457600080fd5b50356001600160a01b03166122e7565b3480156108c057600080fd5b5061052e600480360360208110156108d757600080fd5b503561233b565b3480156108ea57600080fd5b506103cd612356565b3480156108ff57600080fd5b506103cd61235c565b34801561091457600080fd5b506104596004803603602081101561092b57600080fd5b50356001600160a01b0316612362565b34801561094757600080fd5b506103cd6004803603602081101561095e57600080fd5b50356123b6565b34801561097157600080fd5b506104596004803603602081101561098857600080fd5b503515156123d7565b34801561099d57600080fd5b50610459600480360360208110156109b457600080fd5b50356001600160a01b031661243b565b3480156109d057600080fd5b5061045960048036036101008110156109e857600080fd5b810190602081018135640100000000811115610a0357600080fd5b820183602082011115610a1557600080fd5b80359060200191846001830284011164010000000083111715610a3757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050640100000000811115610a8a57600080fd5b820183602082011115610a9c57600080fd5b80359060200191846001830284011164010000000083111715610abe57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060808101359060a001356001600160a01b031661248f565b348015610b3157600080fd5b506104596126ba565b348015610b4657600080fd5b5061045960048036036020811015610b5d57600080fd5b5035612722565b348015610b7057600080fd5b50610b8e60048036036020811015610b8757600080fd5b5035612741565b6040805160ff9092168252519081900360200190f35b348015610bb057600080fd5b5061045960048036036040811015610bc757600080fd5b506001600160a01b038135169060200135610f96565b348015610be957600080fd5b506103cd612756565b348015610bfe57600080fd5b506103cd61275c565b348015610c1357600080fd5b506104f060048036036020811015610c2a57600080fd5b50356001600160a01b0316612762565b348015610c4657600080fd5b506103cd612780565b60028054604080516020601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001871615020190941685900493840181900481028201810190925282815260609390929091830182828015610cf65780601f10610ccb57610100808354040283529160200191610cf6565b820191906000526020600020905b815481529060010190602001808311610cd957829003601f168201915b5050505050905090565b60045490565b60055490565b60009081526010602052604090205490565b6017546001600160a01b0316610d7b576040805162461bcd60e51b815260206004820152600d60248201527f4e4f5f4d554c5449544f4b454e00000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821615801590610d9b57506001600160a01b03811615155b610dec576040805162461bcd60e51b815260206004820152601060248201527f5a45524f5f44455354494e4154494f4e00000000000000000000000000000000604482015290519081900360640190fd5b600b5415610e41576040805162461bcd60e51b815260206004820152600e60248201527f414c52454144595f4d494e544544000000000000000000000000000000000000604482015290519081900360640190fd5b6000610e4b612786565b601754604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301526024820185905260016044830152915193945091169163156e29f69160648082019260009290919082900301818387803b158015610ec257600080fd5b505af1158015610ed6573d6000803e3d6000fd5b50505050610ee58160026127e3565b610eed612786565b601754604080517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301526024820185905260016044830152915193945091169163156e29f69160648082019260009290919082900301818387803b158015610f6457600080fd5b505af1158015610f78573d6000803e3d6000fd5b50505050610f878160026127e3565b505050565b610f9682826128d5565b5050565b6001600160a01b03811660009081526014602052604090205460ff16611036576013805460018082019092557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0900180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091556000908152601460205260409020805460ff191690911790555b50565b60135490565b600d5490565b601a547501000000000000000000000000000000000000000000900460ff1690565b60006013828154811061107657fe5b6000918252602090912001546001600160a01b031692915050565b610f87838383612e5e565b6001600160a01b0386166110f7576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f544f4b454e00000000000000000000000000000000000000604482015290519081900360640190fd5b8360ff166001148061110c57508360ff166002145b8061111a57508360ff166003145b61116b576040805162461bcd60e51b815260206004820152601160248201527f494e56414c49445f544f4b454e54595045000000000000000000000000000000604482015290519081900360640190fd5b8360ff16600314801561118657506001600160a01b03851615155b8061119557508360ff16600314155b6111e6576040805162461bcd60e51b815260206004820152600c60248201527f494e56414c49445f504f4f4c0000000000000000000000000000000000000000604482015290519081900360640190fd5b8360ff1660011480156111f7575082155b8061120557508360ff166002145b8061121c57508360ff16600314801561121c575082155b61126d576040805162461bcd60e51b815260206004820152600f60248201527f494e56414c49445f544f4b454e49440000000000000000000000000000000000604482015290519081900360640190fd5b816112bf576040805162461bcd60e51b815260206004820152600b60248201527f5a45524f5f414d4f554e54000000000000000000000000000000000000000000604482015290519081900360640190fd5b6040805160c0810182526001600160a01b0397881681529587166020870190815260ff958616918701918252606087019485526080870193845291151560a087019081526015805460018101825560009190915296517f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec475600590980297880180547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116928b1692909217905592517f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec476880180549351939094169816979097177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000919095160293909317909255517f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec477830155517f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47882015590517f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec479909101805460ff1916911515919091179055565b3360009081526016602052604090205460ff1615156001148061148757503033145b6114c25760405162461bcd60e51b81526004018080602001828103825260288152602001806139fa6028913960400191505060405180910390fd5b6001600160a01b038216611510576019546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561150a573d6000803e3d6000fd5b50610f96565b601954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039283166024820152604481018490529051918416916323b872dd916064808201926020929091908290030181600087803b15801561158557600080fd5b505af1158015611599573d6000803e3d6000fd5b505050506040513d60208110156115af57600080fd5b50505050565b336000908152601660205260409020805460ff19166001179055601a80549115157501000000000000000000000000000000000000000000027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff909216919091179055565b601754604080517efdd58e0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290516001600160a01b039092169162fdd58e91604480820192602092909190829003018186803b15801561168357600080fd5b505afa158015611697573d6000803e3d6000fd5b505050506040513d60208110156116ad57600080fd5b5051600114611703576040805162461bcd60e51b815260206004820152600f60248201527f4e4f545f434c41494d5f4f574e45520000000000000000000000000000000000604482015290519081900360640190fd5b6000818152600e6020908152604080832054601090925290912054811580159061172d5750600081115b61177e576040805162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f434c41494d00000000000000000000000000000000000000604482015290519081900360640190fd5b6000838152600f602090815260408083205460129092528083205460175482517ff5298aca000000000000000000000000000000000000000000000000000000008152336004820152602481018990526001604482015292516001600160a01b039485169592944289109492169263f5298aca926064808201939182900301818387803b15801561180e57600080fd5b505af1158015611822573d6000803e3d6000fd5b505050506001600160a01b03831615611b375760006001821515141561199057601954604080517feee1ad8000000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b03169163eee1ad80916024808301926020929190829003018186803b1580156118a657600080fd5b505afa1580156118ba573d6000803e3d6000fd5b505050506040513d60208110156118d057600080fd5b5051601954604080517feee1ad800000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301529151939450600093919092169163eee1ad80916024808301926020929190829003018186803b15801561193e57600080fd5b505afa158015611952573d6000803e3d6000fd5b505050506040513d602081101561196857600080fd5b5051905060008282141561197c578261197e565b815b905061198a8682613692565b93505050505b601954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039283166024820152604481018490529051918616916323b872dd916064808201926020929091908290030181600087803b158015611a0557600080fd5b505af1158015611a19573d6000803e3d6000fd5b505050506040513d6020811015611a2f57600080fd5b50506001600160a01b0384166323b872dd3033611a4c87866136fb565b6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015611aa257600080fd5b505af1158015611ab6573d6000803e3d6000fd5b505050506040513d6020811015611acc57600080fd5b5050604080513381523060208201528082018990526001600160a01b03861660608201526080810187905260a0810185905260c0810183905290517fe0433fa1170f3ff4cf72fbeb1ae5f139a41b9457ab29e5ac480cb34ed271912a9181900360e00190a150611ca8565b600060018215151415611be757601954604080517feee1ad80000000000000000000000000000000000000000000000000000000008152600060048201819052915191926001600160a01b03169163eee1ad8091602480820192602092909190829003018186803b158015611bab57600080fd5b505afa158015611bbf573d6000803e3d6000fd5b505050506040513d6020811015611bd557600080fd5b50519050611be38682613692565b9150505b6019546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015611c21573d6000803e3d6000fd5b50336108fc611c3087846136fb565b6040518115909202916000818181858888f19350505050158015611c58573d6000803e3d6000fd5b5060408051338152306020820152808201899052606081018790526080810183905290517f414b0454a52507c753948f2002246a3358eaea8464b41c2143f88b100306eee69181900360a00190a1505b600d54611cb590856136fb565b600d5580611cc7575050505050611036565b6000306001600160a01b031663b788e4e96040518163ffffffff1660e01b815260040160206040518083038186803b158015611d0257600080fd5b505afa158015611d16573d6000803e3d6000fd5b505050506040513d6020811015611d2c57600080fd5b50516017546000898152601160205260408082205481517f156e29f600000000000000000000000000000000000000000000000000000000815233600482015260248101869052604481019190915290519394506001600160a01b039092169263156e29f692606480820193929182900301818387803b158015611daf57600080fd5b505af1158015611dc3573d6000803e3d6000fd5b50505050611dd28160026127e3565b601854604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b158015611e3857600080fd5b505af1158015611e4c573d6000803e3d6000fd5b505050506040513d6020811015611e6257600080fd5b5050601854604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810188905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b158015611ed157600080fd5b505af1158015611ee5573d6000803e3d6000fd5b505050506040513d6020811015611efb57600080fd5b505060008781526011602090815260409182902054825133815230928101929092528183018a905260608201849052608082015290517fa684ef88136a415ed987c0b39bc528a16b3e83b511c414590bbe613f38f1a0729181900360a00190a150505050505050565b60009081526009602052604090205490565b60009081526011602052604090205490565b6000611f92613758565b905090565b6001600160a01b03811660009081526014602052604090205460ff16156110365760005b601354811015610f9657816001600160a01b031660138281548110611fdc57fe5b6000918252602090912001546001600160a01b0316141561211357601380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061202757fe5b600091825260209091200154601380546001600160a01b03909216918390811061204d57fe5b600091825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055601380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081106120be57fe5b6000918252602080832090910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556001600160a01b03841682526014905260409020805460ff1916905550611036565b600101611fbb565b336000908152601660205260409020805460ff19166001179055601980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60009081526012602052604090205490565b60018054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101008789161502019095169490940493840181900481028201810190925282815260609390929091830182828015610cf65780601f10610ccb57610100808354040283529160200191610cf6565b600c5490565b3360009081526016602052604090205460ff1615156001148061222757503033145b6122625760405162461bcd60e51b81526004018080602001828103825260288152602001806139fa6028913960400191505060405180910390fd5b6001600160a01b03166000908152601660205260409020805460ff19166001179055565b6000908152600e602052604090205490565b601a5474010000000000000000000000000000000000000000900460ff1690565b6001600160a01b031660009081526016602052604090205460ff1690565b6000611f92612786565b60065490565b336000908152601660205260409020805460ff19166001179055601880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000908152600f60205260409020546001600160a01b031690565b600b5490565b60075490565b336000908152601660205260409020805460ff19166001179055601780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000600a82815481106123c557fe5b90600052602060002001549050919050565b336000908152601660205260409020805460ff19166001179055601a805491151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b336000908152601660205260409020805460ff19166001179055601a80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600054610100900460ff16806124a857506124a86137e5565b806124b6575060005460ff16155b6124f15760405162461bcd60e51b815260040180806020018281038252602e8152602001806139ab602e913960400191505060405180910390fd5b600054610100900460ff16158015612539576000805460ff197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b885161254c9060019060208c0190613917565b5087516125609060029060208b0190613917565b5060038790556004869055600585905560068490556007839055601a80547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90911674010000000000000000000000000000000000000000171675010000000000000000000000000000000000000000001790556001600160a01b03821615612680576013805460018082019092557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0900180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0385169081179091556000908152601460205260409020805460ff191690911790555b80156126af57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050505050505050565b3360009081526016602052604090205460ff161515600114806126dc57503033145b6127175760405162461bcd60e51b81526004018080602001828103825260288152602001806139fa6028913960400191505060405180910390fd5b336000526016602052565b336000908152601660205260409020805460ff19166001179055601b55565b60009081526008602052604090205460ff1690565b601b5490565b600a5490565b6001600160a01b031660009081526014602052604090205460ff1690565b60035490565b600b54604080517f67656d00000000000000000000000000000000000000000000000000000000006020808301919091523060601b6023830152603780830194909452825180830390940184526057909101909152815191012090565b8060ff16600114806127f857508060ff166002145b612849576040805162461bcd60e51b815260206004820152601160248201527f494e56414c49445f544f4b454e54595045000000000000000000000000000000604482015290519081900360640190fd5b600a805460018082019092557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8018390556000838152600860205260409020805460ff191660ff8416908117909155146128aa576128a56137f6565b6128b2565b6128b261380f565b600083815260096020526040902055600260ff82161415610f9657610f96613828565b60045482101561292c576040805162461bcd60e51b815260206004820152601360248201527f54494d454652414d455f544f4f5f53484f525400000000000000000000000000604482015290519081900360640190fd5b3461297e576040805162461bcd60e51b815260206004820152600c60248201527f5a45524f5f42414c414e43450000000000000000000000000000000000000000604482015290519081900360640190fd5b806129d0576040805162461bcd60e51b815260206004820152600d60248201527f5a45524f5f5155414e5449545900000000000000000000000000000000000000604482015290519081900360640190fd5b600554158015906129e357506005548211155b806129ee5750600554155b612a3f576040805162461bcd60e51b815260206004820152601260248201527f54494d454652414d455f544f4f5f4c4f4e470000000000000000000000000000604482015290519081900360640190fd5b6000612a4b3483613692565b90506000612a7084612a6a60045460035461385790919063ffffffff16565b90613692565b905080821015612ac7576040805162461bcd60e51b815260206004820152601060248201527f494e53554646494349454e545f45544800000000000000000000000000000000604482015290519081900360640190fd5b6000612ad1613758565b905080612b25576040805162461bcd60e51b815260206004820152601160248201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604482015290519081900360640190fd5b601754604080517f156e29f6000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001604482015290516001600160a01b039092169163156e29f69160648082019260009290919082900301818387803b158015612b9857600080fd5b505af1158015612bac573d6000803e3d6000fd5b50505050612bbb8160016127e3565b6000612bc742876138b7565b6000838152600e602052604090208190559050612be48386613857565b6000838152601060209081526040808320939093556011815282822088905560185483517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015293516001600160a01b039091169363634b5b7d9360248083019493928390030190829087803b158015612c6357600080fd5b505af1158015612c77573d6000803e3d6000fd5b505050506040513d6020811015612c8d57600080fd5b5050601854604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810186905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b158015612cfc57600080fd5b505af1158015612d10573d6000803e3d6000fd5b505050506040513d6020811015612d2657600080fd5b505060408051338152306020820152808201849052606081018890526080810187905260a0810185905290517f7772d56f71cb2b982c42f148cad4839ce0736b201b032c93233f428ba93817749181900360c00190a1612d92612d898487613857565b600d54906138b7565b600d55612d9f8386613857565b341115612e5657600033612dbd612db68689613857565b34906136fb565b604051600081818185875af1925050503d8060008114612df9576040519150601f19603f3d011682016040523d82523d6000602084013e612dfe565b606091505b5050905080612e54576040805162461bcd60e51b815260206004820152600d60248201527f524546554e445f4641494c454400000000000000000000000000000000000000604482015290519081900360640190fd5b505b505050505050565b6001600160a01b038316612eb9576040805162461bcd60e51b815260206004820152601360248201527f494e56414c49445f45524332305f544f4b454e00000000000000000000000000604482015290519081900360640190fd5b60135415801590612ee257506001600160a01b03831660009081526014602052604090205460ff165b80612eed5750601354155b612f3e576040805162461bcd60e51b815260206004820152601060248201527f544f4b454e5f444953414c4c4f57454400000000000000000000000000000000604482015290519081900360640190fd5b80612f90576040805162461bcd60e51b815260206004820152600d60248201527f5a45524f5f5155414e5449545900000000000000000000000000000000000000604482015290519081900360640190fd5b601a54604080517f1246dbf50000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015291519190921691631246dbf5916024808301926020929190829003018186803b158015612ff657600080fd5b505afa15801561300a573d6000803e3d6000fd5b505050506040513d602081101561302057600080fd5b50511515600114613078576040805162461bcd60e51b815260206004820152600f60248201527f4e4f5f554e49535741505f504f4f4c0000000000000000000000000000000000604482015290519081900360640190fd5b601a54600090819081906001600160a01b031663868d2d1e8761309b8888613692565b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060606040518083038186803b1580156130df57600080fd5b505afa1580156130f3573d6000803e3d6000fd5b505050506040513d606081101561310957600080fd5b5080516020820151604090920151601a549195509193509091507501000000000000000000000000000000000000000000900460ff161515600114156132155761315e84613158856064613857565b90613857565b8110156131b2576040805162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4554485f4c4951554944495459000000000000604482015290519081900360640190fd5b6131c184613158876064613857565b821015613215576040805162461bcd60e51b815260206004820152601c60248201527f494e53554646494349454e545f544f4b454e5f4c495155494449545900000000604482015290519081900360640190fd5b60035483111561326c576040805162461bcd60e51b815260206004820152600b60248201527f4f5645525041594d454e54000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061328984612a6a60045460035461385790919063ffffffff16565b90506004548110156132e2576040805162461bcd60e51b815260206004820152601160248201527f494e53554646494349454e545f54494d45000000000000000000000000000000604482015290519081900360640190fd5b60006132ec613758565b905080613340576040805162461bcd60e51b815260206004820152601160248201527f4e4f5f4d4f52455f434c41494d41424c45000000000000000000000000000000604482015290519081900360640190fd5b601754604080517f156e29f6000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001604482015290516001600160a01b039092169163156e29f69160648082019260009290919082900301818387803b1580156133b357600080fd5b505af11580156133c7573d6000803e3d6000fd5b505050506133d68160016127e3565b60006133e242846138b7565b6000838152600e60209081526040808320849055601082528083208a9055600f825280832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038f16179055601282528083208c905560119091529020889055600d5490915061345c90876138b7565b600d55601854604080517f634b5b7d00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b039092169163634b5b7d916024808201926020929091908290030181600087803b1580156134c557600080fd5b505af11580156134d9573d6000803e3d6000fd5b505050506040513d60208110156134ef57600080fd5b5050601854604080517fea40a7a40000000000000000000000000000000000000000000000000000000081523360048201526024810189905290516001600160a01b039092169163ea40a7a4916044808201926020929091908290030181600087803b15801561355e57600080fd5b505af1158015613572573d6000803e3d6000fd5b505050506040513d602081101561358857600080fd5b505060408051338152306020820152808201849052606081018590526001600160a01b038b16608082015260a0810189905260c0810188905290517fe583bcc9acfcc0488165ba03e5e6613c9cb6a8cc97fd72a3d28b402b0a1830fc9181900360e00190a1604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a905290516001600160a01b038b16916323b872dd9160648083019260209291908290030181600087803b15801561365b57600080fd5b505af115801561366f573d6000803e3d6000fd5b505050506040513d602081101561368557600080fd5b5050505050505050505050565b60008082116136e8576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816136f157fe5b0490505b92915050565b600082821115613752576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60006007546000141580156137715750600754600c5411155b8061377c5750600754155b613787576000611f92565b50600c54604080517f636c61696d0000000000000000000000000000000000000000000000000000006020808301919091523060601b6025830152603980830194909452825180830390940184526059909101909152815191012090565b60006137f030613911565b15905090565b600b546000906138078160016138b7565b600b55905090565b600c546000906138208160016138b7565b600c55905090565b600061384160065460035461369290919063ffffffff16565b60035490915061385190826138b7565b60035550565b600082613866575060006136f5565b8282028284828161387357fe5b04146138b05760405162461bcd60e51b81526004018080602001828103825260218152602001806139d96021913960400191505060405180910390fd5b9392505050565b6000828201838110156138b0576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3b151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061395857805160ff1916838001178555613985565b82800160010185558215613985579182015b8281111561398557825182559160200191906001019061396a565b50613991929150613995565b5090565b5b80821115613991576000815560010161399656fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f6e74726f6c6c61626c653a2063616c6c6572206973206e6f74206120636f6e74726f6c6c6572a2646970667358221220db0bd647de856d480b41af7a38ee4a1ff94a67252a5cda11ef76e3545f4610b264736f6c63430007030033",
  "libraries": {
    "GovernanceLib": "0x141C0D0Eefd02E420878E672A4323ddb4f6b397d",
    "Strings": "0x1D8aB2fB78846411D2b5F2689ce5375A9a0f1918",
    "SafeMath": "0x78dc8614DC0c9d24f111EfAF2A542A2C3bf4a402",
    "ProposalsLib": "0xD9C96AffC401336C554Ef6649299D59Cf586Bd5f",
    "Create2": "0x557b0DdCddEC1ad5C63D11C6CC387472348E4396"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAllowedToken(address)": {
        "details": "the external version of the above"
      },
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "addInputRequirement(address,address,uint8,uint256,uint256,bool)": {
        "details": "add an input requirement for this token"
      },
      "allTokenHashes(uint256)": {
        "details": "get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem"
      },
      "allTokenHashesLength()": {
        "details": "get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem"
      },
      "allowedTokens(uint256)": {
        "details": "the external version of the above"
      },
      "allowedTokensLength()": {
        "details": "the external version of the above"
      },
      "category()": {
        "details": "set market category"
      },
      "claimAmount(uint256)": {
        "details": "the claim amount for the given claim id"
      },
      "claimQuantity(uint256)": {
        "details": "the claim quantity (count of gems staked) for the given claim id"
      },
      "claimTokenAmount(uint256)": {
        "details": "claim token amount if paid using erc20"
      },
      "claimUnlockTime(uint256)": {
        "details": "the lock time for this claim. once past lock time a gema is minted"
      },
      "claimedCount()": {
        "details": "number of claims made thus far"
      },
      "collectClaim(uint256)": {
        "details": "collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)"
      },
      "createClaim(uint256)": {
        "details": "the external version of the above"
      },
      "createClaims(uint256,uint256)": {
        "details": "the external version of the above"
      },
      "createERC20Claim(address,uint256)": {
        "details": "create a claim using a erc20 token"
      },
      "createERC20Claims(address,uint256,uint256)": {
        "details": "create a claim using a erc20 token"
      },
      "difficultyStep()": {
        "details": "difficulty step increase for this pool."
      },
      "ethPrice()": {
        "details": "The ether price for this pool / NFT"
      },
      "initialize(string,string,uint256,uint256,uint256,uint256,uint256,address)": {
        "details": "initializer called when contract is deployed"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "isTokenAllowed(address)": {
        "details": "the external version of the above"
      },
      "maxClaims()": {
        "details": "max claims that can be made on this NFT"
      },
      "maxTime()": {
        "details": "max time to stake in this pool to earn an NFT"
      },
      "minTime()": {
        "details": "min time to stake in this pool to earn an NFT"
      },
      "mintGenesisGems(address,address)": {
        "details": "mint the genesis gems earned by the pools creator and funder"
      },
      "mintedCount()": {
        "details": "the number of gems minted in this"
      },
      "name()": {
        "details": "The name for this pool / NFT"
      },
      "nextClaimHash()": {
        "details": "the external version of the above"
      },
      "nextClaimId()": {
        "details": "the external version of the above"
      },
      "nextGemHash()": {
        "details": "the external version of the above"
      },
      "nextGemId()": {
        "details": "the external version of the above"
      },
      "relinquishControl()": {
        "details": "Check if this address is a controller"
      },
      "removeAllowedToken(address)": {
        "details": "the external version of the above"
      },
      "rescue(address,uint256)": {
        "details": "rescue funds"
      },
      "setCategory(uint256)": {
        "details": "set category category"
      },
      "setFeeTracker(address)": {
        "details": "set the governor. pool uses the governor to issue gov token issuance requests"
      },
      "setGovernor(address)": {
        "details": "set the governor. pool uses the governor to issue gov token issuance requests"
      },
      "setMultiToken(address)": {
        "details": "set the multitoken that this pool will mint new tokens on. Must be a controller of the multitoken"
      },
      "setSwapHelper(address)": {
        "details": "set the multitoken that this pool will mint new tokens on. Must be a controller of the multitoken"
      },
      "setValidateErc20(bool)": {
        "details": "set category category"
      },
      "setVisible(bool)": {
        "details": "set market visibility"
      },
      "stakedToken(uint256)": {
        "details": "the staked token if staking with erc20"
      },
      "symbol()": {
        "details": "The symbol for this pool / NFT"
      },
      "tokenId(uint256)": {
        "details": "get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem"
      },
      "tokenType(uint256)": {
        "details": "get token type of hash - 1 is for claim, 2 is for gem"
      },
      "totalStakedEth()": {
        "details": "the number of gems minted in this"
      },
      "validateErc20()": {
        "details": "set market category"
      },
      "visible()": {
        "details": "set market visibility"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26524,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 26527,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 19827,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 19829,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 19831,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_ethPrice",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 19833,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_minTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 19835,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_maxTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 19837,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_diffstep",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 19839,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_maxClaims",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 19843,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_tokenTypes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint8)"
      },
      {
        "astId": 19847,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19850,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_tokenHashes",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 19852,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_nextGemId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 19854,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_nextClaimId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 19856,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_totalStakedEth",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 19860,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "claimLockTimestamps",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19864,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "claimLockToken",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 19868,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "claimAmountPaid",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19872,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "claimQuant",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19876,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "claimTokenAmountPaid",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19879,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_allowedTokens",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 19883,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_isAllowedMap",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17744,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "inputRequirements",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_struct(InputRequirement)17741_storage)dyn_storage"
      },
      {
        "astId": 10169,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_controllers",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 16458,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_multitoken",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 16460,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_governor",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 16462,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_feeTracker",
        "offset": 0,
        "slot": "25",
        "type": "t_address"
      },
      {
        "astId": 16464,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_swapHelper",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 16466,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_visible",
        "offset": 20,
        "slot": "26",
        "type": "t_bool"
      },
      {
        "astId": 16468,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_validateerc20",
        "offset": 21,
        "slot": "26",
        "type": "t_bool"
      },
      {
        "astId": 16470,
        "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
        "label": "_category",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(InputRequirement)17741_storage)dyn_storage": {
        "base": "t_struct(InputRequirement)17741_storage",
        "encoding": "dynamic_array",
        "label": "struct NFTComplexGemPoolData.InputRequirement[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(InputRequirement)17741_storage": {
        "encoding": "inplace",
        "label": "struct NFTComplexGemPoolData.InputRequirement",
        "members": [
          {
            "astId": 17730,
            "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 17732,
            "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
            "label": "pool",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 17734,
            "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
            "label": "inputType",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 17736,
            "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 17738,
            "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
            "label": "minVal",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 17740,
            "contract": "src/pool/NFTComplexGemPool.sol:NFTComplexGemPool",
            "label": "burn",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}